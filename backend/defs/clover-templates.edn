;;
;;   ____ _    ____ _  _ ____ ____    ___ ____ _  _ ___  _    ____ ___ ____ ____      
;;   |    |    |  | |  | |___ |__/     |  |___ |\/| |__] |    |__|  |  |___ [__       
;;   |___ |___ |__|  \/  |___ |  \     |  |___ |  | |    |___ |  |  |  |___ ___]      
;;
;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;;
;; clover templates are basically just short-codes for front-end views. Anything that is value, works in a clover view, will work.
;; params get evaluated on the client side before render, just like any other views.
;; since solvers has a view DSL, you can use this to run server solvers as well. 
;; Ex See ":color-theft" below. Given an image-path, will return a full color map - and then it is rendered with ":data-viewer" so it can be browsed and pulled from
;; Note - in config.edn the "default viewers" for various block runners tend to use these to keep the file more concise.

{:color-theft   {:args [:*input]
                 :body [:data-viewer
                        [:run-solver
                         [:get-my-colors
                          {:input-image-path
                           :*input}]]]}
 :pretty-box        {:args [:*input]
                     :body [:box
                            :size "auto"
                            :align :center :justify :center
                            :style {:color "cyan"
                                    :font-weight 800
                                    :font-size [:auto-size-px [:str :*input]]}
                            :child [:str :*input]]}
 :new-block-quotes-box {:args [:*input]
                        :body [:box :align :center
                               :justify :center
                               :style {:font-size    "21px"
                                       :font-weight  700
                                       :padding-top  "6px"
                                       :padding-left "14px"
                                       :margin-top   "-8px"
                                       :color        :theme/editor-outer-rim-color
                                       :font-family  :theme/base-font}
                               :child [:speak
                                       [:str :*input]]]}
 :clj            {:args [:code]
                  :body  [:run-solver
                          {:signal false
                           :cache? false
                           :type :clojure
                           :input-map {}
                           :data :code}]}
 :clj2            {:args [:code]
                   :body  [:run-solver
                           {:signal false
                            :cache? false
                            :type :clojure2
                            :input-map {}
                            :data :code}]}
 :cheese-burger  {:args [:x]
                  :body [:box
                         :style {:color "yellow" :font-size "23px"}
                         :child [:str :x "CHEESEBURGER!"]]}}