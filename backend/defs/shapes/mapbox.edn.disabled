
{;;  :mapbox-point-map {:axes {:x [:or
;;                                [:and :dimension?
;;                                 ;:reasonable-cardinality? ;;
;;                                 [:or :low-cardinality? :very-low-cardinality? :medium-cardinality?]
;;                                  ;;;:reasonable-cardinality?
;;                                 [:not :measure?]]
;;                                [:or :looks-like-date? :looks-like-datetime?
;;                                 :is-date? :is-datetime?]]
;;                            :y [:measure?]}

;;                     :sql-maps [{:select [[[[:sum :y-field]] :y-field] :x-field]
;;                                 :from [:table]
;;                                 :group-by [:x-field]}]
;;                     :runner :clojure
;;                     :h 5 :w 9
;;                     :category [:viz :recharts]
;;                     :selected-view :reech
;;                     :library-shapes {:reech [:> :ResponsiveContainer {:width  "100%"
;;                                                                       :height :panel-height+50}
;;                                              [:> :ComposedChart {:data [] ;; needed to fake out :Bar component w/o main :data for some reason
;;                                                                  :margin {:top 5 :bottom 5
;;                                                                           :right 30 :left 20}}
;;                                               [:> :CartesianGrid {:strokeDasharray "1 4" :opacity 0.33}]
;;                                               [:> :Tooltip
;;                                                {:contentStyle {:backgroundColor "#00000099"
;;                                                                :border          "none"}
;;                                                 :itemStyle    {:color "#ecf0f1"}
;;                                                 :labelStyle   {:color  :theme/editor-outer-rim-color}}]
;;                                               [:> :XAxis {:dataKey :x-field :allowDuplicatedCategory false}]
;;                                               [:> :Bar {:dataKey :y-field
;;                                                         :isAnimationActive false
;;                                                         :data      :query-preview
;;                                                         :stroke    :theme/editor-outer-rim-color
;;                                                         :fill      [:str :theme/editor-outer-rim-color "33"]
;;                                                         :on-click [:set-recharts-param>]}]]]}
;;                     :base-score 1}

;;  :code-test {:axes {:x [:true?]}

;;                :sql-maps [{:select [[[:count [:distinct :x-field]] :dd]]
;;                            :from [:table]}]

;;                :runner :clojure
;;                :selected-mode :text

;;                :library-shapes
;;                (quote (let [trig :data-hash/query-preview
;;                             data :data/query-preview]
;;                         (str :x-field :rand-int-> (rand-int 123) " counts of " :x-field " ! =" (count data) "!")))
;;                :base-score 1}

 :mapbox-point-map  {:axes {:lat [:geo-lat?]
                            :long [:geo-long?]}

                     :sql-maps [{:select [:lat-field :long-field [[:count 1] :freq]]
                                 :from [:table]
                                 :group-by [:lat-field :long-field]
                                 :where [:and
                                         [:<> :lat-field nil]
                                         [:<> :long-field nil]]}]
                     :runner :clojure
                     :selected-mode :clover
                     :library-shapes
                     (quote (let [c    :theme/editor-outer-rim-color
                                  ddata (vec
                                         (for [row :data/query-preview
                                               :let [size (+ 2 (get row :freq 0))]]
                                           {:type "Feature"
                                            :properties {:size size :color c}
                                            :geometry
                                            {:type "Point"
                                             :coordinates
                                             [(get row :long-field)
                                              (get row :lat-field)]}}))]
                              [:> :Map
                               {:mapboxAccessToken :settings/mapbox-token
                                :mapStyle "mapbox://styles/mapbox/dark-v11"
                                :interactiveLayerIds ["points"]
                                ;; [:if [:= :*this-block* :user-sys/over-block] :_viewState :viewState]
                                :onMoveEnd :viewport-params-fn2
                                :initialViewState {:longitude
                                                   :*this-block*/longitude
                                                   :latitude :*this-block*/latitude
                                                   :zoom :*this-block*/zoom}
                                :style {:height :height-int
                                        :width "100%"}
                                :minZoom 3
                                :maxZoom 15
                                :projection "mercator"}
                               [:> :Source
                                {:id   "mapbox-data"
                                 :type "geojson"
                                 :data {:type     "FeatureCollection"
                                        :features ddata}}]
                               [:> :Layer
                                {:id     "points"
                                 :source "mapbox-data"
                                 :type   "circle"
                                 :paint  {"circle-radius" ["get" "size"]
                                          "circle-color"  ["get" "color"]}}]]))
                     :base-score 1}}


