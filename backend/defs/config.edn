;;
;;   ____ _  _ ___  ___  _ ___    ___  ____ ____ ____    ____ ____ _  _ ____ _ ____
;;   |__/ |  | |__] |__] |  |     |__] |__| [__  |___    |    |  | |\ | |___ | | __
;;   |  \  \/  |__] |__] |  |     |__] |  | ___] |___    |___ |__| | \| |    | |__]
;;
;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;; docs coming soon, doc!

{:debug-level 1 ;; for console output. somewhat deprecated.
 :hide-sub-and-unsub-alerts? true ;;false
 :show-query-times? false
 :log-atom-sizes? false ;; expensive, only for debugging
 :viz-shapes "./defs/viz-shapes.edn" ;; "./defs/viz-shapes-only-recharts.edn"
 ;:viz-shapes "./defs/viz-shapes-only-recharts.edn"
 ;:default "./screens/frost-terminal2.edn"
 :default "./screens/winter-theme-hybrid3.edn"
 ;:default "screens/ecto-cooler-shade.edn"
 ;; ^^ if no screen given in URL, load this one. the "start page" essentially.
 ;;    if this screen can't be read or is nil, you will get a basic blank screen with a default theme
 :harvest-on-boot? true
 ;; ^^ do a full database sniff for each connection on boot? No reason not to unless it is causing issues.
 :modes {:pre       [:pre
                     {:style {:color :theme/editor-outer-rim-color
                              :background-color "#00000000"
                              :border "none"
                              :text-shadow "4px 4px 4px #00000088"
                              :font-size "17px"
                              :font-family :theme/monospaced-font}}
                     [:str :*data]]
         :edn       [:edn :*data]
         :text      [:console :*data]
         :terminal  [:terminal :*data]
         :markdown  [:markdown :*data]
         :data      [:data-viewer :*data]
         :pretty    [:pretty-box :*data]
         :rowset    [:honeycomb {:select [:*] :from {:data :*data}} 11 9] ;; this is slow and funky. revisit?
         :clover    [:box :child :*data]}
  ;; ^^ see clover-templates.edn, for the full clover defs mentioned here
 :runners {:queries {:default {}
                     :modes [:rowset]
                     :hop-bar? false
                     :ext ".edn"
                     :icon "images/sql.png"} ;; basic clover-sql query runner
          ;;  :raw-sql {:default {}
          ;;            :modes [:rowset]
          ;;            :hop-bar? true
          ;;            :ext ".sql"
          ;;            :description "Raw, Organic, Artesial SQL Strings - fresh from the farm"
          ;;            :icon "ri-database-2-line"}
           :views   {:default []
                     :modes [:clover :edn :data]
                     :ext ".edn"
                     :description "Evaluate a Clover expression - the main DSL of all Rabbit view blocks. Can also mutate data via special shortcodes."
                     :icon "üçÄ"} ;; basic clover render

           :raw-sql  {:type :nrepl
                      :runner {:port 8181 :host "127.0.0.1"} ;; internal since it needs a rvbbit-backend namespace
                      :modes [:rowset :edn :terminal]
                      :default "-- system-db
select 1 as one;
-- to use rabbit reactive param keywords wrap them in {{}}
"
                      :syntax "sql"
                      :ext ".sql"
                      :hop-function? true
                      :slice-bar? true
                      :placeholder-on-running? true
                      :clover-fn [:run-solver
                                  {:signal false
                                   :cache? false
                                   :type :clojure
                                   :input-map {}
                                   :data (rvbbit-backend.websockets/run-raw-sql
                                          {:input (str :clover-body " ")
                                           :client-name :*client-name
                                           :solver-name :*solver-name
                                           :ui-keypath :*ui-keypath
                                           :connection-id :*connection-id})}]
                      :description "Raw, Organic, Artesial SQL Strings - fresh from the farm"
                      :icon "ri-database-2-line"}

           :pivot  {:type :nrepl
                      :runner {:port 8181 :host "127.0.0.1"} ;; internal since it needs a rvbbit-backend namespace
                      :modes [:clover :edn :terminal]
                      :default {:rowset-keypath [:DISTRICT-drag-36]
                                :row-keys [:DISTRICT]
                                :column-keys [:OFFENSE_CODE_GROUP :HOUR]
                                :agg-specs [[:incidents     :sum 0 :INCIDENT_NUMBER_countd_166]
                                            [:incidents-max :max 0 :INCIDENT_NUMBER_countd_166]]}
                      :syntax "clojure"
                      :ext ".edn"
                      :hop-function? false
                      :hop-bar? false
                      :slice-bar? true
                      :placeholder-on-running? false ;true
                      :clover-fn [:run-solver
                                  {:signal false
                                   :cache? false
                                   :type :clojure
                                   :input-map {}
                                   :data [:crosstab
                                          (rvbbit-backend.websockets/get-nested-grid
                                           {:input (or :clover-body {})
                                            :extra :*extra
                                            :client-name :*client-name
                                            :solver-name :*solver-name
                                            :ui-keypath :*ui-keypath
                                            :connection-id :*connection-id})]}]
                      :description "Crosstab pivoting of rectangular data structures"
                      :icon "ri-database-2-line"}

           :api-call {:type :nrepl
                      :runner {:port 8181 :host "127.0.0.1"} ;; internal since it needs a rvbbit-backend namespace
                      :modes [:edn :data :terminal]
                      :default {:endpoint "https://owen-wilson-wow-api.onrender.com/wows/random"
                                :method :get
                                :params {:results 15}
                                :flatten? true}
                      :syntax "clojure"
                      :ext ".edn"
                      :hop-function? false
                      :hop-bar? false
                      :slice-bar? true
                      :placeholder-on-running? true
                      :clover-fn [:run-solver
                                  {:signal false
                                   :cache? false
                                   :type :clojure
                                   :input-map {}
                                   :data (rvbbit-backend.websockets/api-call-wrapper
                                          {:input (or :clover-body {})
                                           :client-name :*client-name
                                           :solver-name :*solver-name
                                           :ui-keypath :*ui-keypath
                                           :connection-id :*connection-id})}]
                      :description "HTTP REST API Calls"
                      :icon "ri-server-line"}

           ;; ^ these 2 are built in a required and mostly not configurable for now
          ;;  :clojure-intro {:type :nrepl ;; this is the built-in REPL that starts by default
          ;;                  :runner {:port 8181 :host "127.0.0.1"} ;; from 8181 default for test overnight
          ;;                  :modes [:clover :text :data  :terminal]
          ;;                  :hop-function? true
          ;;                  :ext ".clj"
          ;;                  :default (do
          ;;                             (ns hoppy.chuck-norris
          ;;                               (:require [clojure.data.json :as json]
          ;;                                         [clojure.java.io :as io]))

          ;;                             (def url (java.net.URL. "https://api.chucknorris.io/jokes/random"))

          ;;                             (defn fetch-chuck-norris-joke []
          ;;                               (let [conn (.openConnection url)]
          ;;                                 (with-open [reader (io/reader (.getInputStream conn))]
          ;;                                   (json/read (java.io.PushbackReader. reader) :key-fn keyword))))

          ;;                             (defn joke-to-hiccup [joke]
          ;;                               [:v-box
          ;;                                :size "auto" :align :center :justify :center
          ;;                                :gap "4px"
          ;;                                :style {:color :theme/editor-outer-rim-color}
          ;;                                :children [[:h2 "Chuck's Wisdom of the Day"]
          ;;                                           [:p (:value joke)]
          ;;                                           [:img {:src "https://placekitten.com/200/200"
          ;;                                                  :width "200px" :height "200px" :style {:border-radius "15px"}
          ;;                                                  :alt "A cute bunny (actually a kitten)"}]]])

          ;;                             (def joke (fetch-chuck-norris-joke))

          ;;                             (def inputs (pr-str :clover-body))

          ;;                             (def hiccup (joke-to-hiccup joke))

          ;;                             (println "Console joke output:" (pr-str (get joke :value)))
          ;;                             hiccup)
          ;;                  :syntax "clojure"
          ;;                  :placeholder-clover [:v-box
          ;;                                       :children [[:img {:src "images/running.gif"}]]
          ;;                                       :size "auto"
          ;;                                       :style {:color :theme/universal-pop-color
          ;;                                               :font-size "14px"}
          ;;                                       :height :panel-height+50-px
          ;;                                       :align :center :justify :center]
          ;;                  :clover-fn [:run-solver
          ;;                              {:signal false
          ;;                               :cache? false
          ;;                               :type :clojure
          ;;                               :input-map {}
          ;;                               :data :clover-body}]
          ;;                  :description "Demo - Fetch a random Chuck Norris joke from the chucknorris.io API and display it with a cute kitten image."
          ;;                  :icon "images/chuck.png"}

           :clojure {:type :nrepl ;; this is the built-in REPL that starts by default
                     :runner {:port 8181 :host "127.0.0.1"} ;; from 8181 default for test overnight
                     :modes [:text :edn :clover :data  :terminal]
                     :ext ".clj"
                     :default (let [clojure-version (clojure-version)
                                    jvm-version (System/getProperty
                                                 "java.version")]
                                (str
                                 "üêáü•ï Sup! Internal RVBBIT nREPL. Clojure "
                                 clojure-version
                                 " on " jvm-version " JVM tech"
                                 " ü•ïüêá"))
                     :syntax "clojure"
                     :placeholder-clover [:v-box
                                          :children [;[:box :child [:str :*solver-name* " running..."]]
                                                     [:img {:src "images/running.gif"
                                                            ;:width "70px"
                                                            ;:height "70px"
                                                            }]]
                                          :size "auto"
                                          :style {:color :theme/universal-pop-color
                                                  ;:border "1px solid white"
                                                  :font-size "14px"}
                                          ;:width  :panel-width-px
                                          :height :panel-height+50-px
                                          :align :center :justify :center]
                     :clover-fn [:run-solver
                                 {:signal false
                                  :cache? false
                                  :type :clojure
                                  :input-map {}
                                  :data :clover-body}]
                     :description "Run a Clojure expression and return the result. Uses the internal RVBBIT nREPL, has access to all rvbbit-backend.* namespaces."
                     :pattern-hint "This is a standard Clojure REPL block. It executes Clojure code and returns the result in an arbitrary nREPL server of the users choosing.
                                    Since this system is EDN based, all code has to be wrapped in a (do ..) form in order to be evaluated as a single expression. If a user-provided do block already exists, just use it, do not double wrap it - a single parent (do ...) form is all that is needed.
                                    Being saved in EDN also means that it cannot use Clojure artifacts that are invalid EDN - so, do not use the shorthand for anon functions (#(this %)), or shorthand atom derefs (@atom), or shortcode sets (#{}) always use the full for version for these things - instead w/o the special characters (deref, set, (fn[x]...))."
                     :icon "images/clojure-alt.svg"
                     :kits {;; unfinished: might work better as a flow block... WIP
                            ;; :openai-data-clean {:when-fn (fn [client-panels client-data] ;; return a vector of [:block-id :runner-type :view-id] for things that are "eligible"
                            ;;                                (vec (apply concat (for [[k v] client-panels ;; ^^ runs on the local repl, not the host
                            ;;                                                         :when (get v :queries)] ;; only things eligble are query results
                            ;;                                                     (for  [kk (keys (get v :queries))]
                            ;;                                                       [k :queries kk])))))
                            ;;                     :output :kit-map
                            ;;                     :icon-location :query
                            ;;                     :tooltip "Experimental! Use OpenAI's API to clean data. Use as little data as possible to save tokens."
                            ;;                     :icon "ri-openai-fill"
                            ;;                     :kit-expr (do
                            ;;                                 (require '[cognitect.transit :as transit]
                            ;;                                          '[clojure.data.csv :as csv]
                            ;;                                          '[rvbbit-backend.external :as ext]
                            ;;                                          '[rvbbit-backend.assistant :as ass]
                            ;;                                          '[rvbbit-backend.util :as ut]
                            ;;                                          '[clojure.string :as cstr]
                            ;;                                          '[clojure.java.io :as io])
                            ;;                                 (ass/oai-call {:url "https://api.openai.com/v1/chat/completions"
                            ;;                                                :method :post
                            ;;                                                :body {:model "gpt-4o"
                            ;;                                                       :messages [{:role "system"
                            ;;                                                                   :content (str "You are a data cleaner. You are given a dataset and instructions,
                            ;;                                                                                      you will not respond to anything, you will just clean the data and return it as valid Clojure EDN.
                            ;;                                                                                           Do NOT send backticks or language identifiers, JUST the EDN structure please.
                            ;;                                                                                      The instructions are: 'Fix the YEAR col - make a guess if you have to with the information given.
                            ;;                                                                                      If a range is given, pick something in the middle - just make a reasonable assumption as to what
                            ;;                                                                                      the user intended. If you CANNOT decide or there is not enough information,
                            ;;                                                                                      use -1 as the answer for that column.'"
                            ;;                                                                                 "here is the data: " (pr-str test-data))}]}}
                            ;;                                               :settings/openai-api-key
                            ;;                                               :settings/openai-org-id))}
                            :export-to-csv {:when-fn (fn [client-panels client-data] ;; return a vector of [:block-id :runner-type :view-id] for things that are "eligible"
                                                       (vec (apply concat (for [[k v] client-panels ;; ^^ runs on the local repl, not the host
                                                                                :when (get v :queries)] ;; only things eligble are query results
                                                                            (for  [kk (keys (get v :queries))]
                                                                              [k :queries kk])))))
                                            :output :kit-map
                                            :icon-location :query
                                            :tooltip "Export a rowset to CSV"
                                            :icon "ri-export-fill"
                                            :kit-expr (do
                                                        (require '[cognitect.transit :as transit]
                                                                 '[clojure.data.csv :as csv]
                                                                 '[rvbbit-backend.external :as ext]
                                                                 '[rvbbit-backend.util :as ut]
                                                                 '[clojure.string :as cstr]
                                                                 '[clojure.java.io :as io])
                                                        (let [dest-dir "assets/data-exports"
                                                              _ (ext/create-dirs dest-dir) ;; if not exists, create it
                                                              transit-file :transit-rowset
                                                              data-key     :data-key
                                                              panel-key    :panel-key
                                                              output-file  (-> (str dest-dir "/" data-key "_" panel-key ".csv")
                                                                               (cstr/replace ":" ""))
                                                              [finished-output-file
                                                               rowcount] (let [transit-data (with-open [in (io/input-stream transit-file)]
                                                                                              (let [reader (transit/reader in :msgpack)]
                                                                                                (transit/read reader)))]
                                                                           ;; Convert to CSV
                                                                           (when (seq transit-data)
                                                                             (let [headers (keys (first transit-data))
                                                                                   headers-str (map (fn [x] (cstr/replace (str x) ":" "")) headers)
                                                                                   rows (map (fn [x] (map x headers)) transit-data)]
                                                                               ;; Write CSV file
                                                                               (with-open [writer (io/writer output-file)]
                                                                                 (csv/write-csv writer (cons headers-str rows)))))
                                                                                    ;; Return the path of the created file
                                                                           [output-file (count transit-data)])
                                                              kit-map {:push-alerts {:body [:v-box
                                                                                            :style {:font-size "17px"}
                                                                                            :children [[:box :child "File saved locally to:"]
                                                                                                       [:box :child (str output-file)]]]
                                                                                     :w 13 :h 3
                                                                                     :seconds 60}
                                                                       :export-to-csv {:description "export to csv"
                                                                                       :options {:pages? true :search? false :actions? false}
                                                                                       :parameters {}
                                                                                       :mutates {}
                                                                                       :data [{:name (str "csv export of " data-key " in " panel-key)
                                                                                               :parameters {}
                                                                                               :step-mutates {}
                                                                                               :ask-mutates {}
                                                                                               :content [[:v-box
                                                                                                          :size "auto" :align :center :justify :center
                                                                                                          :width "490px"
                                                                                                          :style {:border [:str "3px solid " :theme/editor-outer-rim-color]
                                                                                                                  :border-radius "14px"}
                                                                                                          :padding "10px"
                                                                                                          :gap "5px"
                                                                                                          :children [[:box :child (str "Success. File saved locally to: ")]
                                                                                                                     [:box
                                                                                                                      :style {:font-size "17px"}
                                                                                                                      :child (str finished-output-file)]
                                                                                                                     [:box
                                                                                                                      :style {:font-size "17px"}
                                                                                                                      :child (str (ut/nf rowcount) " rows exported")]
                                                                                                                     [:img {:src "https://img-cdn.inc.com/image/upload/w_600,ar_16:9,c_fill,g_auto,q_auto:best/images/panoramic/2C61CEF_533890_jojsbx.webp"
                                                                                                                            :style {:width "100%"
                                                                                                                                    :padding "5px"
                                                                                                                                    :border-radius "14px"
                                                                                                                                    :height "100%"
                                                                                                                                    :object-fit "cover"}}]
                                                                                                                     [:box :child (str "..if you could... print this out for me... that'd be great...")]]]]}]}}]
                                                          (println "kit-map: " kit-map)
                                                          kit-map))}
                            ;; example of a kit that looks at the card's DATA to decide if it's eligible
                            ;; :count-map-keys {:when-fn (fn [client-panels client-data] ;; return a vector of [:block-id :runner-type :view-id] for things that are "eligible"
                            ;;                             (vec (apply concat (for [[k v] (dissoc client-data nil)
                            ;;                                                      :when (seq v)]
                            ;;                                                  (apply concat (for [[kk vv] v
                            ;;                                                                      :when (seq vv)]
                            ;;                                                                  (try
                            ;;                                                                    (for [kp (filter (fn [x] (coll? x)) vv)
                            ;;                                                                          :let [[k3 v3] kp]
                            ;;                                                                          :when (map? v3)]
                            ;;                                                                      [k kk k3])
                            ;;                                                                    (catch Exception _ nil))))))))
                            ;;                  :output :kit-map
                            ;;                  :icon-location :card
                            ;;                  :kit-expr (do
                            ;;                              (require '[clojure.java.io :as io]
                            ;;                                       '[rvbbit-backend.util :as ut]
                            ;;                                       '[cognitect.transit  :as transit])
                            ;;                              (try
                            ;;                                (let [transit-file :transit-file
                            ;;                                      panel-key :panel-key
                            ;;                                      data-key :data-key
                            ;;                                      host-runner :host-runner
                            ;;                                      _ (println "transit-file: " transit-file)
                            ;;                                      client-data (with-open [in (io/input-stream transit-file)] ;; getting client data, since we might be on a diff repl
                            ;;                                                    (transit/read (transit/reader in :msgpack)))
                            ;;                                      _ (println "keypath: " [:client-panels-data panel-key host-runner data-key])
                            ;;                                      panel-data (get-in client-data [:client-panels-data panel-key host-runner data-key])
                            ;;                                      kit-map {:push-alerts {:body [:box
                            ;;                                                                    :style {:font-size "22px"
                            ;;                                                                            :color "orange"}
                            ;;                                                                    :child (str "This map has " (count (keys panel-data)) " base level keys.")]
                            ;;                                                             :w 9
                            ;;                                                             :seconds 60}
                            ;;                                               :count-map-keys {:description "map has been analyzed. you're welcome."
                            ;;                                                                :options {:pages? true :search? false :actions? false}
                            ;;                                                                :parameters {}
                            ;;                                                                :mutates {}
                            ;;                                                                :data []}}]
                            ;;                                  (ut/pp [:kit-map kit-map])
                            ;;                                  kit-map)
                            ;;                                (catch Exception e (println "error: " e))))
                            ;;                  :icon "zmdi-map"
                            ;;                  :tooltip "Simple example kit that looks for an output map to act on and then sends an alert with the key count"}
                            ;; :new-lundberg {:when-fn (fn [_ _] ;; return a vector of [:block-id :runner-type :view-id] for things that are "eligible"
                            ;;                           [[:* :* :*]]) ;;; since this is a canvas level kit, we don't need to filter by panel or view. just say everything and make sure :icon-location is :canvas
                            ;;                :output :kit-map
                            ;;                :icon-location :canvas
                            ;;                :tooltip "Spawn a new view of Lundberg."
                            ;;                :kit-expr (let [tab-name :tab-name
                            ;;                                panel-key-name (keyword (str "lundberg-" (rand-int 777777)))
                            ;;                                kit-map {:push-alerts {:body [:box
                            ;;                                                              :style {:font-size "33px"
                            ;;                                                                      :color "orange"}
                            ;;                                                              :child "Yeaaahhhhh... that'd be great."]
                            ;;                                                       :w 15
                            ;;                                                       :seconds 60}
                            ;;                                         :push-assocs {[:panels panel-key-name]
                            ;;                                                       {:name          "a wild lundberg appears!"
                            ;;                                                        :w             8
                            ;;                                                        :selected-view :yeaaahhhhh
                            ;;                                                        :root          [10 10]
                            ;;                                                        :h             5
                            ;;                                                        :tab           tab-name
                            ;;                                                        :minimized?    false
                            ;;                                                        :views         {:yeaaahhhhh [:img {:src "https://img-cdn.inc.com/image/upload/w_600,ar_16:9,c_fill,g_auto,q_auto:best/images/panoramic/2C61CEF_533890_jojsbx.webp"
                            ;;                                                                                           :style {:width "100%"
                            ;;                                                                                                   :padding "5px"
                            ;;                                                                                                   :border-radius "20px"
                            ;;                                                                                                   :height "100%"
                            ;;                                                                                                   :object-fit "cover"}}]}}}
                            ;;                                         :new-lundberg {:description "please get to work..."
                            ;;                                                        :options {:pages? true :search? false :actions? false}
                            ;;                                                        :parameters {}
                            ;;                                                        :mutates {}
                            ;;                                                        :data []}}]
                            ;;                            kit-map)
                            ;;                :icon "ri-cup-fill"}
                            ;; :view-lundberg {:when-fn (fn [client-panels client-data] ;; return a vector of [:block-id :runner-type :view-id] for things that are "eligible"
                            ;;                            (vec (apply concat (for [[k v] client-panels ;; ^^ runs on the local repl, not the host
                            ;;                                                     :when (get v :views)]
                            ;;                                                 (for  [kk (keys (get v :views))]
                            ;;                                                   [k :views kk])))))
                            ;;                 :output :kit-map
                            ;;                 :icon-location :card ;; :card, :canvas
                            ;;                 :tooltip "Will take your view & replace it with a Lundberg."
                            ;;                 :kit-expr (let [kit-map {:push-alerts {:body [:box
                            ;;                                                               :style {:font-size "33px"
                            ;;                                                                       :color "orange"}
                            ;;                                                               :child "Yeaaahhhhh... that'd be great."]
                            ;;                                                        :w 15
                            ;;                                                        :seconds 60}
                            ;;                                          :push-assocs {[:panels :panel-key :views :data-key]
                            ;;                                                        [:img {:src "https://img-cdn.inc.com/image/upload/w_600,ar_16:9,c_fill,g_auto,q_auto:best/images/panoramic/2C61CEF_533890_jojsbx.webp"
                            ;;                                                               :style {:width "100%"
                            ;;                                                                       :padding "5px"
                            ;;                                                                       :border-radius "20px"
                            ;;                                                                       :height "100%"
                            ;;                                                                       :object-fit "cover"}}]}
                            ;;                                          :view-lundberg {:description "please get to work..."
                            ;;                                                          :options {:pages? true :search? false :actions? false}
                            ;;                                                          :parameters {}
                            ;;                                                          :mutates {}
                            ;;                                                          :data []}}]
                            ;;                             kit-map)
                            ;;                                             ;:icon "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS6aKuMo6Dao0FOSWXYczr9-cWeMw3APvo2yw&s"
                            ;;                 :icon "ri-cup-line"}
                            ;; :gen-ev {:when-fn (fn [client-panels client-data] ;; return a vector of [:block-id :runner-type :view-id] for things that are "eligible"
                            ;;                     []) ;; this kit is called in a different way, so it doesn't need an icon or to be validated to the users screen data
                            ;;          :output :kit-map
                            ;;          :icon-location :card ;; :card, :canvas
                            ;;          :tooltip "generate some shit."
                            ;;          :kit-expr (let [canvas-coords (or :*canvas-coords [])
                            ;;                          canvas-size (or :*canvas-size [])
                            ;;                          orig-input (or :*input "")
                            ;;                          input (str orig-input "\n\n"
                            ;;                                     (when (not (empty? :*metadata))
                            ;;                                       (str "\n\n ##QUERY/TABLE METADATA: \n"
                            ;;                                            (pr-str :*metadata)))
                            ;;                                     (when (not (empty? canvas-coords))
                            ;;                                       (str "\n\n ##CANVAS-COORDS-USED: \n"
                            ;;                                            (pr-str canvas-coords)))
                            ;;                                     (when (not (empty? canvas-size))
                            ;;                                       (str "\n\n ##CANVAS-SIZE: \n"
                            ;;                                            (pr-str canvas-size))))
                            ;;                          model :*model
                            ;;                          context :*context
                            ;;                          req-map {:input input
                            ;;                                   :client-name :*client-name
                            ;;                                   :id :*id
                            ;;                                   :context context
                            ;;                                   :runner :*runner
                            ;;                                   :pattern :*pattern ;;"clover-canvas"
                            ;;                                   :model model}
                            ;;                          _ (rvbbit-backend.util/pp [:req-map req-map])
                            ;;                          fabric-data (rvbbit-backend.websockets/fabric-run req-map)
                            ;;                          fabric-data-str (-> (clojure.string/join "\n" (flatten fabric-data))
                            ;;                                              (clojure.string/replace "```clojurescript" "")
                            ;;                                              (clojure.string/replace "```clojure" "")
                            ;;                                              (clojure.string/replace "```edn" "")
                            ;;                                              (clojure.string/replace "```" ""))
                            ;;                          _ (rvbbit-backend.util/pp [:output fabric-data-str])
                            ;;                          clover-map (try (clojure.edn/read-string fabric-data-str)
                            ;;                                          (catch Exception e
                            ;;                                            (let [_ (println "error parsing fabric-data, attempting to fix..." e)
                            ;;                                                  fixed (rvbbit-backend.websockets/fabric-run
                            ;;                                                         {:input fabric-data-str ;(str "The " (rand-int 1234567) " Error was: " (str e) "\n\n" fabric-data-str)
                            ;;                                                          :client-name :*client-name
                            ;;                                                          :id :*id
                            ;;                                                          :context ""
                            ;;                                                          :runner :*runner
                            ;;                                                          :pattern "clojure-edn-balance"
                            ;;                                                          :model :*model})
                            ;;                                                  fabric-data-str2 (clojure.string/join "\n" (flatten fixed))]
                            ;;                                              (try
                            ;;                                                (clojure.edn/read-string fabric-data-str2)
                            ;;                                                (catch Exception e
                            ;;                                                  (let [_ (println "error parsing fabric-data, attempting to fix AGAIN..." e)
                            ;;                                                        fixed (rvbbit-backend.websockets/fabric-run
                            ;;                                                               {:input fabric-data-str ;(str "The " (rand-int 1234544) " Error was: " (str e) "\n\n" fabric-data-str)
                            ;;                                                                :client-name :*client-name
                            ;;                                                                :id :*id
                            ;;                                                                :context ""
                            ;;                                                                :runner :*runner
                            ;;                                                                :pattern "clojure-edn-balance"
                            ;;                                                                :model :*model})
                            ;;                                                        fabric-data-str2 (clojure.string/join "\n" (flatten fixed))]
                            ;;                                                    (try
                            ;;                                                      (clojure.edn/read-string fabric-data-str2)
                            ;;                                                      (catch Exception e (do (println "error parsing fabric-data AGAIN AGAIN... we cooked." e) {:error (pr-str e)})))))))))
                            ;;                          comment (get clover-map [:comment]) ;; keypath as a key.
                            ;;                          clover-map (-> clover-map (dissoc :comment) (rvbbit-backend.util/dissoc-in [:comment]))
                            ;;                          kit-map {:push-alerts (let [change-cnt (count (keys clover-map))]
                            ;;                                                  {:body [:box
                            ;;                                                          :child [:speak (if comment (str comment)
                            ;;                                                                             (str model " has returned with " change-cnt " change" (when (> change-cnt 1) "s")))]]
                            ;;                                                   :seconds 10})
                            ;;                                   :push-assocs clover-map
                            ;;                                   :gen-ev {:description "please get to work...?"
                            ;;                                            :options {:pages? false :search? false :actions? false}
                            ;;                                            :parameters {}
                            ;;                                            :mutates {}
                            ;;                                            :data [{:name "previous"
                            ;;                                                    ;:step-mutates context
                            ;;                                                    :content [[:box
                            ;;                                                               :size "auto"
                            ;;                                                               :style {:border "1px solid #ffffff33"
                            ;;                                                                       :border-radius "15px"}
                            ;;                                                               :child "(n/a)"]]}
                            ;;                                                   {:name (str orig-input)
                            ;;                                                    ;:step-mutates clover-map
                            ;;                                                    :content [[:box
                            ;;                                                               :size "auto"
                            ;;                                                               :style {:border "1px solid #ffffff33"
                            ;;                                                                       :border-radius "15px"}
                            ;;                                                               :child [:edn (str clover-map)]]]}]}}]
                            ;;                      (rvbbit-backend.util/pp clover-map)
                            ;;                      kit-map)
                            ;;                 ;:icon "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS6aKuMo6Dao0FOSWXYczr9-cWeMw3APvo2yw&s"
                            ;;          :icon "zmdi-car"}
                            }}

          ;;  :fabric {:type :nrepl
          ;;           :runner {:port 8181 :host "127.0.0.1"} ;; internal since it needs a rvbbit-backend namespace
          ;;           :when-expr (do (require '[clojure.java.shell :as shell])
          ;;                          (try
          ;;                            (zero? (:exit (shell/sh "which" "fabric")))
          ;;                            (catch Exception _ false)))
          ;;           :modes [:text :markdown :clover :data :terminal]
          ;;           :default "funny tweet about rabbits and clojure"
          ;;           :syntax "text"
          ;;           :ext ".txt"
          ;;           :hop-function? true
          ;;           :slice-bar? false
          ;;           :placeholder-on-running? true
          ;;           :clover-fn [:run-solver
          ;;                       {:signal false
          ;;                        :cache? true
          ;;                        :type :clojure
          ;;                        :input-map {}
          ;;                        :data (rvbbit-backend.websockets/fabric-run
          ;;                               {:input (str :clover-body "")
          ;;                                :client-name :*client-name
          ;;                                :id :*id
          ;;                                :context :*context
          ;;                                :runner :*runner
          ;;                                :pattern (or :*pattern "tweet")
          ;;                                :model (or :*model "gpt-3.5-turbo")})}]
          ;;           :description "AI framework: Uses the Fabric command line tool to access various local and remote LLM models with pre-defined 'patterns', + special context-aware RVBBIT patterns."
          ;;           :icon "images/fbc-logo.gif"}

           :outliers {:type :nrepl
                      :runner {:port 45999 :host "127.0.0.1"}
                      :when-expr (do
                                   (require '[nrepl.core :as nrepl])
                                   (try
                                     (do
                                       (with-open [conn (nrepl/connect :port 45999 :host "127.0.0.1")]
                                         (-> (nrepl/client conn 1000)
                                             (nrepl/message {:op "eval" :code "(+ 1 1)"})))
                                       true)
                                     (catch Exception _ false))) ;; connection refused will throw
                      :modes [:text :clover :data :terminal]
                      :hop-bar? false ;; only used for the kit runner menu on query slice panels
                      :slice-bar? false
                      :default (let [clojure-version (clojure-version)
                                     jvm-version (System/getProperty
                                                  "java.version")]
                                 (str ;; default, never going to see this code, just a placeholder since this is a kit runner REPL only :hop-bar? false :slice-bar? false
                                  "üêáü•ï Outliers nREPL Library. Clojure "
                                  clojure-version
                                  " on " jvm-version " JVM "
                                  " ü•ïüêá"))
                      :syntax "clojure"
                      :ext ".clj"
                      :kits {:get-outliers {:when-fn (fn [client-panels client-data] ;; return a vector of [:block-id :runner-type :view-id] for things that are "eligible"
                                                       (vec (apply concat (for [[k v] client-panels ;; ^^ runs on the local repl, not the host
                                                                                :when (get v :queries)]
                                                                            (for  [kk (keys (get v :queries))]
                                                                              [k :queries kk])))))
                                            :output :kit-map
                                            :icon-location :query ;; :card, :canvas
                                            :tooltip "Run a dimensional outlier analysis on a SQL rowset (offline, NOT on the db host)"
                                            :kit-view-opts {:max-combos 4 ;; will be applied, client-side when view starts up
                                                            :dimensions-to-scan []}
                                            :kit-view-exprs [(let [panel-key :panel-key  ;; function "view" runs in the host nrepl
                                                                   max-combos (keyword (str (cstr/replace (str panel-key) ":" "") "/max-combos"))
                                                                   query-meta :query-metadata
                                                                   dimensions (vec (for [[k {:keys [:group-by?]}]
                                                                                         (get query-meta :fields)
                                                                                         :when group-by?] k))
                                                                   dimensions-to-scan (keyword (str (cstr/replace (str panel-key) ":" "") "/dimensions-to-scan"))]
                                                               [:v-box
                                                                :size "auto"
                                                                :align :center
                                                                :padding "6px"
                                                                :gap "10px"
                                                                :children
                                                                [[:box :child "dimensional outliers options"
                                                                  :style {:font-weight 700
                                                                          :font-size "45px"
                                                                          :color "orange"
                                                                          :font-family "Homemade Apple"}]
                                                                 [:box :child "group-by dimensions to include"]
                                                                 [:v-box
                                                                  :children
                                                                  (for [dimensions-chunk (partition-all 8 dimensions)]
                                                                    [:h-box
                                                                     :gap "8px"
                                                                     :size "auto"
                                                                     :children (for [dd dimensions-chunk]
                                                                                 [:box
                                                                                  :size "auto"
                                                                                  :padding "6px"
                                                                                  :child (str dd)
                                                                                  :style {:border "1px solid #ffffff33"
                                                                                          :background-color [:when [:some dd dimensions-to-scan] "orange"]
                                                                                          :color [:when [:some dd dimensions-to-scan] "black"]
                                                                                          :font-size "18px" :cursor "pointer"}
                                                                                  :attr {:on-click [:set-parameters :dimensions-to-scan dd]}])])]
                                                                 [:box :child "max dimension combos to run"]
                                                                 [:h-box
                                                                  :gap "10px"
                                                                  :children [[:slider :max-combos 2 10 1 200 max-combos]
                                                                             [:box :child [:str max-combos]]]]
                                                                 [:h-box
                                                                  ;:justify :between
                                                                  :style {:font-size "33px"
                                                                          :font-weight 700}
                                                                  :gap "50px"
                                                                  :children [[:box
                                                                              :style {;:border "1px solid green"
                                                                                      :cursor "pointer"}
                                                                              :child "GO?"
                                                                              :attr {:on-click [:set-parameter :go! :go!]}]
                                                                             [:box
                                                                              :style {;:border "1px solid red"
                                                                                      :cursor "pointer"}
                                                                              :child "CANCEL"
                                                                              :attr {:on-click [:set-parameter :go! :cancel!]}]]]]])]
                                            :kit-expr (rabbit-kit-outliers.core/get-outliers  ;; runs in the host nrepl
                                                       :data-key
                                                       :panel-key
                                                       :transit-rowset
                                                       :transit-rowset-meta
                                                       :opts-map)
                                             ;; return a function that will be called when the kit is run IN the calling REPL after being populated by this higher fn
                                            :icon "ri-book-shelf-fill"}}
                      :placeholder-on-running? true
                      :clover-fn [:run-solver
                                  {:signal false
                                   :cache? false
                                   :type :clojure
                                   :input-map {}
                                   :data :clover-body}]
                      :description "Clojure REPL only used for the Outliers Kit Runner."
                      :icon "images/fbc-logo.gif"}

           :shell {:type :nrepl ;; this is the built-in REPL that starts by default
                   :runner {:port 8181 :host "127.0.0.1"} ;; from 8181 default nrepl
                   :when-expr (do
                                (require '[clojure.java.shell :as shell])
                                (try
                                  (zero? (:exit (shell/sh "uname")))
                                  (catch Exception _ false)))
                   :modes [:text :data :terminal]
                   :default "ls -l ; top -n 1  ; pwd ; whoami "
                   :syntax "shell"
                   :ext ".sh"
                   :hop-function? true
                   :placeholder-on-running? true
                   :clover-fn [:run-solver
                               {:signal false
                                :cache? false
                                :type :clojure
                                :input-map {}
                                :data (let [command (str :clover-body)
                                            process-builder (ProcessBuilder. (into-array ["sh" "-c" command]))
                                            _ (.redirectErrorStream process-builder true)  ; Merge stderr into stdout
                                            process (.start process-builder)
                                            reader (java.io.BufferedReader.
                                                    (java.io.InputStreamReader.
                                                     (.getInputStream process)))
                                            output (StringBuilder.)]

                                        (loop []
                                          (when-let [line (.readLine reader)]
                                            (.append output line)
                                            (.append output "\n")
                                            (recur)))

                                        (.waitFor process)

                                        (let [result (str output)]
                                          (if (empty? result)
                                            "Command executed, but produced no output."
                                            result)))}]
                   :description "Run a shell (in your default shell) command (from the ./shell-root/ dir) & return the output. Warning: executes with permissions of RVBBIT server user."
                   :icon "ri-terminal-box-line"}
           :clojure2 {:type :nrepl ;; this is an example of some external remote nrepl that you control
                      :runner {:port 37851 :host "127.0.0.1"}
                      :when-expr (do ;; optional, but you might not want it to show up in the UI if we cant connect
                                   (require '[nrepl.core :as nrepl])
                                   (try
                                     (do
                                       (with-open [conn (nrepl/connect :port 37851 :host "127.0.0.1")]
                                         (-> (nrepl/client conn 1000)
                                             (nrepl/message {:op "eval" :code "(+ 1 1)"})))
                                       true)
                                     (catch Exception _ false))) ;; connection refused will throw
                      :modes [:text :edn :clover :data :terminal]
                      :ext ".clj"
                      :hop-bar? false
                      :default (let [clojure-version (clojure-version)
                                     jvm-version (System/getProperty
                                                  "java.version")]
                                 (str
                                  "üëª Whoa. Spooky external nREPL! üëÄ Clojure "
                                  clojure-version
                                  " on JVM tech " jvm-version
                                  " üëª"))
                      :syntax "clojure"
                      :clover-fn  [:run-solver
                                   {:signal false
                                    :type :clojure2
                                    :input-map {}
                                    :data :clover-body}]
                      :description "Run a Clojure expression and return the result. Uses an external nREPL server."
                      :icon "images/clojure_2.svg"}
           :create-image {:runner {}
                          :modes [:clover :data :text]
                          :type :flow
                          :syntax "text"
                          :ext ".txt"
                          :description "Create an image with OpenAI's DALLE-3 HTTP endpoint. Uses the 'openai-image-gen-ladder3' flowmap, and returns the :hiccup-image-box-w-png step value."
                          :placeholder-on-running? true
                          :clover-fn [:run-solver
                                      {:signal false
                                       :cache? false
                                       :type :flow
                                       :data
                                       {:flowmap "openai-image-gen-ladder3"
                                        :opts
                                        {:timeout 120000
                                         :overrides
                                         {:prompt
                                          :clover-body}}
                                        :return :hiccup-image-box-w-png}}]
                          :default "A beautiful viking forest landscape with a waterfall, wildlife, fantasy lit with cyberpunk & vaporwave colors.
                                    A retro future. Many rabbits eye the scene.
                                    There is a beautiful woman standing in the field, she looks upon you with kind eyes. In the style of a 1970s sci-fi movie poster."
                          :icon ["images/openai.png" "images/dalle3.png"]}
        ;;    :python3 {:runner {}
        ;;              :modes [:text :data  :clover :terminal]
        ;;              :type :flow
        ;;              :syntax "python"
        ;;              :ext ".py"
        ;;              :placeholder-on-running? true
        ;;              :clover-fn [:run-solver
        ;;                          {:signal false
        ;;                           :cache? false
        ;;                           :type :flow
        ;;                           :data
        ;;                           {:flowmap "simple-python-exec" ;; "python-test-1"
        ;;                            :opts
        ;;                            {:timeout 120000
        ;;                             :overrides
        ;;                             {:python-code-string ;;:open-input-1
        ;;                              :clover-body}}
        ;;                            :return :output-only}}]
        ;;              :default ["import platform"
        ;;                        ""
        ;;                        "def main():"
        ;;                        "    # Print Hello, World!"
        ;;                        "    print(\"Hello, World!\")"
        ;;                        "    "
        ;;                        "    # Print Python version"
        ;;                        "    print(f\"Python version: {platform.python_version()}\")"
        ;;                        "    "
        ;;                        "    # Print detailed Python version info"
        ;;                        "    print(f\"Python version info: {platform.python_version_tuple()}\")"
        ;;                        "    "
        ;;                        "    # Print system information"
        ;;                        "    print(f\"System: {platform.system()}\")"
        ;;                        "    print(f\"Node: {platform.node()}\")"
        ;;                        "    print(f\"Release: {platform.release()}\")"
        ;;                        "    print(f\"Version: {platform.version()}\")"
        ;;                        "    print(f\"Machine: {platform.machine()}\")"
        ;;                        "    print(f\"Processor: {platform.processor()}\")"
        ;;                        ""
        ;;                        "if __name__ == \"__main__\":"
        ;;                        "    main()"]
        ;;              :description "Run a Python script and return the output. Uses the 'simple-python-exec' flowmap. Super Experimental! (not really useful ATM)"
        ;;              :icon "images/python.svg"}
           }

 :new-block-rand  ["Why, sometimes I've believed as many as six impossible things before breakfast."
                   "Imagination is the only weapon in the war against reality."
                   "It's no use going back to yesterday, because I was a different person then."
                   "Who in the world am I? Ah, that's the great puzzle..."
                   "Curiouser and curiouser!"
                   "If you don't know where you are going any road can take you there."
                   "We're all mad here."
                   "I can't go back to yesterday because I was a different person then."
                   "It's always tea-time."
                   "Begin at the beginning and go on till you come to the end; then stop."
                   "I knew who I was this morning, but I've changed a few times since then."
                   "How long is forever? Sometimes, just one second."
                   "If everybody minded their own business, the world would go around a great deal faster than it does."
                   "I don't think... then you shouldn't talk, said the Hatter."
                   "Oh, how I wish I could shut up like a telescope! I think I could, if I only knew how to begin."
                   "You're entirely bonkers. But I'll tell you a secret... all the best people are."
                   "It was much pleasanter at home, when one wasn't always growing larger and smaller."
                   "I wonder if I've been changed in the night. Let me think. Was I the same when I got up this morning?"
                   "Have I gone mad? I'm afraid so, but let me tell you something, the best people usually are."
                   "Well, I never heard it before, but it sounds uncommon nonsense."
                   ;; end Alice in Wonderland quotes, start various cyberpunk
                   "Why, sometimes I've believed as many as six impossible things before breakfast."
                   "Imagination is the only weapon in the war against reality."
                   "Who in the world am I? Ah, that's the great puzzle."
                   "We're all mad here."
                   "How long is forever? Sometimes, just one second."
                   "The world is full of obvious things which nobody by any chance ever observes."
                   "Reality is that which, when you stop believing in it, doesn't go away."
                   "The sky above the port was the color of television, tuned to a dead channel."
                   "Information wants to be free."
                   "The future is already here ‚Äì it's just not evenly distributed."
                   "He had a chip in his head, an interface jack that allowed him to plug his brain directly into the console."
                   "The 'Net is a waste of time, and that's exactly what's right about it."
                   "Cyberspace. A consensual hallucination experienced daily by billions of legitimate operators, in every nation."
                   "The street finds its own uses for things."
                   "Accelerated world. Accelerated nervous system to go with it."
                   "The future has arrived ‚Äî it's just not evenly distributed yet."
                   "It's not enough to be able to pick up a sword. You have to know which end to poke into the enemy."
                   "When you want to know how things really work, study them when they're coming apart."
                   "The human sensory system is a lot more complex and weird than most people realize."
                   "Time moves in one direction, memory in another."
                   "The only thing that keeps you sane is to think that it's all a bad dream."
                   "We're an information economy. They teach you that in school. What they don't tell you is that it's impossible to move, to live, to operate at any level without leaving traces, bits, seemingly meaningless fragments of personal information."
                   "We monitor many frequencies. We listen always. Came a voice, out of the babel of tongues, speaking to us. It played us a mighty dub."
                   "Secrets are not the same as surprises."
                   "Neuromancer. The lane to the land of the dead."]}

