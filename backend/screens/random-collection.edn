{:reco-preview "2006850921",
 :sql-source
 {:client_memory
  {:select [:*], :connection-id "system-db", :from [:client_memory], :limit 111},
  :gen-viz-507
  {:select [[[[:count 1]] :rows] :YEAR :DISTRICT],
   :from
   [{:select
     [:DAY_OF_WEEK
      :DISTRICT
      :HOUR
      :INCIDENT_NUMBER
      :Lat
      :Long
      :MONTH
      :OFFENSE_CODE
      :OFFENSE_CODE_GROUP
      :OFFENSE_DESCRIPTION
      :REPORTING_AREA
      :STREET
      :YEAR],
     :from
     [[{:select
        [:DAY_OF_WEEK
         :DISTRICT
         :HOUR
         :INCIDENT_NUMBER
         :Lat
         :Long
         :MONTH
         :OCCURRED_ON_DATE
         :OFFENSE_CODE
         :OFFENSE_CODE_GROUP
         :OFFENSE_DESCRIPTION
         :REPORTING_AREA
         :SHOOTING
         :STREET
         :UCR_PART
         :YEAR],
        :from [[:offenses :mm47]],
        :order-by [[:DISTRICT :desc]]}
       :pp28]],
     :where
     [:and
      [:and [:= :OFFENSE_DESCRIPTION "VANDALISM"] [:= :DISTRICT "C11"]]
      [:= :HOUR 0]]}],
   :group-by [:YEAR :DISTRICT]},
  :OFFENSE-CODE-GROUP-drag-40
  {:select
   [:DAY_OF_WEEK
    :DISTRICT
    :HOUR
    :INCIDENT_NUMBER
    :Lat
    :Long
    :MONTH
    :OFFENSE_CODE
    :OFFENSE_CODE_GROUP
    :OFFENSE_DESCRIPTION
    :REPORTING_AREA
    :STREET
    :YEAR],
   :from
   [[{:select
      [:DAY_OF_WEEK
       :DISTRICT
       :HOUR
       :INCIDENT_NUMBER
       :Lat
       :Long
       :MONTH
       :OCCURRED_ON_DATE
       :OFFENSE_CODE
       :OFFENSE_CODE_GROUP
       :OFFENSE_DESCRIPTION
       :REPORTING_AREA
       :SHOOTING
       :STREET
       :UCR_PART
       :YEAR],
      :from [[:offenses :mm47]],
      :order-by [[:DISTRICT :desc]]}
     :pp28]],
   :page 1,
   :where
   [:and
    [:and [:= :OFFENSE_DESCRIPTION "VANDALISM"] [:= :DISTRICT "C11"]]
    [:= :HOUR 0]],
   :_last-run "08:15:18"},
  :raw_custom_override_793100426__block_86_clojure_new_clojure_
  {:select [:*],
   :connection-id "system-db",
   :from [:raw_custom_override_793100426__block_86_clojure_new_clojure_],
   :limit 111},
  :offenses-drag-9
  {:select
   [:DAY_OF_WEEK
    :DISTRICT
    :HOUR
    :INCIDENT_NUMBER
    :Lat
    :Long
    :MONTH
    :OCCURRED_ON_DATE
    :OFFENSE_CODE
    :OFFENSE_CODE_GROUP
    :OFFENSE_DESCRIPTION
    :REPORTING_AREA
    :SHOOTING
    :STREET
    :UCR_PART
    :YEAR],
   :from [[:offenses :mm47]],
   :order-by [[:DISTRICT :desc]]},
  :OFFENSE-CODE-GROUP-drag-21
  {:select [:OFFENSE_CODE_GROUP [[:count 1] :rowcnt]],
   :from
   [[{:select
      [:DAY_OF_WEEK
       :DISTRICT
       :HOUR
       :INCIDENT_NUMBER
       :Lat
       :Long
       :MONTH
       :OFFENSE_CODE
       :OFFENSE_CODE_GROUP
       :OFFENSE_DESCRIPTION
       :REPORTING_AREA
       :STREET
       :YEAR],
      :from
      [[{:select
         [:DAY_OF_WEEK
          :DISTRICT
          :HOUR
          :INCIDENT_NUMBER
          :Lat
          :Long
          :MONTH
          :OCCURRED_ON_DATE
          :OFFENSE_CODE
          :OFFENSE_CODE_GROUP
          :OFFENSE_DESCRIPTION
          :REPORTING_AREA
          :SHOOTING
          :STREET
          :UCR_PART
          :YEAR],
         :from [[:offenses :mm47]],
         :order-by [[:DISTRICT :desc]]}
        :pp28]],
      :where
      [:and
       [:and [:= :OFFENSE_DESCRIPTION "VANDALISM"] [:= :DISTRICT "C11"]]
       [:= :HOUR 0]]}
     :jj742]],
   :group-by [:OFFENSE_CODE_GROUP],
   :order-by [[:rowcnt :desc]]},
  :bigfoot-sightings-drag-35
  {:select
   [:alsonoticed
    :bfroid
    :class
    :county
    :date
    :environment
    :fixed_month
    :fixed_year
    :month
    :run_time
    :season
    :state
    :submitted
    :submitted_date
    :timeandconditions
    :title
    :url
    :year],
   :from [[:bigfoot_sightings :bb86]],
   :_last-run "09:11:13"},
  :new-clojure-sqlized
  {:select [:*],
   :connection-id "cache.db",
   :_sqlized-at "2024-09-02 09:56:02",
   :_sqlized-by [:block-9240 :clojure :new-clojure],
   :_sqlized-hash -1328304953,
   :from [:raw_custom_override1070344508__block_9240_clojure_new_clojure_]},
  :raw_custom_override1589124350__block_9240_clojure_new_clojure_
  {:select [:*],
   :connection-id "system-db",
   :from [:raw_custom_override1589124350__block_9240_clojure_new_clojure_],
   :limit 111},
  :gen-viz-1022
  {:select
   [[[[:count 1]] :rows]
    [[:substr :submitted_date 6 2] :by_month_sqlite_submitted_date]],
   :from
   [[{:select
      [:alsonoticed
       :bfroid
       :class
       :county
       :date
       :environment
       :fixed_month
       :fixed_year
       :month
       :run_time
       :season
       :state
       :submitted
       :submitted_date
       :timeandconditions
       :title
       :url
       :year],
      :from [[:bigfoot_sightings :bb86]]}
     :cc805]],
   :group-by [[:substr :submitted_date 6 2]]},
  :STREET-drag-11
  {:select [:STREET [[:count 1] :rowcnt]],
   :from
   [[{:select
      [:DAY_OF_WEEK
       :DISTRICT
       :HOUR
       :INCIDENT_NUMBER
       :Lat
       :Long
       :MONTH
       :OCCURRED_ON_DATE
       :OFFENSE_CODE
       :OFFENSE_CODE_GROUP
       :OFFENSE_DESCRIPTION
       :REPORTING_AREA
       :SHOOTING
       :STREET
       :UCR_PART
       :YEAR],
      :from [[:offenses :mm47]],
      :order-by [[:DISTRICT :desc]]}
     :dd35]],
   :group-by [:STREET],
   :order-by [[:rowcnt :desc]]},
  :rowcnt-drag-21
  {:select [[[:sum :rowcnt] :rowcnt_sum]],
   :from
   [[{:select [:OFFENSE_CODE_GROUP [[:count 1] :rowcnt]],
      :from
      [[{:select
         [:DAY_OF_WEEK
          :DISTRICT
          :HOUR
          :INCIDENT_NUMBER
          :Lat
          :Long
          :MONTH
          :OFFENSE_CODE
          :OFFENSE_CODE_GROUP
          :OFFENSE_DESCRIPTION
          :REPORTING_AREA
          :STREET
          :YEAR],
         :from
         [[{:select
            [:DAY_OF_WEEK
             :DISTRICT
             :HOUR
             :INCIDENT_NUMBER
             :Lat
             :Long
             :MONTH
             :OCCURRED_ON_DATE
             :OFFENSE_CODE
             :OFFENSE_CODE_GROUP
             :OFFENSE_DESCRIPTION
             :REPORTING_AREA
             :SHOOTING
             :STREET
             :UCR_PART
             :YEAR],
            :from [[:offenses :mm47]],
            :order-by [[:DISTRICT :desc]]}
           :pp28]],
         :where
         [:and
          [:and [:= :OFFENSE_DESCRIPTION "VANDALISM"] [:= :DISTRICT "C11"]]
          [:= :HOUR 0]]}
        :jj742]],
      :group-by [:OFFENSE_CODE_GROUP],
      :order-by [[:rowcnt :desc]]}
     :ii178]]},
  :raw_custom_override1070344508__block_9240_clojure_new_clojure_
  {:select [:*],
   :connection-id "system-db",
   :from [:raw_custom_override1070344508__block_9240_clojure_new_clojure_],
   :limit 111},
  :raw_custom_override86093687__block_86_clojure_new_clojure_
  {:select [:*],
   :connection-id "system-db",
   :from [:raw_custom_override86093687__block_86_clojure_new_clojure_],
   :limit 111},
  :bigfoot_sightings
  {:select [:*],
   :connection-id "system-db",
   :from [:bigfoot_sightings],
   :limit 111},
  :offense_codes
  {:select [:*], :connection-id "system-db", :from [:offense_codes], :limit 111},
  :offenses
  {:select [:*], :connection-id "system-db", :from [:offenses], :limit 111},
  :gen-viz-544
  {:select
   [[[[:sum :REPORTING_AREA]] :REPORTING_AREA]
    [[:substr :DAY_OF_WEEK 0 11] :day_sqlite_DAY_OF_WEEK]],
   :from
   [[{:select
      [:DAY_OF_WEEK
       :DISTRICT
       :HOUR
       :INCIDENT_NUMBER
       :Lat
       :Long
       :MONTH
       :OFFENSE_CODE
       :OFFENSE_CODE_GROUP
       :OFFENSE_DESCRIPTION
       :REPORTING_AREA
       :STREET
       :YEAR],
      :from
      [[{:select
         [:DAY_OF_WEEK
          :DISTRICT
          :HOUR
          :INCIDENT_NUMBER
          :Lat
          :Long
          :MONTH
          :OCCURRED_ON_DATE
          :OFFENSE_CODE
          :OFFENSE_CODE_GROUP
          :OFFENSE_DESCRIPTION
          :REPORTING_AREA
          :SHOOTING
          :STREET
          :UCR_PART
          :YEAR],
         :from [[:offenses :mm47]],
         :order-by [[:DISTRICT :desc]]}
        :pp28]],
      :where
      [:and
       [:and [:= :OFFENSE_DESCRIPTION "VANDALISM"] [:= :DISTRICT "C11"]]
       [:= :HOUR 0]]}
     :dd292]],
   :group-by [[:substr :DAY_OF_WEEK 0 11]]},
  :NAME-drag-37
  {:select [:NAME [[:count 1] :rowcnt]],
   :from [[{:select [:CODE :NAME], :from [[:offense_codes :kk735]]} :hh925]],
   :group-by [:NAME],
   :order-by [[:rowcnt :desc]]},
  :offense-codes-drag-1 {:select [:CODE :NAME], :from [[:offense_codes :kk735]]},
  :client-memory-drag-36
  {:select
   [:client_name
    :recent_messages_per_second
    :messages_per_second
    :mem_used
    :batches
    :packets
    :ts],
   :where [:= :client_name :*client-name-str],
   :from [[:client_memory :ee183]],
   :refresh-every 10,
   :cache? false,
   :_last-run "23:17:36",
   :order-by [[:mem_time :desc]]},
  :gen-viz-516
  {:cache? false,
   :where [:= :client_name :*client-name-str],
   :limit 50,
   :group-by [:ts],
   :_last-run "23:17:36",
   :refresh-every 10,
   :from
   [{:select
     [:client_name
      :recent_messages_per_second
      :messages_per_second
      :mem_used
      :batches
      :packets
      :ts],
     :where [:= :client_name :*client-name-str],
     :from [[:client_memory :ee183]],
     :order-by [[:mem_time :desc]]}],
   :order-by [[:ts :desc]],
   :connection-id "system-db",
   :select
   [[[[:sum :mem_used]] :mem_used]
    [[:sum :recent_messages_per_second] :messages_per_second]
    :ts],
   :post-process-fn
   (fn [x]
     (vec
       (reverse
         (for [row x] (assoc row :mb (int (/ (get row :mem_used) 1048576)))))))}},
 :meta
 {:flow-fn-sys
  {:fields
   {:name
    {:min ":*",
     :data-type "string",
     :commons {":=" 1, ":>=" 1, ":write-file" 1},
     :distinct 34,
     :group-by? true,
     :median ":get-colors",
     :max ":write-file",
     :avg ":alert! (non-numeric average)",
     :cardinality 100},
    :description
    {:min "Basic HTTP call primitive",
     :data-type "string",
     :commons
     {"Basic HTTP call primitive" 2,
      "Clojure subtract function." 2,
      "Get top 50 color frequencies from an image in hex form." 1},
     :distinct 32,
     :group-by? true,
     :median "Clojure true? function.",
     :max "Write you own Clojure function! Godspeed!",
     :avg
     "Send a pop-up notification to a client (or :all clients) (non-numeric average)",
     :cardinality 94},
    :full_map
    {:min
     "{:description \"Basic HTTP call primitive\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}",
     :data-type "string",
     :commons
     {"{:description \"Clojure add function.\", :fn (fn [& args] (apply + args)), :inputs [:args], :icon \"zmdi-plus\", :types {:args [:integer :float], :out [:integer :float]}}"
      1,
      "{:description \"Convert a JSON string to Clojure EDN\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}}"
      1,
      "{:description \"Clojure greater-than-or-equal function.\", :fn >, :inputs [:value1 :value2], :icon \"zmdi-chevron-right\", :types {:value1 [:integer :float], :value2 [:integer :float], :out :boolean}}"
      1},
     :distinct 34,
     :group-by? true,
     :median
     "{:description \"Clojure true? function.\", :fn true?, :inputs [:value], :icon \"zmdi-pizza\", :types {:value :boolean, :out :boolean}}",
     :max
     "{:file-path \"./flows/node-color-thief-js.edn\", :icon \"zmdi-gradient\", :description \"Take an image local path and generate a color palette map from it.\"}",
     :avg
     "{:description \"Send a pop-up notification to a client (or :all clients)\", :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration)), :inputs [:destination :content :w :h :duration], :icon \"zmdi-alert-polygon\", :style {:color \"#FDFD96\"}, :selected-style {:color \"#FDFD96\"}, :defaults {:destination :client-name, :content \"Alert!\", :w 10, :h 1, :duration 6}, :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer}} (non-numeric average)",
     :cardinality 100},
    :inputs
    {:min "",
     :data-type "string",
     :commons
     {"[:value1 :value2]" 7,
      "[:value]" 6,
      "[:destination :content :w :h :duration]" 3},
     :distinct 20,
     :group-by? true,
     :median "[:query]",
     :max "[:value]",
     :avg "[:destination :content :w :h :duration] (non-numeric average)",
     :cardinality 58},
    :icon
    {:min "fa-solid fa-terminal",
     :data-type "string",
     :commons {"zmdi-pizza" 3, "zmdi-file-text" 3, "zmdi-alert-polygon" 3},
     :distinct 20,
     :group-by? true,
     :median "zmdi-functions",
     :max "zmdi-washing-machine",
     :avg "zmdi-alert-polygon (non-numeric average)",
     :cardinality 58},
    :input_types
    {:min "[:any :any]",
     :data-type "string",
     :commons
     {"[[:integer :float] [:integer :float]]" 6, "[:string]" 6, "[:any]" 3},
     :distinct 17,
     :group-by? true,
     :median "[:string :string]",
     :max "[]",
     :avg "[:keyword :any :integer :integer :integer] (non-numeric average)",
     :cardinality 50},
    :output_types
    {:min "",
     :data-type "string",
     :commons {":any" 12, ":boolean" 11, ":string" 4},
     :distinct 8,
     :group-by? true,
     :median ":boolean",
     :max "[:integer :float]",
     :avg ":any (non-numeric average)",
     :cardinality 23},
    :category
    {:min ":clojure-base",
     :data-type "string",
     :commons {":rabbit-base" 18, ":clojure-base" 16},
     :distinct 2,
     :group-by? true,
     :median ":rabbit-base",
     :max ":rabbit-base",
     :avg ":rabbit-base (non-numeric average)",
     :cardinality 5}},
   :database-type "SQLite",
   :rowcount 34},
  :blocks-sys
  {:fields
   {:block_key
    {:min "",
     :data-type "string",
     :commons {":block-3392" 1, ":block-5844" 1, ":block-3777" 1},
     :distinct 70,
     :group-by? true,
     :median ":block-4932",
     :max "through the rabbit hole and out the other side",
     :avg ":viz-shapes0-list* (non-numeric average)",
     :cardinality 100},
    :block_name
    {:min "",
     :data-type "string",
     :commons
     {"drag-from-select-all-ufo_sightings" 4,
      "select-all-offenses" 3,
      "drag-from-select-all-offenses" 3},
     :distinct 61,
     :group-by? true,
     :median "block-9369",
     :max "views-block-4932",
     :avg " (non-numeric average)",
     :cardinality 87},
    :queries
    {:min 0,
     :data-type "integer",
     :commons {0 44, 1 24, 2 2},
     :distinct 3,
     :group-by? true,
     :median 0,
     :max 2,
     :avg 0.4,
     :cardinality 4},
    :views
    {:min 0,
     :data-type "integer",
     :commons {1 34, 0 29, 2 6},
     :distinct 4,
     :group-by? true,
     :median 1,
     :max 28,
     :avg 1.0571428571428572,
     :cardinality 5},
    :block_data
    {:min
     "{:clojure {:large-bg (do (let [dir \"/home/ryanr/rvbbit/frontend/resources/public/images/large\" rel-dir \"./images/large/\" files (->> (file-seq (clojure.java.io/file dir)) (filter (fn [x] (.isFile x))) (filter (fn [x] (not (clojure.string/includes? (str (.getName x)) \"8k\")))) (map (fn [x] (.getName x))))] (println (count files)) (vec (for [f files] {:ffilename (str f)}))))}, :name \"block-2361\", :w 7, :selected-mode {:large-bg :rowset}, :selected-view :large-bgss, :root [38 2], :h 14, :connection-id :*client-name*, :queries {:large-bg-sqlized {:select [:*], :connection-id :restored-star-shaped-moose-41, :_sqlized-at \"2024-08-10 16:24:05\", :_sqlized-by [:block-2361 :clojure :large-bg], :_sqlized-hash 1851117399, :from [:raw_custom_override346250891__block_2361_clojure_large_bg_]}}, :tab \"azure oyster\", :views {}}",
     :data-type "string",
     :commons
     {"{:name \"views-block-10898\", :w 9, :selected-mode {:clover-hop-1 :edn}, :selected-view :clover-hop-1, :root [20 18], :h 6, :opts {:clover-hop-1 {}}, :queries {}, :tab \"sapphire ape\", :minimized? false, :views {:clover-hop-1 [:app-db [:click-param :param]]}}"
      1,
      "{:h 4, :w 6, :tab \"fat hawk\", :root [17 2], :name \"block-11696\", :views {:pulled-val [:box :size \"auto\" :align :center :justify :center :style {:font-size [:auto-size-px :param/generated-colors>second-darkest]} :child [:string :param/generated-colors>second-darkest]]}, :queries {}}"
      1,
      "{:h 3, :w 5, :root [5 5], :tab \"azure oyster\", :selected-view :hare-vw-4, :name \"block-7935\", :views {:hare-vw-4 [:box :align :center :justify :center :style {:font-size \"21px\", :font-weight 700, :padding-top \"6px\", :padding-left \"14px\", :margin-top \"-8px\", :color :theme/editor-outer-rim-color, :font-family :theme/base-font} :child \"How long is forever? Sometimes, just one second.\"]}, :queries {}}"
      1},
     :distinct 70,
     :group-by? true,
     :median
     "{:h 7, :w 27, :connection-id \"system-db\", :name \"select-all-kits\", :queries {:kits-drag-39 {:select [:client_name :id :item_data :item_hash :item_key :item_name :item_options :item_type :updated], :from [[:kits :uu908]]}}, :root [2 9], :tab \"amber hog\"}",
     :max
     "{:queries {:viz-shapes0-sys->-shape {:select [:*], :from nil, :where [:*when {} [:*all= {} []]]}}, :selected-view :viz-shapes0-sys->-shape}",
     :avg
     "{:queries {:viz-shapes0-sys->-shape {:select [:*], :from nil, :where [:*when {} [:*all= {} []]]}}, :selected-view :viz-shapes0-sys->-shape} (non-numeric average)",
     :cardinality 100},
    :view_names
    {:min "",
     :data-type "string",
     :commons {"" 29, ":hi :stack" 6, ":param-val" 6},
     :distinct 23,
     :group-by? true,
     :median ":hare-vw",
     :max "console-out",
     :avg " (non-numeric average)",
     :cardinality 32},
    :query_names
    {:min "",
     :data-type "string",
     :commons {"" 44, ":setlists-drag-2" 1, ":tour-name-drag-11" 1},
     :distinct 27,
     :group-by? true,
     :median "",
     :max ":viz-shapes0-sys->-shape",
     :avg ":viz-shapes0-sys->-shape (non-numeric average)",
     :cardinality 38}},
   :database-type "SQLite",
   :rowcount 70},
  :fields-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :season-drag-828
  {:fields
   {:season
    {:min "Fall",
     :data-type "string",
     :commons {"Unknown" 1, "Winter" 1, "Spring" 1},
     :distinct 5,
     :group-by? true,
     :median "Summer",
     :max "Winter",
     :avg "Summer (non-numeric average)",
     :cardinality 100},
    :rowcnt
    {:min 50,
     :data-type "integer",
     :commons {50 1, 364 1, 398 1},
     :distinct 5,
     :group-by? false,
     :median 50,
     :max 917,
     :avg 497.2,
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 5},
  :tables-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :fflows-sys
  {:fields
   {:category
    {:min ":flow",
     :data-type "string",
     :commons {":flow" 5},
     :distinct 1,
     :group-by? true,
     :median ":flow",
     :max ":flow",
     :avg ":flow (non-numeric average)",
     :cardinality 20},
    :description
    {:min "",
     :data-type "string",
     :commons {"" 5},
     :distinct 1,
     :group-by? true,
     :median "",
     :max "",
     :avg " (non-numeric average)",
     :cardinality 20},
    :name
    {:min "a-random-wow",
     :data-type "string",
     :commons
     {"simple-python-exec" 1,
      "openai-image-gen-ladder" 1,
      "node-color-thief-js-webp" 1},
     :distinct 5,
     :group-by? true,
     :median "node-color-thief-js-webp",
     :max "simple-python-exec",
     :avg "a-random-wow (non-numeric average)",
     :cardinality 100},
    :file_path
    {:min "./flows/a-random-wow.edn",
     :data-type "string",
     :commons
     {"./flows/simple-python-exec.edn" 1,
      "./flows/openai-image-gen-ladder.edn" 1,
      "./flows/node-color-thief-js-webp.edn" 1},
     :distinct 5,
     :group-by? true,
     :median "./flows/node-color-thief-js-webp.edn",
     :max "./flows/simple-python-exec.edn",
     :avg "./flows/a-random-wow.edn (non-numeric average)",
     :cardinality 100},
    :full_map
    {:min
     "{:flowmaps {:movie-name {:y 700, :fn (fn [x] x), :w 125, :raw-fn (fn [value] (Thread/sleep 900) value), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :string}}, :h 100, :x 1150, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :unpack-results-map_poster {:y 828.8827626233314, :fn (fn [x] (get-in x [:poster])), :w 175, :raw-fn (fn [x] (get-in x [:poster])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 310, :x 914.9390597794543, :view (fn [x] [:img {:src x}]), :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:poster])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:poster])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :rando-string {:w 125, :h 75, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"feed me, seymour!\"}, :z 0, :ports {:in {}, :out {:out :string}}, :x 1350, :y 575}, :unpack-results-map_video=480p {:y 875, :fn (fn [x] (get-in x [:video :480p])), :w 375, :raw-fn (fn [x] (get-in x [:video :480p])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 275, :x 1350, :view (fn [x] [:iframe {:src x, :style {:border \"none\", :background-color \"#00000000\", :width :panel-width+80-px, :height :panel-height+80-px}}]), :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:video :480p])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:video :480p])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :full-wow-line {:y 700, :fn (fn [x] x), :w 125, :raw-fn (fn [value] value), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :string}}, :h 100, :x 1300, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :view-output? true, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :unpack-results-map {:y 550, :fn (fn [x] x), :w 200, :raw-fn (fn [value] (Thread/sleep 900) value), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:video :map, :total_wows_in_movie :integer, :* :map, :release_date :string, :director :string, :full_line :string, :movie :string, :year :integer, :poster :string, :audio :string, :current_wow_in_movie :integer, :timestamp :string, :movie_duration :string, :character :string}}, :h 100, :x 1050, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :view-output? true, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :open-input {:w 225, :h 85, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :inputs []}, :user-input {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\"}, :view-output? false, :width 350}, :z 0, :ports {:out {:url :string, :* :map}, :in {}}, :x 1000, :y 275}, :open-fn-5 {:y 700, :fn (fn [x] x), :w 125, :raw-fn (fn [value] (str value)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :string}}, :h 100, :x 1450, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :http-call-1 {:w 175, :h 100, :x 1050, :y 400, :z 0, :data {:flow-item {:description \"Basic HTTP call primitive\", :category \":rabbit-base\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :name \":http-call\", :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :input_types \"[:map]\", :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs \"[:req-map]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Basic HTTP call primitive\\\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \\\"zmdi-http\\\", :defaults {:req-map {:url \\\"https://owen-wilson-wow-api.onrender.com/wows/random\\\", :query-params {:movie \\\"Wedding Crashers\\\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \\\"#7BB696\\\"}, :selected-style {:color \\\"#7BB696\\\"}, :inputs [:req-map], :expandable? true, :required [:req-map]}\", :required [:req-map]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [395 185], :h 6, :connection-id nil, :view-output? true, :queries {:name-drag-26 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :nn42]], :where [:= :name \":http-call\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":http-call\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"zmdi-http\", :ports {:in {:req-map :map}, :out {:idx0 :map, :* :vector}}}, :character {:y 700, :fn (fn [x] x), :w 175, :raw-fn (fn [value] value), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :string}}, :h 100, :x 950, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}}, :zoom [-251.86 -320.96 1.225], :opts nil, :flow-id \"a-random-wow\", :flowmaps-connections [[:http-call-1/idx0 :unpack-results-map/value] [:unpack-results-map/full_line :full-wow-line/value] [:open-input/* :http-call-1/req-map] [:unpack-results-map/character :character/value] [:unpack-results-map/movie :movie-name/value] [:rando-string :open-fn-5/value] [:unpack-results-map :unpack-results-map_poster/x] [:movie-name :done] [:unpack-results-map :unpack-results-map_video=480p/x]]}",
     :data-type "string",
     :commons
     {"{:flowmaps {:python-code-string {:y 1225, :w 200, :types nil, :z 0, :ports {:out {:out :any}, :in {}}, :inputs nil, :h 85, :x 2325, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :inputs []}, :user-input [\"print('{:bvoo 123}')\"], :syntax \"python\", :width 350, :view-output? false}}, :shell-command-1 {:w 300, :h 150, :x 2225, :y 1625, :z 0, :data {:flow-item {:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :category \":rabbit-base\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :name \":shell-command\", :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :input_types \"[:string]\", :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs \"[:command]\", :output_types \":any\", :full_map \"{:description \\\"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\\\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :inputs [:command], :defaults {:command \\\"ls -la\\\"}, :style {:color \\\"#ffdd3c\\\"}, :selected-style {:color \\\"#ffdd3c\\\"}, :icon \\\"zmdi-washing-machine\\\", :types {:command :string, :out :any}}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [644.0833435058594 212.05990600585938], :h 6, :connection-id nil, :queries {:name-drag-14 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :cc526]], :where [:= :name \":shell-command\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":shell-command\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 4}}, :icon \"zmdi-washing-machine\", :ports {:in {:command :string}, :out {:output :list, :exception :vector, :seconds :list, :command :string, :* :map}}}, :py-executable {:w 175, :h 85, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"python3\"}, :z 0, :ports {:out {:out :string}}, :x 2450, :y 1375}, :write-file-1 {:w 125, :h 110, :x 2275, :y 1350, :z 0, :data {:flow-item {:description \"Write file content to the server. Useful in chaining together operations.\", :category \":rabbit-base\", :fn (fn [full-path file-data] (rvbbit-backend.websockets/write-local-file full-path file-data)), :name \":write-file\", :icon \"zmdi-file-text\", :types {:full-path :string, :file-data :string, :out :string}, :input_types \"[:string :string]\", :inputs \"[:full-path :file-data]\", :output_types \":string\", :full_map \"{:description \\\"Write file content to the server. Useful in chaining together operations.\\\", :fn (fn [full-path file-data] (rvbbit-backend.websockets/write-local-file full-path file-data)), :inputs [:full-path :file-data], :icon \\\"zmdi-file-text\\\", :types {:full-path :string, :file-data :string, :out :string}}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [1006.3619842529297 95.34896850585938], :h 6, :connection-id nil, :view-output? true, :queries {:name-drag-11 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :hh964]], :where [:= :name \":write-file\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":write-file\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 3}}, :icon \"zmdi-file-text\", :ports {:in {:full-path :string, :file-data :string}, :out {:status :keyword, :file-path :string, :* :map}}}, :tmp-file-path {:w 125, :h 85, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"/tmp/scratch.py\", :view-output? false}, :z 0, :ports {:out {:out :string}}, :x 2150, :y 1225}, :output-only {:y 1825, :fn (fn [x] x), :w 200, :raw-fn (fn [x] (try (clojure.edn/read-string (first x)) (catch Exception _ x))), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :list}}, :inputs nil, :h 100, :x 2425, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :view-output? false, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :clojure-string-join-1 {:w 220, :h 85, :x 2250, :y 1500, :z 0, :data {:flow-item {:description \"Clojure.string's join function.\", :category \":clojure-base\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :name \":clojure-string-join\", :icon \"zmdi-group\", :defaults {:delimiter \" \"}, :types {:delimiter :string, :out :string}, :input_types \"[:string]\", :inputs [:delimiter :value-1 :value-2], :output_types \":string\", :expandable? true, :full_map \"{:description \\\"Clojure.string's join function.\\\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \\\" \\\"}, :expandable? true, :icon \\\"zmdi-group\\\", :types {:delimiter :string, :out :string}}\", :required [:delimiter]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [740 342], :h 6, :connection-id nil, :queries {:name-drag-35 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :bb736]], :where [:= :name \":clojure-string-join\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":clojure-string-join\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 22}}, :icon \"zmdi-group\", :ports {:in {:delimiter :string, :value-1 :any, :value-2 :any}, :out {:out :string}}}}, :zoom [-2661.32 -1972.97 1.725], :opts nil, :flow-id \"simple-python-exec\", :flowmaps-connections [[:tmp-file-path :write-file-1/full-path] [:python-code-string :write-file-1/file-data] [:py-executable :clojure-string-join-1/value-1] [:write-file-1/file-path :clojure-string-join-1/value-2] [:clojure-string-join-1 :shell-command-1/command] [:output-only :done] [:shell-command-1/output :output-only/x]]}"
      1,
      "{:flowmaps {:oai-api-call {:y 1325, :description [\"Making the OpenAI API call with our prepared request map with all our details, headers, settings, etc. Here we are calling the gen-image endpoint for the DALLE3 model. This returns a full JSON map with includes the revised prompt as well at the base64 image string of the generated WEBP file. \" \"\" \"https://platform.openai.com/docs/guides/images/image-generation\"], :w 175, :right-click? true, :icon \"zmdi-http\", :z 0, :ports {:in {:req-map :map}, :out {:created :integer, :data :rowset, :* :map}}, :h 85, :x 1875, :data {:flow-item {:category \":rabbit-base\", :name \":make-http-call\", :type :make-http-call, :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :inputs [:req-map], :expandable? true, :required [:req-map]}, :drag-meta {:type :make-http-call}}}, :prompt-5 {:w 125, :h 60, :z 0, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"\"}, :right-click? true, :ports {:in {}, :out {:out :string}}, :x 2150, :y 650}, :node-js-color-thief-script {:y 1775, :description [\"Passing the webp image path to a node script sub-flow in order to extract the main color and color palette, we will use these hex values in a subsequent \\\"view\\\" step. Here we can create an asset to use on a data board.\"], :sub-flow {:flow-id \"node-color-thief-js\", :file-path \"./flows/node-color-thief-js.edn\", :map {:image-path {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \" /home/ryanr/rvbbit/frontend/resources/public/images/shannon45.png\"}, :z 0, :ports {:out {:out :string}}, :x 948.9116738809121, :y 1074.148015202703}, :shell-command-1 {:w 200, :h 100, :x 1758.4411167689732, :y 1117.7292503720237, :z 0, :data {:flow-item {:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :category \":rabbit-base\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :name \":shell-command\", :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :input_types \"[:string]\", :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs \"[:command]\", :output_types \":any\", :full_map \"{:description \\\"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\\\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \\\"zmdi-washing-machine\\\", :defaults {:command \\\"ls -la\\\"}, :types {:command :string, :out :any}, :style {:color \\\"#ffdd3c\\\"}, :selected-style {:color \\\"#ffdd3c\\\"}, :inputs [:command], :required [:command]}\", :required [:command]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [539.1770935058594 176.171875], :h 6, :connection-id nil, :queries {:name-drag-42 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :cc59]], :where [:= :name \":shell-command\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":shell-command\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"zmdi-washing-machine\", :ports {:in {:command :string}, :out {:output :vector, :exception :vector, :seconds :vector, :command :string, :* :map}}}, :clojure-string-join-1 {:w 200, :h 100, :x 1348.4940418061756, :y 1136.4640299479165, :z 0, :data {:flow-item {:description \"Clojure.string's join function.\", :category \":clojure-base\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :name \":clojure-string-join\", :icon \"zmdi-group\", :defaults {:delimiter \" \"}, :types {:delimiter :string, :out :string}, :input_types \"[:string]\", :inputs \"[:delimiter]\", :output_types \":string\", :expandable? true, :full_map \"{:description \\\"Clojure.string's join function.\\\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \\\" \\\"}, :expandable? true, :icon \\\"zmdi-group\\\", :types {:delimiter :string, :out :string}}\", :required [:delimiter]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [540.1770935058594 279.171875], :h 6, :connection-id nil, :queries {:name-drag-12 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ww526]], :where [:= :name \":clojure-string-join\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":clojure-string-join\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 15}}, :icon \"zmdi-group\", :ports {:in {:delimiter :string, :value-1 :any, :value-2 :any}, :out {:out :string}}}, :shell-command-in {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"cd /home/ryanr/color-thief-project ; node ./colorThief2.js\"}, :z 0, :ports {:out {:out :string}}, :x 960.0851863779922, :y 1224.4579849567817}, :join-output-as-string {:y 1158.848120777027, :fn (fn [x] x), :w 200, :raw-fn (fn [x] (clojure.string/join \" \" x)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :any}}, :h 100, :x 2212.3248878272807, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :json-to-edn {:w 200, :h 100, :x 2685.7088668823244, :y 1151.33984375, :z 0, :data {:flow-item {:description \"Convert a JSON string to Clojure EDN\", :category \":rabbit-base\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :name \":json-to-edn\", :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}, :input_types \"[:string]\", :inputs \"[:json-string]\", :output_types \":any\", :full_map \"{:description \\\"Convert a JSON string to Clojure EDN\\\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \\\"zmdi-file-text\\\", :types {:json-string :string, :out :any}}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [1297.1770935058594 207.171875], :h 6, :connection-id nil, :queries {:name-drag-41 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :uu284]], :where [:= :name \":json-to-edn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":json-to-edn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 7}}, :icon \"zmdi-file-text\", :ports {:in {:json-string :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}}}, :connections [[:shell-command-in :clojure-string-join-1/value-1] [:image-path :clojure-string-join-1/value-2] [:clojure-string-join-1 :shell-command-1/command] [:shell-command-1/output :join-output-as-string/value] [:join-output-as-string :json-to-edn/json-string] [:json-to-edn :done]]}, :flow-id \"node-color-thief-js\", :w 225, :icon \"zmdi-puzzle-piece\", :z 0, :ports {:in {:image-path :string, :shell-command-in :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}, :h 60, :file-path \"./flows/node-color-thief-js.edn\", :x 2050, :data {:flow-item nil, :name \"drag-from-\", :w 5, :source-panel :flow-list*, :root [678.71875 344.6979217529297], :h 6, :connection-id nil, :view-output? false, :queries {:flow-id-drag-5 {:select [:flow_id :file_path :last_modified], :from [[:query/flows-sys :cc208]], :where [:= :flow_id \"node-color-thief-js\"]}}, :drag-meta {:data-type \"string\", :done-block :json-to-edn, :source-query :flows-sys, :param-full \"node-color-thief-js\", :param-field :flow_id, :source-panel-key :flow-list*, :type :sub-flow, :param-table :flows-sys, :source-table :query/flows-sys, :connection-id nil, :target :flow_id, :row-num 4}}}, :dominant-color {:y 2100, :fn (fn [x] x), :w 125, :raw-fn (fn [x] x), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :string}}, :h 85, :x 2200, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :shell-command-2 {:y 1050, :w 225, :right-click? true, :icon \"zmdi-washing-machine\", :z 0, :ports {:in {:command :string}, :out {:out :any}}, :h 100, :x 2325, :data {:flow-item {:category \":rabbit-base\", :name \":shell-command\", :type :shell-command, :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :expandable? true, :required [:command]}, :drag-meta {:type :shell-command}}}, :shell-command-1 {:y 2600, :w 350, :right-click? true, :icon \"zmdi-washing-machine\", :z 0, :ports {:in {:command :string}, :out {:out :any}}, :h 110, :x 2475, :data {:flow-item {:category \":rabbit-base\", :name \":shell-command\", :type :shell-command, :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :expandable? true, :required [:command]}, :drag-meta {:type :shell-command}}}, :quality-param {:y 1000, :description [\"The quality of the image that will be generated. hd creates images with finer details and greater consistency across the image. This param is only supported for dall-e-3.\"], :w 125, :right-click? true, :z 0, :ports {:in {}, :out {:out :string}}, :h 85, :x 2075, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :meta {:* {:scrubber {:message \"OpenAI image gen quality selector - DALLE3\", :values [\"hd\" \"standard\"]}}}}, :user-input \"hd\"}}, :open-fn-1 {:y 2100, :fn (fn [x] x), :w 125, :raw-fn (fn [_] (str \"/tmp/rand-exif-\" (rand-int 123454) \".txt\")), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:_ :any}, :out {:out :string}}, :inputs nil, :h 110, :x 2575, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :execute-shell-command {:y 1950, :description [\"Run it. \" \"\" \"Notice we are flowing a port out of here into the final step, even though it does nothing. This makes sure that this step will finish BEFORE that one executes. A block cannot run until all it's inputs have produced a value. This non-data flow is more of a signal.\"], :w 225, :right-click? true, :icon \"zmdi-washing-machine\", :z 0, :ports {:in {:command :string}, :out {:output :list, :exception :list, :seconds :list, :command :string, :* :map}}, :h 60, :x 1925, :data {:flow-item {:category \":rabbit-base\", :name \":shell-command\", :type :shell-command, :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :inputs [:command], :expandable? true, :required [:command]}, :drag-meta {:type :shell-command}}}, :open-fn-2 {:y 950, :fn (fn [x] x), :w 175, :raw-fn (fn [x] \"cd .. ; pwd\"), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 75, :x 2325, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :pop-color {:y 2075, :fn (fn [x] (get-in x [:colorPalette 0])), :w 150, :raw-fn (fn [x] (get-in x [:colorPalette 0])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :string}}, :h 85, :x 2025, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:colorPalette 0])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:colorPalette 0])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :prompt-2 {:w 125, :h 60, :z 0, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"\"}, :right-click? true, :ports {:in {}, :out {:out :string}}, :x 1925, :y 575}, :color-palette {:y 2025, :fn (fn [x] x), :w 100, :raw-fn (fn [x] x), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}, :h 185, :x 1875, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :stringify-exif-map {:y 2100, :fn (fn [x] x), :w 200, :raw-fn (fn [x bang img-path] (pr-str x)), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any, :bang :any, :img-path :any}, :out {:out :string}}, :inputs nil, :h 110, :x 2350, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :size-param {:y 950, :description [\"The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024 for dall-e-2. Must be one of 1024x1024, 1792x1024, or 1024x1792 for dall-e-3 models.\"], :w 175, :right-click? true, :z 0, :ports {:in {}, :out {:out :string}}, :h 110, :x 1650, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :meta {:* {:scrubber {:message \"OpenAI image gen size selector - DALLE3\", :values [\"1024x1024\" \"1792x1024\" \"1024x1792\"]}}}}, :user-input \"1792x1024\"}}, :prompt-jukebox {:y 900, :fn (fn [x] x), :w 150, :raw-fn (fn [& x] (rand-nth (remove (fn [xx] (empty? (clojure.string/trim xx))) x))), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x+ :any}, :out {:out :string}}, :inputs nil, :h 85, :x 1850, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :write-file-1 {:y 2275, :w 125, :right-click? true, :icon \"zmdi-file-text\", :z 0, :ports {:in {:full-path :string, :file-data :string}, :out {:out :string}}, :h 85, :x 2475, :data {:flow-item {:category \":rabbit-base\", :name \":write-file\", :type :write-file, :icon \"zmdi-file-text\", :defaults nil, :types {:full-path :string, :file-data :string, :out :string}, :style nil, :selected-style nil, :inputs [:full-path :file-data], :expandable? true, :required nil}, :drag-meta {:type :write-file}}}, :save-base64-to-webp-file {:y 1675, :description [\"Decoding and saving as a binary file to the local file system. Here to a sub-dir of my Ubuntu home directory.\"], :w 250, :right-click? true, :icon \"zmdi-broken-image\", :z 0, :ports {:in {:b64-data :any, :file-path :string}, :out {:out :string}}, :h 60, :x 2000, :data {:flow-item {:category \":rabbit-base\", :name \":save-base64-to-webp\", :type :save-base64-to-webp, :icon \"zmdi-broken-image\", :defaults nil, :types {:b64-data :string, :file-path :string, :out :any}, :style nil, :selected-style nil, :inputs [:b64-data :file-path], :expandable? true, :required [:b64-data :file-path]}, :drag-meta {:type :save-base64-to-webp}}}, :prompt-4 {:w 125, :h 60, :z 0, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"\"}, :right-click? true, :ports {:in {}, :out {:out :string}}, :x 2125, :y 575}, :request-body-map {:w 175, :h 60, :z 0, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input {:prompt :prompty*, :n 1, :size :size*, :style :style*, :response_format \"b64_json\", :model \"dall-e-3\", :quality :quality*}}, :right-click? true, :ports {:in {:prompty* :any, :size* :any, :style* :any, :quality* :any}, :out {:prompt :string, :n :integer, :size :string, :style :string, :response_format :string, :model :string, :quality :string, :* :map}}, :x 1850, :y 1125}, :base-web-directory {:y 1675, :w 150, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :string}}}, :inputs nil, :h 60, :x 1775, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"..\"}}, :prompt {:y 575, :w 300, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :string}}}, :inputs nil, :h 160, :x 1600, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"A highly-detailed, hyperrealistic 16:9 digitally-rendered illustration of a pre-dawn winter scene in a traditional New England setting, filled with a mix of rustic charm and cyberpunk aesthetics. The town is bathed in a fresh blanket of snow under a heavy snowstorm, capturing a slightly gritty ambience, with buildings glowing softly in hues of pink and neon light blue. On the left of the frame stands a vibrant Irish woman in her early 30s. Her long hair, slightly damp from the intense snow, runs down her neck and shoulders. Intricate, Celtic-inspired tattoos depicting rabbits and wilderness adorn her neck, collarbone, and shoulders. As the sun cautiously peeps over the horizon, its light reflects off the scene, enhancing the mood set by the serene yet enigmatic pre-dawn lighting. On the outskirts, many rabbits eye the scene.\"}}, :create-png-path {:y 1775, :description [\"Making a new path for the PNG version we will generate in order to render image in a <img> tag without the base64 string or webp image.\"], :fn (fn [x] x), :w 125, :raw-fn (fn [x base-dir base-web-dir] (clojure.string/replace (clojure.string/replace x \".webp\" \".png\") base-dir base-web-dir)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any, :base-dir :any, :base-web-dir :any}, :out {:out :string}}, :h 60, :x 1900, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :create-convert-command-line {:y 1850, :description [\"Our 'convert' finished command line. Note, 'convert' is already in my PATH.\"], :fn (fn [x] x), :w 350, :raw-fn (fn [x y] (str \"cp \" y \" \" x)), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any, :y :any}, :out {:out :string}}, :inputs nil, :h 85, :x 1925, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :hiccup-image-box-w-png {:y 2250, :description [\"Take all the strings from earlier and compose a singular view element with them.\"], :fn (fn [x] [:box :child (str x)]), :w 600, :raw-fn (fn [x bg-color color _] (let [x (clojure.string/replace (str x) \"..\" \"assets/openai-images\")] [:v-box :padding \"10px\" :gap \"8px\" :width :width-px :style {:background-color (str bg-color), :border-radius \"20px\", :font-size \"12px\", :font-weight 700, :color (str color)} :children [[:box :child (str x)] [:box :size \"auto\" :child [:img {:src (str x), :style {:border-radius \"30px\"}}]]]])), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any, :bg-color :any, :color :any, :_ :any}, :out {:idx7 :keyword, :idx5 :keyword, :* :vector, :idx2 :string, :idx4 :string, :idx1 :keyword, :idx6 :keyword, :idx3 :keyword, :idx10 :vector, :idx8 :map, :idx9 :keyword, :idx0 :keyword}}, :inputs nil, :h 385, :x 1800, :view (fn [x] x), :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] [:box :child (str x)]), :name \":open-fn\", :raw-fn (fn [x] [:box :child (str x)]), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :generate-file-path {:y 1325, :fn (fn [x] x), :w 425, :raw-fn (fn [base-dir] (str base-dir \"/b64-image3-\" (rand-int 99999) \"-\" (rand-int 99999) \".png\")), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:base-dir :any}, :out {:out :string}}, :inputs nil, :h 85, :x 2125, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :open-fn-4 {:y 1125, :fn (fn [x] x), :w 150, :raw-fn (fn [x] (str \"Bearer \" :settings/openai-api-key)), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 60, :x 1675, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :relative-url-path-for-png-version {:y 2825, :fn (fn [x] (get-in x [10 0 2])), :w 275, :raw-fn (fn [x bang] (get-in x [10 0 2])), :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any, :bang :any}, :out {:out :string}}, :inputs nil, :h 85, :x 2150, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [10 0 2])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [10 0 2])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :exif-map {:y 1800, :fn (fn [x] x), :w 200, :raw-fn (fn [prompt revised] {:prompt-asked prompt, :revised-prompt revised}), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:prompt :any, :revised :any}, :out {:out :any}}, :inputs nil, :h 110, :x 2350, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :prompt-3 {:w 125, :h 60, :z 0, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"\"}, :right-click? true, :ports {:in {}, :out {:out :string}}, :x 1950, :y 650}, :http-req-map {:y 1225, :description [\"Request map for the HTTP call. Headers, Method, URL, and the call body map.\"], :w 175, :right-click? true, :types nil, :z 0, :ports {:in {:apikey* :any, :req-body* :any}, :out {:out {:headers :map, :method :keyword, :url :string, :body :keyword, :* :map}}}, :inputs nil, :h 60, :x 1850, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :meta {}}, :user-input {:headers {\"Authorization\" :apikey*, \"Content-Type\" \"application/json\"}, :method :post, :url \"https://api.openai.com/v1/images/generations\", :body :req-body*}}}, :abs-file-base-path {:y 1175, :fn (fn [x] (get-in x [:output 0])), :w 250, :raw-fn (fn [x] (str (get-in x [:output 0]) \"/assets/openai-images\")), :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 100, :x 2300, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:output 0])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:output 0])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :write-exif-to-image-command {:y 2475, :fn (fn [x] x), :w 625, :raw-fn (fn [x img-path] (str \"exiftool -overwrite_original -Comment=\\\"$(cat \" x \")\\\" \" img-path)), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any, :img-path :any}, :out {:out :string}}, :inputs nil, :h 85, :x 2475, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :just-the-image {:y 1450, :description [\"Using a GET-IN to extract just the base64 image string from the JSON return map.\"], :fn (fn [x] (get-in x [:data 0 :b64_json])), :w 275, :raw-fn (fn [x] (get-in x [:data 0 :b64_json])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :string}}, :h 200, :x 1775, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:data 0 :b64_json])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:data 0 :b64_json])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :write-file-1_file-path {:y 2375, :fn (fn [x] (get-in x [:file-path])), :w 125, :raw-fn (fn [x] (get-in x [:file-path])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 85, :x 2475, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:file-path])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:file-path])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :output-revised-prompt {:y 1475, :description [\"OpenAI runs our prompt through an additional model to generate a more flowery and fleshed out description to try and generate a more interesting image. \" \"\" \"(also it censors and removes things it does not like, feels like an early gatekeep step since raw images are much harder to automatically moderate)...\"], :fn (fn [x] (get-in x [:data 0 :revised_prompt])), :w 350, :raw-fn (fn [x] (get-in x [:data 0 :revised_prompt])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :string}}, :h 160, :x 2250, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:data 0 :revised_prompt])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:data 0 :revised_prompt])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :style-param {:y 1000, :description [\"The style of the generated images. Must be one of vivid or natural. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for dall-e-3.\"], :w 125, :right-click? true, :z 0, :ports {:in {}, :out {:out :string}}, :h 85, :x 1925, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :meta {:* {:scrubber {:message \"OpenAI image gen style selector - DALLE3\", :values [\"vivid\" \"natural\"]}}}}, :user-input \"vivid\"}}}, :zoom [-1087.26 -804.94 1.25], :opts {:close-on-done? true, :retry-on-error? true, :timeout 120000, :retries 404, :overrides {:style-param \"vivid\"}}, :flow-id \"openai-image-gen-ladder\", :flowmaps-connections [[:http-req-map/* :oai-api-call/req-map] [:oai-api-call/* :just-the-image/x] [:generate-file-path :save-base64-to-webp-file/file-path] [:just-the-image :save-base64-to-webp-file/b64-data] [:oai-api-call/* :output-revised-prompt/x] [:save-base64-to-webp-file :create-png-path/x] [:generate-file-path :create-convert-command-line/y] [:create-png-path :create-convert-command-line/x] [:create-convert-command-line :execute-shell-command/command] [:create-png-path :hiccup-image-box-w-png/x] [:save-base64-to-webp-file :node-js-color-thief-script/image-path] [:node-js-color-thief-script/dominantColor :dominant-color/x] [:node-js-color-thief-script/* :color-palette/x] [:dominant-color :hiccup-image-box-w-png/bg-color] [:color-palette :pop-color/x] [:pop-color :hiccup-image-box-w-png/color] [:execute-shell-command/command :hiccup-image-box-w-png/_] [:hiccup-image-box-w-png/* :relative-url-path-for-png-version/x] [:relative-url-path-for-png-version :done] [:base-web-directory :create-png-path/base-web-dir] [:request-body-map/* :http-req-map/req-body*] [:size-param :request-body-map/size*] [:style-param :request-body-map/style*] [:quality-param :request-body-map/quality*] [:prompt-jukebox :request-body-map/prompty*] [:output-revised-prompt :exif-map/revised] [:prompt-jukebox :exif-map/prompt] [:exif-map :stringify-exif-map/x] [:execute-shell-command/command :stringify-exif-map/bang] [:save-base64-to-webp-file :stringify-exif-map/img-path] [:prompt :prompt-jukebox/x+] [:prompt-3 :prompt-jukebox/x+] [:prompt-2 :prompt-jukebox/x+] [:prompt-5 :prompt-jukebox/x+] [:prompt-4 :prompt-jukebox/x+] [:stringify-exif-map :write-file-1/file-data] [:open-fn-1 :write-file-1/full-path] [:execute-shell-command/command :open-fn-1/_] [:write-file-1 :write-file-1_file-path/x] [:save-base64-to-webp-file :write-exif-to-image-command/img-path] [:write-file-1_file-path :write-exif-to-image-command/x] [:write-exif-to-image-command :shell-command-1/command] [:shell-command-1 :relative-url-path-for-png-version/bang] [:quality-param :open-fn-2/x] [:open-fn-2 :shell-command-2/command] [:shell-command-2 :abs-file-base-path/x] [:abs-file-base-path :generate-file-path/base-dir] [:abs-file-base-path :create-png-path/base-dir] [:size-param :open-fn-4/x] [:open-fn-4 :http-req-map/apikey*]]}"
      1,
      "{:flowmaps {:path-correction {:y 750, :fn (fn [x] x), :w 175, :raw-fn (fn [x] (str \"../\" x)), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 100, :x 1550, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :shell-command-1 {:w 200, :h 100, :x 1350, :y 1550, :z 0, :data {:flow-item {:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :category \":rabbit-base\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :name \":shell-command\", :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :input_types \"[:string]\", :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs \"[:command]\", :output_types \":any\", :full_map \"{:description \\\"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\\\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \\\"zmdi-washing-machine\\\", :defaults {:command \\\"ls -la\\\"}, :types {:command :string, :out :any}, :style {:color \\\"#ffdd3c\\\"}, :selected-style {:color \\\"#ffdd3c\\\"}, :inputs [:command], :required [:command]}\", :required [:command]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [539.1770935058594 176.171875], :h 6, :connection-id nil, :queries {:name-drag-42 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :cc59]], :where [:= :name \":shell-command\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":shell-command\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"zmdi-washing-machine\", :ports {:in {:command :string}, :out {:output :vector, :exception :vector, :seconds :vector, :command :string, :* :map}}}, :json-to-edn_colorPalette {:y 1975, :fn (fn [x] (get-in x [:colorPalette])), :w 150, :raw-fn (fn [x] (get-in x [:colorPalette])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 85, :x 1425, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:colorPalette])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:colorPalette])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :convert-to-png {:y 1025, :fn (fn [x] x), :w 200, :raw-fn (fn [x y] (str \"convert \" x \" -resize 400x -filter Lanczos -colors 32 -dither FloydSteinberg \" y)), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any, :y :any}, :out {:out :any}}, :inputs nil, :h 85, :x 1500, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :run-the-convert-command {:y 1150, :w 200, :right-click? true, :icon \"zmdi-washing-machine\", :z 0, :ports {:in {:command :string}, :out {:out :any}}, :h 100, :x 1500, :data {:flow-item {:category \":rabbit-base\", :name \":shell-command\", :type :shell-command, :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :expandable? true, :required [:command]}, :drag-meta {:type :shell-command}}}, :json-to-edn {:w 200, :h 100, :x 1375, :y 1825, :z 0, :data {:flow-item {:description \"Convert a JSON string to Clojure EDN\", :category \":rabbit-base\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :name \":json-to-edn\", :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}, :input_types \"[:string]\", :inputs \"[:json-string]\", :output_types \":any\", :full_map \"{:description \\\"Convert a JSON string to Clojure EDN\\\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \\\"zmdi-file-text\\\", :types {:json-string :string, :out :any}}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [1297.1770935058594 207.171875], :h 6, :connection-id nil, :queries {:name-drag-41 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :uu284]], :where [:= :name \":json-to-edn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":json-to-edn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 7}}, :icon \"zmdi-file-text\", :ports {:in {:json-string :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}}, :json-to-edn_dominantColor {:y 1976.0213702074168, :fn (fn [x] (get-in x [:dominantColor])), :w 125, :raw-fn (fn [x] (get-in x [:dominantColor])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 85, :x 1595.2828409805154, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:dominantColor])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:dominantColor])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :clojure-string-join-1 {:w 200, :h 100, :x 1350, :y 1425, :z 0, :data {:flow-item {:description \"Clojure.string's join function.\", :category \":clojure-base\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :name \":clojure-string-join\", :icon \"zmdi-group\", :defaults {:delimiter \" \"}, :types {:delimiter :string, :out :string}, :input_types \"[:string]\", :inputs \"[:delimiter]\", :output_types \":string\", :expandable? true, :full_map \"{:description \\\"Clojure.string's join function.\\\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \\\" \\\"}, :expandable? true, :icon \\\"zmdi-group\\\", :types {:delimiter :string, :out :string}}\", :required [:delimiter]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [540.1770935058594 279.171875], :h 6, :connection-id nil, :queries {:name-drag-12 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ww526]], :where [:= :name \":clojure-string-join\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":clojure-string-join\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 15}}, :icon \"zmdi-group\", :ports {:in {:delimiter :string, :value-1 :any, :value-2 :any}, :out {:out :string}}}, :image-path {:y 550, :w 475, :types nil, :z 0, :ports {:out {:out {:out :string}}, :in {}}, :inputs nil, :h 125, :x 1475, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"extras/node-colorthief/logo.png\"}}, :get-color-edges {:y 2100, :fn (fn [x] x), :w 200, :raw-fn (fn [colors dom] (let [colors (vec (distinct (conj colors dom)))] (defn hex-to-rgb [hex] (map (fn [x] (Integer/parseInt x 16)) (re-seq (re-pattern \"[0-9a-fA-F]{2}\") (subs hex 1)))) (defn brightness [rgb] (let [[r g b] rgb] (Math/sqrt (+ (* 0.299 (* r r)) (* 0.587 (* g g)) (* 0.114 (* b b)))))) (defn rgb-to-lab [rgb] (let [[r g b] (map (fn [x] (/ x 255)) rgb) [r g b] (map (fn [v] (if (> v 0.04045) (Math/pow (/ (+ v 0.055) 1.055) 2.4) (/ v 12.92))) [r g b]) x (* (+ (* r 0.4124564) (* g 0.3575761) (* b 0.1804375)) 100) y (* (+ (* r 0.2126729) (* g 0.7151522) (* b 0.072175)) 100) z (* (+ (* r 0.0193339) (* g 0.119192) (* b 0.9503041)) 100) [x y z] (map (fn [v ref] (/ v ref)) [x y z] [95.047 100 108.883]) [x y z] (map (fn [v] (if (> v 0.008856) (Math/pow v 0.3333333333333333) (+ (* 7.787 v) (/ 16 116)))) [x y z])] [(+ (* 116 y) -16) (* 500 (- x y)) (* 200 (- y z))])) (defn rgb-to-hsl [rgb] (let [[r g b] (map (fn [x] (/ x 255)) rgb) max (apply max [r g b]) min (apply min [r g b]) l (/ (+ max min) 2) d (- max min) s (if (= d 0) 0 (/ d (if (< l 0.5) (+ max min) (- 2 max min)))) h (cond (= max r) (/ (+ (- g b) (* d (if (< g b) 6 0))) 6) (= max g) (/ (+ (- b r) (* d 2)) 6) :else (/ (+ (- r g) (* d 4)) 6))] [(* h 360) s l])) (defn hsl-to-hex [[h s l]] (let [c (* s (- 1 (abs (- (* 2 l) 1)))) x (* c (- 1 (abs (- (mod (/ h 60) 2) 1)))) m (- l (/ c 2)) [r g b] (cond (< h 60) [(+ c m) (+ x m) m] (< h 120) [(+ x m) (+ c m) m] (< h 180) [m (+ c m) (+ x m)] (< h 240) [m (+ x m) (+ c m)] (< h 300) [(+ x m) m (+ c m)] :else [(+ c m) m (+ x m)]) r (int (* r 255)) g (int (* g 255)) b (int (* b 255))] (format \"#%02x%02x%02x\" r g b))) (defn color-distance [lab1 lab2] (Math/sqrt (reduce + (map (fn [a b] (Math/pow (- a b) 2)) lab1 lab2)))) (defn average-contrast [lab colors] (/ (reduce + (map (fn [other-lab] (color-distance lab other-lab)) colors)) (count colors))) (defn most-frequent-color [colors] (first (apply max-key val (frequencies colors)))) (defn generate-data-colors [base-colors num-colors brightest second-brightest] (let [adjust-hue (fn [hue offset] (mod (+ hue offset) 360)) adjust-saturation (fn [saturation factor] (min 1 (* saturation factor))) adjust-lightness (fn [lightness factor] (min 1 (* lightness factor))) base-hues (map first base-colors) hue-offsets (take num-colors (cycle [30 60 90 120 150 180 210 240 270 300 330])) new-hues (map adjust-hue base-hues hue-offsets) new-saturations (map (partial adjust-saturation 1.2) (map second base-colors)) new-lightnesses (map (partial adjust-lightness 1.3) (map (fn [x] (nth x 2)) base-colors)) additional-colors (map rgb-to-hsl [(hex-to-rgb brightest) (hex-to-rgb second-brightest)]) all-colors (concat (map vector new-hues new-saturations new-lightnesses) additional-colors) sorted-colors (sort-by (fn [x] (nth x 2)) > all-colors)] (map hsl-to-hex sorted-colors))) (defn notable-colors [colors dom] (when (not (empty? colors)) (let [rgb-colors (map hex-to-rgb colors) lab-colors (map rgb-to-lab rgb-colors) hsl-colors (map rgb-to-hsl rgb-colors) brightnesses (map brightness rgb-colors) indexed-brightnesses (map-indexed vector brightnesses) sorted-by-brightness (sort-by second indexed-brightnesses) [darkest-idx second-darkest-idx] (map first (take 2 sorted-by-brightness)) [second-brightest-idx brightest-idx] (map first (take-last 2 sorted-by-brightness)) contrasts (map (fn [lab] (average-contrast lab (remove (fn [x] (= lab x)) lab-colors))) lab-colors) most-contrasting-index (apply max-key (fn [i] (nth contrasts i)) (range (count colors))) dark-colors-indices (filter (fn [i] (< (nth brightnesses i) 128)) (range (count colors))) light-colors-indices (filter (fn [i] (>= (nth brightnesses i) 128)) (range (count colors))) most-contrasting-dark-index (apply max-key (fn [i] (nth contrasts i)) dark-colors-indices) most-contrasting-light-index (apply max-key (fn [i] (nth contrasts i)) light-colors-indices) saturations (map second hsl-colors) highest-saturation-index (apply max-key (fn [i] (nth saturations i)) (range (count colors))) most-frequent (most-frequent-color colors) dom-rgb (hex-to-rgb dom) dom-lab (rgb-to-lab dom-rgb) data-color-keys [\"string\" \"keyword\" \"float\" \"integer\" \"boolean\" \"map\" \"vector\" \"rabbit-code\" \"any\" \"list\" \"datetime\" \"unknown\" \"date\" \"nil\"] data-colors (zipmap data-color-keys (generate-data-colors hsl-colors (count data-color-keys) (nth colors brightest-idx) (nth colors second-brightest-idx)))] {:second-darkest (nth colors second-darkest-idx), :highest-saturation (nth colors highest-saturation-index), :most-contrasting (nth colors most-contrasting-index), :darkest (nth colors darkest-idx), :contrast-with-dominant (nth colors (apply max-key (fn [i] (color-distance (nth lab-colors i) dom-lab)) (range (count colors)))), :colors colors, :most-frequent most-frequent, :data-colors data-colors, :dominant dom, :most-contrasting-dark (nth colors most-contrasting-dark-index), :second-brightest (nth colors second-brightest-idx), :brightest (nth colors brightest-idx), :most-contrasting-light (nth colors most-contrasting-light-index)}))) (notable-colors colors dom))), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:colors :any, :dom :any}, :out {:out :any}}, :inputs nil, :h 135, :x 1450, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:colors :dom], :expandable? true, :drag-meta {:type :open-fn}}}}, :join-output-as-string {:y 1700, :fn (fn [x] x), :w 200, :raw-fn (fn [x] (clojure.string/join \" \" x)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :any}}, :h 100, :x 1375, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :shell-command-in {:y 750, :w 225, :types nil, :z 0, :ports {:out {:out {:out :string}}, :in {}}, :inputs nil, :h 125, :x 1175, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"cd ../extras/node-colorthief ; node ./colorThief2.js\"}}, :waiter-fn {:y 1300, :fn (fn [x] x), :w 125, :raw-fn (fn [cmd img] img), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:cmd :any, :img :any}, :out {:out :any}}, :inputs nil, :h 85, :x 1525, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:cmd :img], :expandable? true, :drag-meta {:type :open-fn}}}}, :temp-name {:y 900, :fn (fn [x] x), :w 150, :raw-fn (fn [x] (str \"/tmp/img\" (hash x) \"-\" (rand-int 9999) \".png\")), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 100, :x 1650, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}}, :zoom [149.21 -219.97 0.565], :opts {:close-on-done? true, :retry-on-error? false, :timeout 800000, :retries 0}, :flow-id \"node-color-thief-js-webp\", :flowmaps-connections [[:shell-command-in :clojure-string-join-1/value-1] [:clojure-string-join-1 :shell-command-1/command] [:shell-command-1/output :join-output-as-string/value] [:join-output-as-string :json-to-edn/json-string] [:temp-name :convert-to-png/y] [:convert-to-png :run-the-convert-command/command] [:run-the-convert-command :waiter-fn/cmd] [:temp-name :waiter-fn/img] [:waiter-fn :clojure-string-join-1/value-2] [:json-to-edn :json-to-edn_colorPalette/x] [:get-color-edges :done] [:json-to-edn :json-to-edn_dominantColor/x] [:json-to-edn_colorPalette :get-color-edges/colors] [:json-to-edn_dominantColor :get-color-edges/dom] [:image-path :path-correction/x] [:path-correction :temp-name/x] [:path-correction :convert-to-png/x]]}"
      1},
     :distinct 5,
     :group-by? true,
     :median
     "{:flowmaps {:path-correction {:y 750, :fn (fn [x] x), :w 175, :raw-fn (fn [x] (str \"../\" x)), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 100, :x 1550, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :shell-command-1 {:w 200, :h 100, :x 1350, :y 1550, :z 0, :data {:flow-item {:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :category \":rabbit-base\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :name \":shell-command\", :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :input_types \"[:string]\", :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs \"[:command]\", :output_types \":any\", :full_map \"{:description \\\"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\\\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \\\"zmdi-washing-machine\\\", :defaults {:command \\\"ls -la\\\"}, :types {:command :string, :out :any}, :style {:color \\\"#ffdd3c\\\"}, :selected-style {:color \\\"#ffdd3c\\\"}, :inputs [:command], :required [:command]}\", :required [:command]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [539.1770935058594 176.171875], :h 6, :connection-id nil, :queries {:name-drag-42 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :cc59]], :where [:= :name \":shell-command\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":shell-command\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"zmdi-washing-machine\", :ports {:in {:command :string}, :out {:output :vector, :exception :vector, :seconds :vector, :command :string, :* :map}}}, :json-to-edn_colorPalette {:y 1975, :fn (fn [x] (get-in x [:colorPalette])), :w 150, :raw-fn (fn [x] (get-in x [:colorPalette])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 85, :x 1425, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:colorPalette])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:colorPalette])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :convert-to-png {:y 1025, :fn (fn [x] x), :w 200, :raw-fn (fn [x y] (str \"convert \" x \" -resize 400x -filter Lanczos -colors 32 -dither FloydSteinberg \" y)), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any, :y :any}, :out {:out :any}}, :inputs nil, :h 85, :x 1500, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :run-the-convert-command {:y 1150, :w 200, :right-click? true, :icon \"zmdi-washing-machine\", :z 0, :ports {:in {:command :string}, :out {:out :any}}, :h 100, :x 1500, :data {:flow-item {:category \":rabbit-base\", :name \":shell-command\", :type :shell-command, :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :expandable? true, :required [:command]}, :drag-meta {:type :shell-command}}}, :json-to-edn {:w 200, :h 100, :x 1375, :y 1825, :z 0, :data {:flow-item {:description \"Convert a JSON string to Clojure EDN\", :category \":rabbit-base\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :name \":json-to-edn\", :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}, :input_types \"[:string]\", :inputs \"[:json-string]\", :output_types \":any\", :full_map \"{:description \\\"Convert a JSON string to Clojure EDN\\\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \\\"zmdi-file-text\\\", :types {:json-string :string, :out :any}}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [1297.1770935058594 207.171875], :h 6, :connection-id nil, :queries {:name-drag-41 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :uu284]], :where [:= :name \":json-to-edn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":json-to-edn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 7}}, :icon \"zmdi-file-text\", :ports {:in {:json-string :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}}, :json-to-edn_dominantColor {:y 1976.0213702074168, :fn (fn [x] (get-in x [:dominantColor])), :w 125, :raw-fn (fn [x] (get-in x [:dominantColor])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 85, :x 1595.2828409805154, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:dominantColor])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:dominantColor])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :clojure-string-join-1 {:w 200, :h 100, :x 1350, :y 1425, :z 0, :data {:flow-item {:description \"Clojure.string's join function.\", :category \":clojure-base\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :name \":clojure-string-join\", :icon \"zmdi-group\", :defaults {:delimiter \" \"}, :types {:delimiter :string, :out :string}, :input_types \"[:string]\", :inputs \"[:delimiter]\", :output_types \":string\", :expandable? true, :full_map \"{:description \\\"Clojure.string's join function.\\\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \\\" \\\"}, :expandable? true, :icon \\\"zmdi-group\\\", :types {:delimiter :string, :out :string}}\", :required [:delimiter]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [540.1770935058594 279.171875], :h 6, :connection-id nil, :queries {:name-drag-12 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ww526]], :where [:= :name \":clojure-string-join\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":clojure-string-join\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 15}}, :icon \"zmdi-group\", :ports {:in {:delimiter :string, :value-1 :any, :value-2 :any}, :out {:out :string}}}, :image-path {:y 550, :w 475, :types nil, :z 0, :ports {:out {:out {:out :string}}, :in {}}, :inputs nil, :h 125, :x 1475, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"extras/node-colorthief/logo.png\"}}, :get-color-edges {:y 2100, :fn (fn [x] x), :w 200, :raw-fn (fn [colors dom] (let [colors (vec (distinct (conj colors dom)))] (defn hex-to-rgb [hex] (map (fn [x] (Integer/parseInt x 16)) (re-seq (re-pattern \"[0-9a-fA-F]{2}\") (subs hex 1)))) (defn brightness [rgb] (let [[r g b] rgb] (Math/sqrt (+ (* 0.299 (* r r)) (* 0.587 (* g g)) (* 0.114 (* b b)))))) (defn rgb-to-lab [rgb] (let [[r g b] (map (fn [x] (/ x 255)) rgb) [r g b] (map (fn [v] (if (> v 0.04045) (Math/pow (/ (+ v 0.055) 1.055) 2.4) (/ v 12.92))) [r g b]) x (* (+ (* r 0.4124564) (* g 0.3575761) (* b 0.1804375)) 100) y (* (+ (* r 0.2126729) (* g 0.7151522) (* b 0.072175)) 100) z (* (+ (* r 0.0193339) (* g 0.119192) (* b 0.9503041)) 100) [x y z] (map (fn [v ref] (/ v ref)) [x y z] [95.047 100 108.883]) [x y z] (map (fn [v] (if (> v 0.008856) (Math/pow v 0.3333333333333333) (+ (* 7.787 v) (/ 16 116)))) [x y z])] [(+ (* 116 y) -16) (* 500 (- x y)) (* 200 (- y z))])) (defn rgb-to-hsl [rgb] (let [[r g b] (map (fn [x] (/ x 255)) rgb) max (apply max [r g b]) min (apply min [r g b]) l (/ (+ max min) 2) d (- max min) s (if (= d 0) 0 (/ d (if (< l 0.5) (+ max min) (- 2 max min)))) h (cond (= max r) (/ (+ (- g b) (* d (if (< g b) 6 0))) 6) (= max g) (/ (+ (- b r) (* d 2)) 6) :else (/ (+ (- r g) (* d 4)) 6))] [(* h 360) s l])) (defn hsl-to-hex [[h s l]] (let [c (* s (- 1 (abs (- (* 2 l) 1)))) x (* c (- 1 (abs (- (mod (/ h 60) 2) 1)))) m (- l (/ c 2)) [r g b] (cond (< h 60) [(+ c m) (+ x m) m] (< h 120) [(+ x m) (+ c m) m] (< h 180) [m (+ c m) (+ x m)] (< h 240) [m (+ x m) (+ c m)] (< h 300) [(+ x m) m (+ c m)] :else [(+ c m) m (+ x m)]) r (int (* r 255)) g (int (* g 255)) b (int (* b 255))] (format \"#%02x%02x%02x\" r g b))) (defn color-distance [lab1 lab2] (Math/sqrt (reduce + (map (fn [a b] (Math/pow (- a b) 2)) lab1 lab2)))) (defn average-contrast [lab colors] (/ (reduce + (map (fn [other-lab] (color-distance lab other-lab)) colors)) (count colors))) (defn most-frequent-color [colors] (first (apply max-key val (frequencies colors)))) (defn generate-data-colors [base-colors num-colors brightest second-brightest] (let [adjust-hue (fn [hue offset] (mod (+ hue offset) 360)) adjust-saturation (fn [saturation factor] (min 1 (* saturation factor))) adjust-lightness (fn [lightness factor] (min 1 (* lightness factor))) base-hues (map first base-colors) hue-offsets (take num-colors (cycle [30 60 90 120 150 180 210 240 270 300 330])) new-hues (map adjust-hue base-hues hue-offsets) new-saturations (map (partial adjust-saturation 1.2) (map second base-colors)) new-lightnesses (map (partial adjust-lightness 1.3) (map (fn [x] (nth x 2)) base-colors)) additional-colors (map rgb-to-hsl [(hex-to-rgb brightest) (hex-to-rgb second-brightest)]) all-colors (concat (map vector new-hues new-saturations new-lightnesses) additional-colors) sorted-colors (sort-by (fn [x] (nth x 2)) > all-colors)] (map hsl-to-hex sorted-colors))) (defn notable-colors [colors dom] (when (not (empty? colors)) (let [rgb-colors (map hex-to-rgb colors) lab-colors (map rgb-to-lab rgb-colors) hsl-colors (map rgb-to-hsl rgb-colors) brightnesses (map brightness rgb-colors) indexed-brightnesses (map-indexed vector brightnesses) sorted-by-brightness (sort-by second indexed-brightnesses) [darkest-idx second-darkest-idx] (map first (take 2 sorted-by-brightness)) [second-brightest-idx brightest-idx] (map first (take-last 2 sorted-by-brightness)) contrasts (map (fn [lab] (average-contrast lab (remove (fn [x] (= lab x)) lab-colors))) lab-colors) most-contrasting-index (apply max-key (fn [i] (nth contrasts i)) (range (count colors))) dark-colors-indices (filter (fn [i] (< (nth brightnesses i) 128)) (range (count colors))) light-colors-indices (filter (fn [i] (>= (nth brightnesses i) 128)) (range (count colors))) most-contrasting-dark-index (apply max-key (fn [i] (nth contrasts i)) dark-colors-indices) most-contrasting-light-index (apply max-key (fn [i] (nth contrasts i)) light-colors-indices) saturations (map second hsl-colors) highest-saturation-index (apply max-key (fn [i] (nth saturations i)) (range (count colors))) most-frequent (most-frequent-color colors) dom-rgb (hex-to-rgb dom) dom-lab (rgb-to-lab dom-rgb) data-color-keys [\"string\" \"keyword\" \"float\" \"integer\" \"boolean\" \"map\" \"vector\" \"rabbit-code\" \"any\" \"list\" \"datetime\" \"unknown\" \"date\" \"nil\"] data-colors (zipmap data-color-keys (generate-data-colors hsl-colors (count data-color-keys) (nth colors brightest-idx) (nth colors second-brightest-idx)))] {:second-darkest (nth colors second-darkest-idx), :highest-saturation (nth colors highest-saturation-index), :most-contrasting (nth colors most-contrasting-index), :darkest (nth colors darkest-idx), :contrast-with-dominant (nth colors (apply max-key (fn [i] (color-distance (nth lab-colors i) dom-lab)) (range (count colors)))), :colors colors, :most-frequent most-frequent, :data-colors data-colors, :dominant dom, :most-contrasting-dark (nth colors most-contrasting-dark-index), :second-brightest (nth colors second-brightest-idx), :brightest (nth colors brightest-idx), :most-contrasting-light (nth colors most-contrasting-light-index)}))) (notable-colors colors dom))), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:colors :any, :dom :any}, :out {:out :any}}, :inputs nil, :h 135, :x 1450, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:colors :dom], :expandable? true, :drag-meta {:type :open-fn}}}}, :join-output-as-string {:y 1700, :fn (fn [x] x), :w 200, :raw-fn (fn [x] (clojure.string/join \" \" x)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :any}}, :h 100, :x 1375, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :shell-command-in {:y 750, :w 225, :types nil, :z 0, :ports {:out {:out {:out :string}}, :in {}}, :inputs nil, :h 125, :x 1175, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"cd ../extras/node-colorthief ; node ./colorThief2.js\"}}, :waiter-fn {:y 1300, :fn (fn [x] x), :w 125, :raw-fn (fn [cmd img] img), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:cmd :any, :img :any}, :out {:out :any}}, :inputs nil, :h 85, :x 1525, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:cmd :img], :expandable? true, :drag-meta {:type :open-fn}}}}, :temp-name {:y 900, :fn (fn [x] x), :w 150, :raw-fn (fn [x] (str \"/tmp/img\" (hash x) \"-\" (rand-int 9999) \".png\")), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 100, :x 1650, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}}, :zoom [149.21 -219.97 0.565], :opts {:close-on-done? true, :retry-on-error? false, :timeout 800000, :retries 0}, :flow-id \"node-color-thief-js-webp\", :flowmaps-connections [[:shell-command-in :clojure-string-join-1/value-1] [:clojure-string-join-1 :shell-command-1/command] [:shell-command-1/output :join-output-as-string/value] [:join-output-as-string :json-to-edn/json-string] [:temp-name :convert-to-png/y] [:convert-to-png :run-the-convert-command/command] [:run-the-convert-command :waiter-fn/cmd] [:temp-name :waiter-fn/img] [:waiter-fn :clojure-string-join-1/value-2] [:json-to-edn :json-to-edn_colorPalette/x] [:get-color-edges :done] [:json-to-edn :json-to-edn_dominantColor/x] [:json-to-edn_colorPalette :get-color-edges/colors] [:json-to-edn_dominantColor :get-color-edges/dom] [:image-path :path-correction/x] [:path-correction :temp-name/x] [:path-correction :convert-to-png/x]]}",
     :max
     "{:flowmaps {:seed-value {:w 100, :h 85, :z 0, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input 1}, :right-click? true, :ports {:in {}, :out {:out :integer}}, :x 1975, :y 1100}, :sleep-then-pass {:y 1275, :fn (fn [x] x), :w 125, :raw-fn (fn [x] (Thread/sleep 200) x), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 85, :x 1925, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :open-fn-2 {:y 1325, :fn (fn [x] x), :w 100, :raw-fn (fn [x] (if (number? x) (inc x) :done)), :right-click? true, :icon \"zmdi-functions\", :types nil, :cond {:cond-path {:fn (fn [out] (< out :loops)), :dest []}, :cond-path-1 {:fn (fn [out] (= out :loops)), :dest []}, :cond-path-2 {:fn (fn [out] (odd? out)), :dest []}, :cond-path-3 {:fn (fn [out] (even? out)), :dest []}}, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 85, :x 2175, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :final-value {:y 1550, :fn (fn [x] x), :w 125, :raw-fn (fn [x] x), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 85, :x 1950, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :last-odd {:y 1550, :fn (fn [x] x), :w 125, :raw-fn (fn [x] x), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 85, :x 2125, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :last-even {:y 1550, :fn (fn [x] x), :w 125, :raw-fn (fn [x] x), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 85, :x 2275, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}}, :opts {:retry-on-error? false, :retries 0, :loops 33, :debug? false, :close-on-done? true, :timeout 8000}, :zoom [-2257.7 -1718.26 1.6], :flow-id \"counting-loop\", :flowmaps-connections [[:seed-value :sleep-then-pass/x] [:sleep-then-pass :open-fn-2/x] [:final-value :done] [:open-fn-2/cond-path :sleep-then-pass/x] [:open-fn-2/cond-path-1 :final-value/x] [:open-fn-2/cond-path-2 :last-odd/x] [:open-fn-2/cond-path-3 :last-even/x]]}",
     :avg
     "{:flowmaps {:movie-name {:y 700, :fn (fn [x] x), :w 125, :raw-fn (fn [value] (Thread/sleep 900) value), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :string}}, :h 100, :x 1150, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :unpack-results-map_poster {:y 828.8827626233314, :fn (fn [x] (get-in x [:poster])), :w 175, :raw-fn (fn [x] (get-in x [:poster])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 310, :x 914.9390597794543, :view (fn [x] [:img {:src x}]), :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:poster])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:poster])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :rando-string {:w 125, :h 75, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"feed me, seymour!\"}, :z 0, :ports {:in {}, :out {:out :string}}, :x 1350, :y 575}, :unpack-results-map_video=480p {:y 875, :fn (fn [x] (get-in x [:video :480p])), :w 375, :raw-fn (fn [x] (get-in x [:video :480p])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 275, :x 1350, :view (fn [x] [:iframe {:src x, :style {:border \"none\", :background-color \"#00000000\", :width :panel-width+80-px, :height :panel-height+80-px}}]), :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:video :480p])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:video :480p])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :full-wow-line {:y 700, :fn (fn [x] x), :w 125, :raw-fn (fn [value] value), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :string}}, :h 100, :x 1300, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :view-output? true, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :unpack-results-map {:y 550, :fn (fn [x] x), :w 200, :raw-fn (fn [value] (Thread/sleep 900) value), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:video :map, :total_wows_in_movie :integer, :* :map, :release_date :string, :director :string, :full_line :string, :movie :string, :year :integer, :poster :string, :audio :string, :current_wow_in_movie :integer, :timestamp :string, :movie_duration :string, :character :string}}, :h 100, :x 1050, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :view-output? true, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :open-input {:w 225, :h 85, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :inputs []}, :user-input {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\"}, :view-output? false, :width 350}, :z 0, :ports {:out {:url :string, :* :map}, :in {}}, :x 1000, :y 275}, :open-fn-5 {:y 700, :fn (fn [x] x), :w 125, :raw-fn (fn [value] (str value)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :string}}, :h 100, :x 1450, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :http-call-1 {:w 175, :h 100, :x 1050, :y 400, :z 0, :data {:flow-item {:description \"Basic HTTP call primitive\", :category \":rabbit-base\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :name \":http-call\", :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :input_types \"[:map]\", :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs \"[:req-map]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Basic HTTP call primitive\\\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \\\"zmdi-http\\\", :defaults {:req-map {:url \\\"https://owen-wilson-wow-api.onrender.com/wows/random\\\", :query-params {:movie \\\"Wedding Crashers\\\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \\\"#7BB696\\\"}, :selected-style {:color \\\"#7BB696\\\"}, :inputs [:req-map], :expandable? true, :required [:req-map]}\", :required [:req-map]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [395 185], :h 6, :connection-id nil, :view-output? true, :queries {:name-drag-26 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :nn42]], :where [:= :name \":http-call\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":http-call\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"zmdi-http\", :ports {:in {:req-map :map}, :out {:idx0 :map, :* :vector}}}, :character {:y 700, :fn (fn [x] x), :w 175, :raw-fn (fn [value] value), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :string}}, :h 100, :x 950, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}}, :zoom [-251.86 -320.96 1.225], :opts nil, :flow-id \"a-random-wow\", :flowmaps-connections [[:http-call-1/idx0 :unpack-results-map/value] [:unpack-results-map/full_line :full-wow-line/value] [:open-input/* :http-call-1/req-map] [:unpack-results-map/character :character/value] [:unpack-results-map/movie :movie-name/value] [:rando-string :open-fn-5/value] [:unpack-results-map :unpack-results-map_poster/x] [:movie-name :done] [:unpack-results-map :unpack-results-map_video=480p/x]]} (non-numeric average)",
     :cardinality 100},
    :icon
    {:min "zmdi-developer-board",
     :data-type "string",
     :commons {"zmdi-developer-board" 5},
     :distinct 1,
     :group-by? true,
     :median "zmdi-developer-board",
     :max "zmdi-developer-board",
     :avg "zmdi-developer-board (non-numeric average)",
     :cardinality 20}},
   :database-type "SQLite",
   :rowcount 5},
  :tmp--1119481079-hist-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :OFFENSE-CODE-GROUP-drag-327
  {:fields
   {:OFFENSE_CODE_GROUP
    {:min "Aggravated Assault",
     :data-type "string",
     :commons
     {"Criminal Harassment" 1, "Firearm Violations" 1, "Investigate Property" 1},
     :distinct 61,
     :group-by? true,
     :median "License Plate Related Incidents",
     :max "Warrant Arrests",
     :avg "Motor Vehicle Accident Response (non-numeric average)",
     :cardinality 100},
    :rowcnt
    {:min 1,
     :data-type "integer",
     :commons {1 4, 48 2, 84 1},
     :distinct 57,
     :group-by? false,
     :median 296,
     :max 6407,
     :avg 818.7704918032787,
     :cardinality 93}},
   :database-type "SQLite",
   :rowcount 61},
  :offenses-drag-DISTRICT-260
  {:fields
   {:DISTRICT
    {:min "",
     :data-type "string",
     :commons {"E5" 1, "B2" 1, "C6" 1},
     :distinct 13,
     :group-by? true,
     :median "C11",
     :max "E5",
     :avg "B2 (non-numeric average)",
     :cardinality 100},
    :rowcnt
    {:min 1765,
     :data-type "integer",
     :commons {35717 1, 1765 1, 23460 1},
     :distinct 13,
     :group-by? false,
     :median 23460,
     :max 49945,
     :avg 24544.076923076922,
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 13},
  :gen-viz-49
  {:fields
   {:Lat
    {:min "",
     :data-type "float",
     :commons {42.30803768 1, 42.32026821 1, 42.31011531 1},
     :distinct 500,
     :group-by? true,
     :median "42.32203248",
     :max "42.34336892",
     :avg "42.30607218 (non-numeric average)",
     :cardinality 100},
    :Long
    {:min "",
     :data-type "float",
     :commons {-71.10527895 1, -71.08485404 1, -71.07989658 1},
     :distinct 500,
     :group-by? true,
     :median "-71.0837703",
     :max "-71.11160342",
     :avg "-71.0827326 (non-numeric average)",
     :cardinality 100},
    :DISTRICT
    {:min "B2",
     :data-type "string",
     :commons {"B2" 500},
     :distinct 1,
     :group-by? true,
     :median "B2",
     :max "B2",
     :avg "B2 (non-numeric average)",
     :cardinality 0}},
   :database-type "SQLite",
   :rowcount 500},
  :flows-sys
  {:fields
   {:flow_id
    {:min "a-random-wow",
     :data-type "string",
     :commons
     {"openai-image-gen-ladder" 2,
      "simple-python-exec" 1,
      "node-color-thief-js-webp" 1},
     :distinct 5,
     :group-by? true,
     :median "node-color-thief-js-webp",
     :max "simple-python-exec",
     :avg "openai-image-gen-ladder (non-numeric average)",
     :cardinality 83},
    :file_path
    {:min "./flows/a-random-wow.edn",
     :data-type "string",
     :commons
     {"./flows/simple-python-exec.edn" 1,
      "./flows/node-color-thief-js-webp.edn" 1,
      "./flows/a-random-wow.edn" 1},
     :distinct 6,
     :group-by? true,
     :median "./flows/node-color-thief-js-webp.edn",
     :max "/home/ryanr/rvbbit/backend/./flows/openai-image-gen-ladder.edn",
     :avg
     "/home/ryanr/rvbbit/backend/./flows/openai-image-gen-ladder.edn (non-numeric average)",
     :cardinality 100},
    :last_modified
    {:min "2024-08-31 19:10:15",
     :data-type "string",
     :commons
     {"2024-08-31 19:10:15" 4, "2024-09-01 02:42:12" 1, "2024-09-02 05:18:05" 1},
     :distinct 3,
     :group-by? true,
     :median "2024-08-31 19:10:15",
     :max "2024-09-02 05:18:05",
     :avg "2024-09-02 05:18:05 (non-numeric average)",
     :cardinality 50}},
   :database-type "SQLite",
   :rowcount 6},
  :files-sys
  {:fields
   {:file_path
    {:min "./screens/cyan-pink-creepers.edn",
     :data-type "string",
     :commons
     {"/home/ryanr/rvbbit/backend/./screens/frost-terminal2.edn" 2,
      "./screens/dynamic-theme-example1.edn" 1,
      "./screens/looking-glass-sine-wave.edn" 1},
     :distinct 20,
     :group-by? true,
     :median "./screens/server-stats2.edn",
     :max "/home/ryanr/rvbbit/backend/./screens/nice-car-choom.edn",
     :avg "./screens/cyan-pink-creepers.edn (non-numeric average)",
     :cardinality 95},
    :screen_name
    {:min "cyan-pink-creepers",
     :data-type "string",
     :commons {"frost-terminal2" 3, "light-theme" 2, "game-of-life" 2},
     :distinct 12,
     :group-by? true,
     :median "game-of-life",
     :max "winter-theme",
     :avg "cyan-pink-creepers (non-numeric average)",
     :cardinality 57},
    :blocks
    {:min 4,
     :data-type "integer",
     :commons {15 5, 6 4, 10 2},
     :distinct 10,
     :group-by? true,
     :median 33,
     :max 48,
     :avg 13.142857142857142,
     :cardinality 47},
    :queries
    {:min 1,
     :data-type "integer",
     :commons {2 7, 1 4, 3 3},
     :distinct 8,
     :group-by? true,
     :median 2,
     :max 17,
     :avg 4.571428571428571,
     :cardinality 38},
    :ts
    {:min "2024-09-02 09:51:39",
     :data-type "string",
     :commons
     {"2024-09-02 09:51:39" 12, "2024-09-02 09:52:42" 2, "2024-09-02 09:56:12" 1},
     :distinct 9,
     :group-by? true,
     :median "2024-09-02 09:51:39",
     :max "2024-09-02 09:56:12",
     :avg "2024-09-02 09:51:39 (non-numeric average)",
     :cardinality 42}},
   :database-type "SQLite",
   :rowcount 21},
  :albums-drag-289
  {:fields
   {:album_name
    {:min "...And Justice for All (Remastered Deluxe Box Set)",
     :data-type "string",
     :commons
     {"...And Justice for All (Remastered Deluxe Box Set)" 1, "S&M" 1, "S&M2" 1},
     :distinct 25,
     :group-by? true,
     :median "Lulu",
     :max "St. Anger",
     :avg
     "Metallica Through The Never (Music from the Motion Picture) (non-numeric average)",
     :cardinality 100},
    :img_300
    {:min "https://i.scdn.co/image/ab67616d00001e020a3eb7ef6df5732fc6fa77ec",
     :data-type "string",
     :commons
     {"https://i.scdn.co/image/ab67616d00001e02a49eff6d64cafc2551553380" 1,
      "https://i.scdn.co/image/ab67616d00001e02e9c415cdc78d53b9b8627274" 1,
      "https://i.scdn.co/image/ab67616d00001e022fe08610316f3e5ebaa06d68" 1},
     :distinct 25,
     :group-by? true,
     :median "https://i.scdn.co/image/ab67616d00001e02a49eff6d64cafc2551553380",
     :max "https://i.scdn.co/image/ab67616d00001e02f2651ad6c2b8c509055f410e",
     :avg
     "https://i.scdn.co/image/ab67616d00001e02f1a501610a71d48c526c7ecd (non-numeric average)",
     :cardinality 100},
    :img_640
    {:min "https://i.scdn.co/image/ab67616d0000b2730a3eb7ef6df5732fc6fa77ec",
     :data-type "string",
     :commons
     {"https://i.scdn.co/image/ab67616d0000b273a4c3675649cce210651d150d" 1,
      "https://i.scdn.co/image/ab67616d0000b273f1a501610a71d48c526c7ecd" 1,
      "https://i.scdn.co/image/ab67616d0000b2730a3eb7ef6df5732fc6fa77ec" 1},
     :distinct 25,
     :group-by? true,
     :median "https://i.scdn.co/image/ab67616d0000b273a49eff6d64cafc2551553380",
     :max "https://i.scdn.co/image/ab67616d0000b273f2651ad6c2b8c509055f410e",
     :avg
     "https://i.scdn.co/image/ab67616d0000b273f1a501610a71d48c526c7ecd (non-numeric average)",
     :cardinality 100},
    :popularity
    {:min 25,
     :data-type "integer",
     :commons {64 3, 53 2, 57 2},
     :distinct 20,
     :group-by? true,
     :median 57,
     :max 76,
     :avg 54.32,
     :cardinality 80},
    :release_date
    {:min "1983-07-25",
     :data-type "string",
     :commons {"1986-03-03" 2, "1983-07-25" 2, "1988-09-07" 2},
     :distinct 19,
     :group-by? true,
     :median "1997-11-18",
     :max "2023-04-14",
     :avg "2013 (non-numeric average)",
     :cardinality 75}},
   :database-type "SQLite",
   :rowcount 25},
  :tmp--1686070853-hist-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :gen-viz-821
  {:fields
   {:rows
    {:min 2,
     :data-type "integer",
     :commons {20 4, 26 2, 12 2},
     :distinct 27,
     :group-by? false,
     :median 120.5,
     :max 468,
     :avg 69.1875,
     :cardinality 84},
    :tour_name
    {:min "",
     :data-type "string",
     :commons
     {"Kill 'Em All for One" 1,
      "Guns N’ Roses/Metallica Stadium Tour" 1,
      "Nowhere Else to Roam" 1},
     :distinct 32,
     :group-by? true,
     :median "Metallica By Request",
     :max "WorldWired",
     :avg " (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 32},
  :bigfoot-sightings-locations-drag-305
  {:fields
   {:nearestroad
    {:min "",
     :data-type "string",
     :commons {nil 8, "US 1" 2, "State highway 94" 2},
     :distinct 481,
     :group-by? true,
     :median "NY Rt. 86",
     :max "washington",
     :avg "park access road (non-numeric average)",
     :cardinality 96},
    :water_area
    {:min "",
     :data-type "integer",
     :commons {nil 12, 110297 10, 912181 6},
     :distinct 308,
     :group-by? true,
     :median "334337",
     :max "9956",
     :avg "38709 (non-numeric average)",
     :cardinality 61},
    :housing_units
    {:min "",
     :data-type "integer",
     :commons {nil 12, 40249 10, 461665 6},
     :distinct 308,
     :group-by? true,
     :median "31840",
     :max "9945",
     :avg "64324 (non-numeric average)",
     :cardinality 61},
    :date
    {:min "",
     :data-type "string",
     :commons {nil 133, "15" 29, "12" 10},
     :distinct 184,
     :group-by? true,
     :median "15th",
     :max "unkown",
     :avg " (non-numeric average)",
     :cardinality 36},
    :locationdetails
    {:min "",
     :data-type "string",
     :commons
     {nil 60,
      "Off I-95. The area sits between Southside Blvd. to the west. J.Turner Butler Blvd. to the north. Gate Parkway to the east and 9-A St. Johns Bluff Road to south."
      2,
      "This incident occurred approximately 4 miles east of Charlotte, Tennessee in Dickson County in what is known to locals as the Greenwood Community. This incident was in sight of the junction of State Hwy 49 and Greenwood Road."
      2},
     :distinct 439,
     :group-by? true,
     :median
     "Minnehaha Falls is 1.6 miles from the Lake Seed Dam. To reach the falls Follow US441 north out of Tallulah Falls for 2 miles and turn on Old 441 at the Rabun Beach Recreation Area sign. Follow Old 441 for 2.5 miles and turn left on Lake Rabun Road. Proceed along the shore of Lake Rabun for 6 miles (2 miles past the Rabun Beach Recreation area) to the Lake Seed Dam. Cross the lake below the dam on a one-lane bridge. Go about 150 Yards and turn left on Bear Gap Rd. Follow Bear Gap Rd. for 1.5 miles to the Minnehaha Falls sign on the right.",
     :max "west from Newville on CR 73",
     :avg
     "One of the highest camp sites on the north side of Mt Adams, about 100m from the road and next to a small stream that flowed north. This camp site is about a five min walk from where the wilderness zone begins, and is where our truck could be parked. (non-numeric average)",
     :cardinality 87},
    :submitted_date
    {:min "1996-12-05",
     :data-type "string",
     :commons {"2000-10-08" 3, "2015-09-15" 2, "2003-10-27" 2},
     :distinct 476,
     :group-by? true,
     :median "2007-08-13",
     :max "2022-03-18",
     :avg "2000-12-08 (non-numeric average)",
     :cardinality 95},
    :bfroid
    {:min 81,
     :data-type "integer",
     :commons {25582 1, 68899 1, 2758 1},
     :distinct 500,
     :group-by? true,
     :median 18013,
     :max 73291,
     :avg 23664.142,
     :cardinality 100},
    :cty_abbrev
    {:min "",
     :data-type "string",
     :commons {"FL" 113, "GA" 50, "AL" 49},
     :distinct 22,
     :group-by? true,
     :median "ME",
     :max "WV",
     :avg "MA (non-numeric average)",
     :cardinality 4},
    :otherwitnesses
    {:min "",
     :data-type "string",
     :commons {nil 46, "No" 11, "no" 7},
     :distinct 410,
     :group-by? true,
     :median "My girlfriend was with me, she saw it first",
     :max "yes 2",
     :avg
     "Jim Avila who I was in the Army with at Ft Lewis, WA. We had both climbed Adams and most other Cascade Range Peaks together or w/others (non-numeric average)",
     :cardinality 81},
    :run_id
    {:min 34,
     :data-type "integer",
     :commons {34 500},
     :distinct 1,
     :group-by? true,
     :median 34,
     :max 34,
     :avg 34,
     :cardinality 0},
    :fips_county_code
    {:min "",
     :data-type "integer",
     :commons {19 19, 25 17, 83 15},
     :distinct 98,
     :group-by? true,
     :median "3",
     :max "99",
     :avg "3 (non-numeric average)",
     :cardinality 19},
    :cty_name
    {:min "",
     :data-type "string",
     :commons {"Washington County" 13, nil 12, "Clay County" 10},
     :distinct 260,
     :group-by? true,
     :median "Leon County",
     :max "York County",
     :avg "Berkshire County (non-numeric average)",
     :cardinality 51},
    :nearesttown
    {:min "",
     :data-type "string",
     :commons {"Middleburg" 6, "Jacksonville" 3, "Charlotte" 2},
     :distinct 472,
     :group-by? true,
     :median "Leesburg",
     :max "wirtz",
     :avg "Mt. Adams Wilderness Area (non-numeric average)",
     :cardinality 94},
    :timeandconditions
    {:min "",
     :data-type "string",
     :commons
     {nil 21,
      "2-3am" 2,
      "This incident occurred in either June or July of 1985. It was approximately 3 o''clock in the afternoon, sunny, very warm and clear."
      2},
     :distinct 478,
     :group-by? true,
     :median "I think it was about 5PM. Light was good, weather was clear.",
     :max
     "warm summer night with a full moonfairly clear,not many clouds if I remember right",
     :avg "Night between 9 and 10 PMClear, cool (non-numeric average)",
     :cardinality 95},
    :month
    {:min "",
     :data-type "string",
     :commons {nil 74, "0001-07-01" 58, "0001-10-01" 54},
     :distinct 13,
     :group-by? true,
     :median "0001-07-01",
     :max "0001-12-01",
     :avg "0001-07-01 (non-numeric average)",
     :cardinality 2},
    :county
    {:min "Adams County",
     :data-type "string",
     :commons {"Clay County" 10, "Washington County" 10, "Marion County" 7},
     :distinct 267,
     :group-by? true,
     :median "Lowndes County",
     :max "York County",
     :avg "Skamania County (non-numeric average)",
     :cardinality 53},
    :land_area
    {:min "",
     :data-type "integer",
     :commons {nil 12, 1556962 10, 5268925 6},
     :distinct 308,
     :group-by? true,
     :median "1891252",
     :max "988024",
     :avg "2412318 (non-numeric average)",
     :cardinality 61},
    :longitude
    {:min -116.5906549182677,
     :data-type "float",
     :commons {-82.33913994503168 2, -81.72398988972022 2, -81.80919046537545 2},
     :distinct 491,
     :group-by? true,
     :median -81.33373853743416,
     :max -7.917415973595839,
     :avg -80.93998738077005,
     :cardinality 98},
    :state
    {:min "Alabama",
     :data-type "string",
     :commons {"Florida" 118, "Georgia" 50, "Alabama" 47},
     :distinct 24,
     :group-by? true,
     :median "New Jersey",
     :max "West Virginia",
     :avg "Washington (non-numeric average)",
     :cardinality 4},
    :zipcode
    {:min "",
     :data-type "integer",
     :commons {nil 12, 32068 8, 32134 4},
     :distinct 443,
     :group-by? true,
     :median "31313",
     :max "8902",
     :avg "1223 (non-numeric average)",
     :cardinality 88},
    :fixed_month
    {:min "",
     :data-type "string",
     :commons {"0001-07-01" 87, "0001-11-01" 55, "0001-09-01" 54},
     :distinct 13,
     :group-by? true,
     :median "0001-07-01",
     :max "0001-12-01",
     :avg "0001-07-01 (non-numeric average)",
     :cardinality 2},
    :submitted
    {:min "1996-12-05 00:00:00.000000",
     :data-type "string",
     :commons
     {"2000-10-08 00:00:00.000000" 3,
      "2003-10-26 00:00:00.000000" 2,
      "2012-11-11 00:00:00.000000" 2},
     :distinct 476,
     :group-by? true,
     :median "2007-08-13 00:00:00.000000",
     :max "2022-03-18 00:00:00.000000",
     :avg "2000-12-08 00:00:00.000000 (non-numeric average)",
     :cardinality 95},
    :fips_state_code
    {:min "",
     :data-type "integer",
     :commons {12 113, 13 50, 1 49},
     :distinct 22,
     :group-by? true,
     :median "28",
     :max "9",
     :avg "25 (non-numeric average)",
     :cardinality 4},
    :state_abbrev
    {:min "",
     :data-type "string",
     :commons {"FL" 113, "GA" 50, "AL" 49},
     :distinct 22,
     :group-by? true,
     :median "ME",
     :max "WV",
     :avg "MA (non-numeric average)",
     :cardinality 4},
    :title
    {:min
     "5 children observe a very large hairy \"man\" for several minutes (N. Ft. Myers)",
     :data-type "string",
     :commons
     {"Backyard nighttime sighting in a village outside Rome" 1,
      "Evening sighting by motorist on Hwy 75 near Duke''s Creek" 1,
      "Nighttime sighting by motorist near Mansfield" 1},
     :distinct 500,
     :group-by? true,
     :median
     "Memory told of a close encounter while frogging at night on the upper St. Johns River",
     :max
     "while hunting hogs near a cypress bayhead, witness saw a dark brown/black bi-pedal creature.",
     :avg
     "Climber has night-time sighting near Mt. Adams wilderness (non-numeric average)",
     :cardinality 100},
    :otherstories
    {:min "",
     :data-type "string",
     :commons {nil 127, "No" 25, "no" 16},
     :distinct 323,
     :group-by? true,
     :median
     "My father and his father were out in the woods a little distance away from here and they heard similar noises and they felt like some one was watching them.",
     :max
     "you always hear a lot of tall tells about this area, but nothing that I ever took seriously.",
     :avg " (non-numeric average)",
     :cardinality 64},
    :year
    {:min "04-present",
     :data-type "string",
     :commons {"2009" 23, "2004" 20, "2006" 18},
     :distinct 103,
     :group-by? true,
     :median "2001",
     :max "est.1990",
     :avg "1991 (non-numeric average)",
     :cardinality 20},
    :season
    {:min "Fall",
     :data-type "string",
     :commons {"Summer" 183, "Fall" 139, "Winter" 91},
     :distinct 5,
     :group-by? true,
     :median "Summer",
     :max "Winter",
     :avg "Summer (non-numeric average)",
     :cardinality 0},
    :state_name
    {:min "",
     :data-type "string",
     :commons {"FLORIDA" 113, "GEORGIA" 50, "ALABAMA" 49},
     :distinct 22,
     :group-by? true,
     :median "MASSACHUSETTS",
     :max "WEST VIRGINIA",
     :avg "MASSACHUSETTS (non-numeric average)",
     :cardinality 4},
    :class
    {:min "Class A",
     :data-type "string",
     :commons {"Class A" 500},
     :distinct 1,
     :group-by? true,
     :median "Class A",
     :max "Class A",
     :avg "Class A (non-numeric average)",
     :cardinality 0},
    :population
    {:min "",
     :data-type "integer",
     :commons {nil 12, 105986 10, 863518 6},
     :distinct 307,
     :group-by? true,
     :median "29241",
     :max "99840",
     :avg "139352 (non-numeric average)",
     :cardinality 61},
    :zip_long
    {:min "",
     :data-type "float",
     :commons {nil 12, -81.879328 8, -81.836369 4},
     :distinct 443,
     :group-by? true,
     :median "-81.201514",
     :max "-90.775275",
     :avg "-73.093359 (non-numeric average)",
     :cardinality 88},
    :alsonoticed
    {:min "",
     :data-type "string",
     :commons {nil 179, "No" 10, "no" 9},
     :distinct 302,
     :group-by? true,
     :median
     "I saw it for a second in my headlights then it disappeared. If I saw something then the car that was in front of me would have had a good look. They would be the one''s to make a good report",
     :max
     "yes after the incident i heard a lot of loud yells and grunts comeing from the woods.",
     :avg
     "Silence of all common wildlife/insect sounds just prior to my awareness of a presence of subject in question. Also a small golden retriever pup jumped into the cab of our truck without assistance which is normally required, her ears down and tail tucked under. I had never had a fear of bigfoot, only bears and people(criminals) I have seen and hunted bear, this was not a bear. There was no other persons within a few miles that night. On a supplimentary note, The Yakama Indian reservation is the entire east side of Mt Adams and thousands of acres of uninhabited wilderness. I have felt like I was being watched that day from dense pine forest ridges up to 2,000 ft high. (non-numeric average)",
     :cardinality 60},
    :zip_lat
    {:min "",
     :data-type "float",
     :commons {nil 12, 30.074926 8, 29.401523 4},
     :distinct 443,
     :group-by? true,
     :median "35.10425",
     :max "44.971091",
     :avg "42.314449 (non-numeric average)",
     :cardinality 88},
    :url
    {:min "http://www.bfro.net/GDB/show_report.asp?id=1003&PrinterFriendly=True",
     :data-type "string",
     :commons
     {"http://www.bfro.net/GDB/show_report.asp?id=25582&PrinterFriendly=True" 1,
      "http://www.bfro.net/GDB/show_report.asp?id=26262&PrinterFriendly=True" 1,
      "http://www.bfro.net/GDB/show_report.asp?id=17550&PrinterFriendly=True" 1},
     :distinct 500,
     :group-by? true,
     :median
     "http://www.bfro.net/GDB/show_report.asp?id=32746&PrinterFriendly=True",
     :max "http://www.bfro.net/GDB/show_report.asp?id=989&PrinterFriendly=True",
     :avg
     "http://www.bfro.net/GDB/show_report.asp?id=889&PrinterFriendly=True (non-numeric average)",
     :cardinality 100},
    :latitude
    {:min 25.51553924960646,
     :data-type "float",
     :commons {34.6950550313962 2, 25.86420116061017 2, 29.6708249777086 2},
     :distinct 491,
     :group-by? true,
     :median 35.222389351301985,
     :max 53.83101497570057,
     :avg 35.35903718804207,
     :cardinality 98},
    :observed
    {:min "",
     :data-type "string",
     :commons
     {nil 7,
      " in 1979 a friend and I were taking a hike on TVA land in Columbia tn. At that time the area was deserted my x-father in law owned 20 acres that backed up to TVA which met Duck River on the back. We were walking and suddenly 20yds or less away out of the bush in wide open there he was. We froze and we all stared at each other If he had been violent you wouldn''t hear this story. He turned made an awful growling scream and was gone. Later that day my brother and I went back and searched only to find a 4 inch tree about 6 ft up freshly took and twisted to splinters.  The farm was part of our area and since this sighting we were not scared when so many times we knew he was near, we were never attacked.  Hard for me to write disabled now."
      1,
      " Many years ago while camping in Monongahela National Forest in the fall with my family, my son and I decided to walk around part of the lake at night time. It was a beautiful bright night. the temperature was in the 50''s. We came upon a marshy area just off of the trail. <BR><BR>There was a meadow at the edge of the lake. We heard a loud commotion, and sticks breaking. We stopped to look thinking that it may have been campers looking for firewood. I saw two very large black upright creatures ripping branches and bark from the trees. It appeared that they were eating the bark. <BR><BR>My son and I were about 125 feet away at the most. I was so scared and in disbelief, I quietly told my son (he was 10), to move slowly down to the ground. We crouched behind a rock and watched over 15 minutes. I have never sweat like this in my entire life, I was so frightened. <BR><BR>The smallest of the two had a arm reach about 10 to 12 feet. The larger of the two was several feet higher. All of a sudden, the two stepped back into the darkness of the woods and a third one stepped out. This one was unbelievably tall. We only watched a few more seconds and I told my son \"We have to run\". <BR><BR>We ran nonstop back to my family''s camper. My dad did not believe us. He thought it was a bear. I told him that there was no way it was a bear. Even a grizzly was not as tall as the smallest ones arm reach. I grew up in the area and I spent alot of time in the woods and it takes alot to frighten me! <BR><BR>The next day I went to the same spot and found several feet of tree branches and smaller limbs at the base of several trees. The trees had been stripped of branches and bark. Through the years I stopped talking about it because I felt like no one believed me or my son."
      1},
     :distinct 494,
     :group-by? true,
     :median
     " In the Summer of 1970, I was taking my pony and dog for a walk in the thickly wooded area where my parents had just built a new house. It was at that time a very isolated area.  We had apparently disturbed the wildlife in the area as we were always seeing very large black snakes and other wildlife near the house.  I was not prepared, however, for the creature I encountered in the woods behind our home.  I looked up on the thickly wooded hill and saw a huge creature that resembled a gorilla or a bear.  It was dark in color and appeared to be hairy.  It was on the other side of an old fence from me.  I was very frightened. I fled the area immediately.  I wish I could describe this creature better.  I really don''t think it was a bear.  Bears are not usually sighted in our area and this creature was really big and it startled me because of it''s size.  I don''t frighten easily and was accustomed to living in the country with wild animals.  The one thing that does amaze m e when I look back on this incident is that my dog and  pony had no reaction to this creature.  It makes me wonder if they had become accustomed to it coming around when we weren''t outside.  I never saw it again but a couple of years later my mother saw something from her kitchen window that looked to her somewhat like a bear but she wasn''t sure as she was not close enough to it to see features.  It was on all fours and it got into the nearby stream and walked around the bend and out of sight.  The area where we had these sightings was in Washington Co. MD.  We live near a stream and a thickly wooded area.  The stream feeds into the Conococheague Creek which then feeds into the Potomac River a few miles from our home.  My parents have lived there for 30 years now and there have been no sightings of any creatures such as the ones we observed in the early 1970''s.  However, we were the first to really disturb that woods and the area is now much more developed.",
     :max " wood knocks,screams,yodleing,structures,",
     :avg
     " I am reporting this incident from 1991 because I heard of your group on the radio on the way home from work tonight, and you sound credible.<BR><BR>I served as a US Army Infantry Sergeant at Ft.Lewis Wa. for several years, I am also an alpine climber. I went to Mt Adams most of the time because it was much more private than other mountains ie: St Helens, Rainer -- to many people. I also loved the thousands of acres of wilderness area which was restricted to six or eight hearts per group and no vehicles.<BR><BR>Another Sergeant named Jim Avila, my climbing partner, and good friend, and his Golden Retriever pup were there also.<BR><BR>We were only camping and hiking around this trip, since we had the puppy with us, normally we would have camped on a snowfield above the tree line.<BR><BR>Just after nightfall we were talking and the puppy was next to the fire. The sky was crystal clear and everything \"felt\" normal. Since I spent six months out of the year living in the woods, and deserts of the western US and Europe, in the Army, the night is my ally--- I am an expert at what normal feels like.<BR><BR>I needed to urinate, so I stood up and walked to my right rear about 20 feet where a path led down to a stream, I could hear and see the slow moving shallow water in this shallow pea gravel bedded creek, I did my thing and returned to the fire.<BR><BR>We then decided to have some fun and see if we could get a coyote to howl, although we were not sure if any may have been around. We started our best howls to no avail. We continued for about five min. and then stopped. About and hour passed since my previous trip to urinate and I figured I would go again before getting in the sleeping bag.<BR><BR>Jim was across from the fire and could see my walking toward the spot overlooking the path to the creek where I intended to void my bladder, HA HA. <BR><BR>As my feet stopped I could hear footsteps in the dry gravel on the other side of the creek bed about 20'' away. When It heard me stop, it stopped a little to late and I heard it. I felt intelligence in it''s movement, not instinct, it knew it had been busted and just froze. I froze and drew my pistol Jim saw this and at the same time said the puppy flew into the cab of the truck. <BR><BR>Jim, also sensing something wrong, drew his pistol, and stood up. I was looking right where this guy was standing but could not see him because he was across the water but still in front of the opposite bank, he was still frozen like a ROCK. Jim came to back me up he did not know what in the hell was going on and instead of telling him to stop I just kept my eyes glued to the spot I knew the guy was at and he finally decided to move out.He took two strides up the bank away from me with a look over his right shoulder as he was moving away to the right.<BR><BR>His look was concern mixed with a child like fear, as if he really wanted to introduce himself in some way to our \"wolf-calling group\", Also puzzled like \"why are you indiots calling coyotes?----Your Humans, Stupid!\". The most animal like trait was a sort of a very brief mock anger face, which looked like an after-thought just before the big guy went into the woods. <BR><BR>I looked at Jim --- no words --- we threw most of our stuff in the truck and left in a big hurry. There was no way I was staying in those woods that night.<BR><BR>The big guy was huge, but slender as I recall. Don''t ask me how, but I know he was an adolesent. He was sort of like a big kid, but moved like the wind. He saw my eyes and I saw his. I did not tell Jim what I saw, I never did. I never had to.<BR><BR>Please belive me, I swear this account to be true.<BR>Thank You, and God''s Speed in your search.<BR> (non-numeric average)",
     :cardinality 98},
    :environment
    {:min "",
     :data-type "string",
     :commons {nil 18, "wooded area" 3, "Mountain ridge" 2},
     :distinct 477,
     :group-by? true,
     :median "Saw grass field, near a hammock of trees",
     :max "woods, hills, fields,",
     :avg
     "Pine forest camp site next to a gravel creek which was flowing very slow and shallow with very steep banks. the site was at or about 3200'' above sl (non-numeric average)",
     :cardinality 95},
    :fixed_year
    {:min "04-p",
     :data-type "string",
     :commons {"2009" 23, "2004" 21, "1998" 20},
     :distinct 70,
     :group-by? true,
     :median "2001",
     :max "est.",
     :avg "1991 (non-numeric average)",
     :cardinality 14},
    :run_time
    {:min "2022-05-20 16:11:29.000000",
     :data-type "string",
     :commons
     {"2022-05-20 16:41:14.000000" 4,
      "2022-05-20 16:18:11.000000" 3,
      "2022-05-20 16:52:15.000000" 3},
     :distinct 389,
     :group-by? true,
     :median "2022-05-20 16:33:08.000000",
     :max "2022-05-20 16:52:49.000000",
     :avg "2022-05-20 16:50:09.000000 (non-numeric average)",
     :cardinality 77},
    :zip_name
    {:min "",
     :data-type "string",
     :commons {nil 12, "MIDDLEBURG" 8, "JACKSONVILLE" 5},
     :distinct 406,
     :group-by? true,
     :median "LACONA",
     :max "WYTHEVILLE",
     :avg "BECKET (non-numeric average)",
     :cardinality 81}},
   :database-type "SQLite",
   :rowcount 500},
  :fflowparts-sys
  {:fields
   {:category
    {:min ":clojure-base",
     :data-type "string",
     :commons {":rabbit-base" 18, ":clojure-base" 16},
     :distinct 2,
     :group-by? true,
     :median ":rabbit-base",
     :max ":rabbit-base",
     :avg ":clojure-base (non-numeric average)",
     :cardinality 5},
    :description
    {:min "Basic HTTP call primitive",
     :data-type "string",
     :commons
     {"Basic HTTP call primitive" 2,
      "Clojure subtract function." 2,
      "Get top 50 color frequencies from an image in hex form." 1},
     :distinct 32,
     :group-by? true,
     :median "Clojure true? function.",
     :max "Write you own Clojure function! Godspeed!",
     :avg "Clojure multiply function. (non-numeric average)",
     :cardinality 94},
    :name
    {:min ":*",
     :data-type "string",
     :commons {":=" 1, ":>=" 1, ":write-file" 1},
     :distinct 34,
     :group-by? true,
     :median ":get-colors",
     :max ":write-file",
     :avg ":* (non-numeric average)",
     :cardinality 100},
    :file_path
    {:min "",
     :data-type "string",
     :commons {"" 33, "./flows/node-color-thief-js.edn" 1},
     :distinct 2,
     :group-by? true,
     :median "",
     :max "./flows/node-color-thief-js.edn",
     :avg " (non-numeric average)",
     :cardinality 5},
    :full_map
    {:min
     "{:description \"Basic HTTP call primitive\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}",
     :data-type "string",
     :commons
     {"{:description \"Clojure add function.\", :fn (fn [& args] (apply + args)), :inputs [:args], :icon \"zmdi-plus\", :types {:args [:integer :float], :out [:integer :float]}}"
      1,
      "{:description \"Convert a JSON string to Clojure EDN\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}}"
      1,
      "{:description \"Clojure greater-than-or-equal function.\", :fn >, :inputs [:value1 :value2], :icon \"zmdi-chevron-right\", :types {:value1 [:integer :float], :value2 [:integer :float], :out :boolean}}"
      1},
     :distinct 34,
     :group-by? true,
     :median
     "{:description \"Clojure true? function.\", :fn true?, :inputs [:value], :icon \"zmdi-pizza\", :types {:value :boolean, :out :boolean}}",
     :max
     "{:file-path \"./flows/node-color-thief-js.edn\", :icon \"zmdi-gradient\", :description \"Take an image local path and generate a color palette map from it.\"}",
     :avg
     "{:description \"Clojure multiply function.\", :fn *, :inputs [:value1 :value2], :icon \"zmdi-plus\", :types {:value1 [:integer :float], :value2 [:integer :float], :out [:integer :float]}} (non-numeric average)",
     :cardinality 100},
    :icon
    {:min "fa-solid fa-terminal",
     :data-type "string",
     :commons {"zmdi-pizza" 3, "zmdi-file-text" 3, "zmdi-alert-polygon" 3},
     :distinct 20,
     :group-by? true,
     :median "zmdi-functions",
     :max "zmdi-washing-machine",
     :avg "zmdi-plus (non-numeric average)",
     :cardinality 58}},
   :database-type "SQLite",
   :rowcount 34},
  :gen-viz-987
  {:fields
   {:rows
    {:min 8687,
     :data-type "integer",
     :commons {9872 1, 15680 1, 15706 1},
     :distinct 4,
     :group-by? false,
     :median 12196.5,
     :max 15706,
     :avg 12486.25,
     :cardinality 100},
    :YEAR
    {:min 2015,
     :data-type "integer",
     :commons {2018 1, 2017 1, 2016 1},
     :distinct 4,
     :group-by? true,
     :median 2016.5,
     :max 2018,
     :avg 2016.5,
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 4},
  :tmp--1674398537-hist-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :gen-viz-1217
  {:fields
   {:min_long
    {:min -71.14808274,
     :data-type "float",
     :commons {-71.14808274 1},
     :distinct 1,
     :group-by? true,
     :median -71.14808274,
     :max -71.14808274,
     :avg -71.14808274,
     :cardinality 100},
    :max_long
    {:min -71.00893922,
     :data-type "float",
     :commons {-71.00893922 1},
     :distinct 1,
     :group-by? true,
     :median -71.00893922,
     :max -71.00893922,
     :avg -71.00893922,
     :cardinality 100},
    :min_lat
    {:min 42.2518944,
     :data-type "float",
     :commons {42.2518944 1},
     :distinct 1,
     :group-by? true,
     :median 42.2518944,
     :max 42.2518944,
     :avg 42.2518944,
     :cardinality 100},
    :max_lat
    {:min 42.39214603,
     :data-type "float",
     :commons {42.39214603 1},
     :distinct 1,
     :group-by? true,
     :median 42.39214603,
     :max 42.39214603,
     :avg 42.39214603,
     :cardinality 100},
    :a_lat
    {:min 42.32162901059025,
     :data-type "float",
     :commons {42.32162901059025 1},
     :distinct 1,
     :group-by? true,
     :median 42.32162901059025,
     :max 42.32162901059025,
     :avg 42.32162901059025,
     :cardinality 100},
    :a_long
    {:min -71.0847998497314,
     :data-type "float",
     :commons {-71.0847998497314 1},
     :distinct 1,
     :group-by? true,
     :median -71.0847998497314,
     :max -71.0847998497314,
     :avg -71.0847998497314,
     :cardinality 100},
    :long_diff
    {:min 7.65,
     :data-type "float",
     :commons {7.65 1},
     :distinct 1,
     :group-by? true,
     :median 7.65,
     :max 7.65,
     :avg 7.65,
     :cardinality 100},
    :lat_diff
    {:min 7.71,
     :data-type "float",
     :commons {7.71 1},
     :distinct 1,
     :group-by? true,
     :median 7.71,
     :max 7.71,
     :avg 7.71,
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 1},
  :offenses-drag-761
  {:fields
   {:SHOOTING
    {:min "",
     :data-type "unknown",
     :commons {nil 497, 1 3},
     :distinct 2,
     :group-by? true,
     :median "",
     :max "1",
     :avg " (non-numeric average)",
     :cardinality 0},
    :DISTRICT
    {:min "B2",
     :data-type "string",
     :commons {"B2" 500},
     :distinct 1,
     :group-by? true,
     :median "B2",
     :max "B2",
     :avg "B2 (non-numeric average)",
     :cardinality 0},
    :INCIDENT_NUMBER
    {:min "I182067212",
     :data-type "string",
     :commons {"I182070779" 4, "I182068956" 4, "I182069734" 3},
     :distinct 446,
     :group-by? true,
     :median "I182069063",
     :max "I182070933",
     :avg "I182070933 (non-numeric average)",
     :cardinality 89},
    :OFFENSE_DESCRIPTION
    {:min "ANIMAL CONTROL - DOG BITES - ETC.",
     :data-type "string",
     :commons
     {"VERBAL DISPUTE" 34,
      "SICK/INJURED/MEDICAL - PERSON" 34,
      "INVESTIGATE PERSON" 28},
     :distinct 79,
     :group-by? true,
     :median "M/V ACCIDENT - PERSONAL INJURY",
     :max "WEAPON - OTHER - OTHER VIOLATION",
     :avg "AUTO THEFT (non-numeric average)",
     :cardinality 15},
    :DAY_OF_WEEK
    {:min "0001-01-02",
     :data-type "string",
     :commons {"0001-01-05" 87, "0001-01-04" 82, "0001-01-06" 82},
     :distinct 7,
     :group-by? true,
     :median "0001-01-05",
     :max "0001-01-08",
     :avg "0001-01-08 (non-numeric average)",
     :cardinality 1},
    :MONTH
    {:min 5,
     :data-type "integer",
     :commons {8 397, 9 99, 7 2},
     :distinct 5,
     :group-by? true,
     :median 8,
     :max 9,
     :avg 8.184,
     :cardinality 0},
    :YEAR
    {:min 2017,
     :data-type "integer",
     :commons {2018 499, 2017 1},
     :distinct 2,
     :group-by? true,
     :median 2018,
     :max 2018,
     :avg 2017.998,
     :cardinality 0},
    :HOUR
    {:min 0,
     :data-type "integer",
     :commons {17 35, 10 32, 16 31},
     :distinct 24,
     :group-by? true,
     :median 17,
     :max 23,
     :avg 13.378,
     :cardinality 4},
    :STREET
    {:min "",
     :data-type "string",
     :commons {"BLUE HILL AVE" 27, "WASHINGTON ST" 21, "WARREN ST" 19},
     :distinct 186,
     :group-by? true,
     :median "KENSINGTON PARK",
     :max "ZEIGLER ST",
     :avg "NORMANDY ST (non-numeric average)",
     :cardinality 37},
    :OFFENSE_CODE_GROUP
    {:min "Aggravated Assault",
     :data-type "string",
     :commons
     {"Motor Vehicle Accident Response" 68, "Medical Assistance" 39, "Other" 36},
     :distinct 41,
     :group-by? true,
     :median "Motor Vehicle Accident Response",
     :max "Warrant Arrests",
     :avg "Auto Theft (non-numeric average)",
     :cardinality 8},
    :UCR_PART
    {:min "Other",
     :data-type "string",
     :commons {"Part Three" 263, "Part Two" 151, "Part One" 84},
     :distinct 4,
     :group-by? true,
     :median "Part Three",
     :max "Part Two",
     :avg "Part One (non-numeric average)",
     :cardinality 0},
    :Long
    {:min "",
     :data-type "float",
     :commons {nil 32, -71.08563401 10, -71.10377843 7},
     :distinct 312,
     :group-by? true,
     :median "-71.08354076",
     :max "-71.10981889",
     :avg "-71.0827326 (non-numeric average)",
     :cardinality 62},
    :REPORTING_AREA
    {:min "",
     :data-type "integer",
     :commons {nil 28, 288 19, 319 19},
     :distinct 94,
     :group-by? true,
     :median "301",
     :max "920",
     :avg "330 (non-numeric average)",
     :cardinality 18},
    :Location
    {:min "(0.00000000, 0.00000000)",
     :data-type "string",
     :commons
     {"(0.00000000, 0.00000000)" 32,
      "(42.32866284, -71.08563401)" 10,
      "(42.33380683, -71.10377843)" 7},
     :distinct 312,
     :group-by? true,
     :median "(42.32188540, -71.07906279)",
     :max "(42.34138210, -71.10751449)",
     :avg "(42.30607218, -71.08273260) (non-numeric average)",
     :cardinality 62},
    :OFFENSE_CODE
    {:min 111,
     :data-type "integer",
     :commons {3006 34, 3301 34, 3115 28},
     :distinct 79,
     :group-by? true,
     :median 3201,
     :max 3831,
     :avg 2468.606,
     :cardinality 15},
    :Lat
    {:min "",
     :data-type "float",
     :commons {nil 32, 42.32866284 10, 42.33380683 7},
     :distinct 312,
     :group-by? true,
     :median "42.3218854",
     :max "42.3413821",
     :avg "42.30607218 (non-numeric average)",
     :cardinality 62},
    :OCCURRED_ON_DATE
    {:min "2017-08-31 12:08:00.000000",
     :data-type "string",
     :commons
     {"2018-08-28 10:41:00.000000" 5,
      "2018-09-03 10:00:00.000000" 4,
      "2018-08-28 20:11:00.000000" 3},
     :distinct 433,
     :group-by? true,
     :median "2018-08-28 10:41:00.000000",
     :max "2018-09-03 21:25:00.000000",
     :avg "2018-09-03 21:25:00.000000 (non-numeric average)",
     :cardinality 86}},
   :database-type "SQLite",
   :rowcount 500},
  :bigfoot-sightings-locations-drag-class-428
  {:fields
   {:class
    {:min "Class A",
     :data-type "string",
     :commons {"Class C" 1, "Class A" 1, "Class B" 1},
     :distinct 3,
     :group-by? true,
     :median "Class B",
     :max "Class C",
     :avg "Class B (non-numeric average)",
     :cardinality 100},
    :rowcnt
    {:min 30,
     :data-type "integer",
     :commons {30 1, 2486 1, 2519 1},
     :distinct 3,
     :group-by? false,
     :median 2519,
     :max 2519,
     :avg 1678.3333333333333,
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 3},
  :tour-name-drag-420
  {:fields
   {:tour_name
    {:min "",
     :data-type "string",
     :commons
     {"Kill 'Em All for One" 1,
      "Guns N’ Roses/Metallica Stadium Tour" 1,
      "Nowhere Else to Roam" 1},
     :distinct 32,
     :group-by? true,
     :median "Metallica By Request",
     :max "WorldWired",
     :avg " (non-numeric average)",
     :cardinality 100},
    :rowcnt
    {:min 2,
     :data-type "integer",
     :commons {20 4, 26 2, 12 2},
     :distinct 27,
     :group-by? false,
     :median 120.5,
     :max 468,
     :avg 69.1875,
     :cardinality 84}},
   :database-type "SQLite",
   :rowcount 32},
  :flow-fn-categories-sys
  {:fields
   {:category
    {:min ":clojure-base",
     :data-type "string",
     :commons {":rabbit-base" 1, ":clojure-base" 1},
     :distinct 2,
     :group-by? true,
     :median ":clojure-base",
     :max ":rabbit-base",
     :avg ":clojure-base (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 2},
  :tmp--1854238739-hist-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :connections-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :tmp-1636473620-hist-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :tmp-1521012569-hist-sys
  {:fields
   {:kp
    {:min "[:block-10632 :queries :runstream-chart-openai-image-gen-ladder]",
     :data-type "string",
     :commons
     {"[:block-10632 :queries :runstream-chart-openai-image-gen-ladder]" 2},
     :distinct 1,
     :group-by? true,
     :median "[:block-10632 :queries :runstream-chart-openai-image-gen-ladder]",
     :max "[:block-10632 :queries :runstream-chart-openai-image-gen-ladder]",
     :avg
     "[:block-10632 :queries :runstream-chart-openai-image-gen-ladder] (non-numeric average)",
     :cardinality 50},
    :key
    {:min ":runstream-chart-openai-image-gen-ladder",
     :data-type "string",
     :commons {":runstream-chart-openai-image-gen-ladder" 2},
     :distinct 1,
     :group-by? true,
     :median ":runstream-chart-openai-image-gen-ladder",
     :max ":runstream-chart-openai-image-gen-ladder",
     :avg ":runstream-chart-openai-image-gen-ladder (non-numeric average)",
     :cardinality 50},
    :updated
    {:min "2024-09-02 02:49:10",
     :data-type "string",
     :commons {"2024-09-02 02:49:10" 1, "2024-09-02 02:49:35" 1},
     :distinct 2,
     :group-by? true,
     :median "2024-09-02 02:49:10",
     :max "2024-09-02 02:49:35",
     :avg "2024-09-02 02:49:35 (non-numeric average)",
     :cardinality 100},
    :type
    {:min ":queries",
     :data-type "string",
     :commons {":queries" 2},
     :distinct 1,
     :group-by? true,
     :median ":queries",
     :max ":queries",
     :avg ":queries (non-numeric average)",
     :cardinality 50},
    :panel_key
    {:min ":block-10632",
     :data-type "string",
     :commons {":block-10632" 2},
     :distinct 1,
     :group-by? true,
     :median ":block-10632",
     :max ":block-10632",
     :avg ":block-10632 (non-numeric average)",
     :cardinality 50},
    :diff_kp
    {:min
     "([:from 0 1 :limit :new] [:from 0 1 :limit :new] [:from 0 1 :limit :old] [:from 0 1 :limit :old] [:from 0 1 :limit] [:from 0 1] [:from 0 0] [:from 0 0] [:from 0] [:from])",
     :data-type "string",
     :commons
     {"([:from 0 1 :limit :new] [:from 0 1 :limit :new] [:from 0 1 :limit :old] [:from 0 1 :limit :old] [:from 0 1 :limit] [:from 0 1] [:from 0 0] [:from 0 0] [:from 0] [:from])"
      1,
      "([:from 0 1 :order-by :new 0 1] [:from 0 1 :order-by :new 0 1] [:from 0 1 :order-by :new 0 0] [:from 0 1 :order-by :new 0 0] [:from 0 1 :order-by :new 0] [:from 0 1 :order-by :new] [:from 0 1 :order-by :old] [:from 0 1 :order-by :old] [:from 0 1 :order-by] [:from 0 1] [:from 0 0] [:from 0 0] [:from 0] [:from])"
      1},
     :distinct 2,
     :group-by? true,
     :median
     "([:from 0 1 :limit :new] [:from 0 1 :limit :new] [:from 0 1 :limit :old] [:from 0 1 :limit :old] [:from 0 1 :limit] [:from 0 1] [:from 0 0] [:from 0 0] [:from 0] [:from])",
     :max
     "([:from 0 1 :order-by :new 0 1] [:from 0 1 :order-by :new 0 1] [:from 0 1 :order-by :new 0 0] [:from 0 1 :order-by :new 0 0] [:from 0 1 :order-by :new 0] [:from 0 1 :order-by :new] [:from 0 1 :order-by :old] [:from 0 1 :order-by :old] [:from 0 1 :order-by] [:from 0 1] [:from 0 0] [:from 0 0] [:from 0] [:from])",
     :avg
     "([:from 0 1 :order-by :new 0 1] [:from 0 1 :order-by :new 0 1] [:from 0 1 :order-by :new 0 0] [:from 0 1 :order-by :new 0 0] [:from 0 1 :order-by :new 0] [:from 0 1 :order-by :new] [:from 0 1 :order-by :old] [:from 0 1 :order-by :old] [:from 0 1 :order-by] [:from 0 1] [:from 0 0] [:from 0 0] [:from 0] [:from]) (non-numeric average)",
     :cardinality 100},
    :client_name
    {:min ":calm-lemon-buffalo-14",
     :data-type "string",
     :commons {":calm-lemon-buffalo-14" 2},
     :distinct 1,
     :group-by? true,
     :median ":calm-lemon-buffalo-14",
     :max ":calm-lemon-buffalo-14",
     :avg ":calm-lemon-buffalo-14 (non-numeric average)",
     :cardinality 50},
    :pre_data
    {:min
     "{:select [[[[:min :elapsed]] :elapsed] :started], :refresh-every 10, :cache? false, :connection-id \"flows-db\", :from [{:select [:client_name :elapsed :ended :flow_id :human_elapsed :in_error :started :ts], :from [[:flow_history :mm134]], :where [:= :flow_id \"openai-image-gen-ladder\"]}], :group-by [:started]}",
     :data-type "string",
     :commons
     {"{:select [[[[:min :elapsed]] :elapsed] :started], :refresh-every 10, :cache? false, :connection-id \"flows-db\", :from [{:select [:client_name :elapsed :ended :flow_id :human_elapsed :in_error :started :ts], :from [[:flow_history :mm134]], :where [:= :flow_id \"openai-image-gen-ladder\"]}], :group-by [:started]}"
      1,
      "{:select [[[[:min :elapsed]] :elapsed] :started], :refresh-every 10, :cache? false, :connection-id \"flows-db\", :from [{:select [:client_name :elapsed :ended :flow_id :human_elapsed :in_error :started :ts], :limit 45, :from [[:flow_history :mm134]], :where [:= :flow_id \"openai-image-gen-ladder\"]}], :group-by [:started]}"
      1},
     :distinct 2,
     :group-by? true,
     :median
     "{:select [[[[:min :elapsed]] :elapsed] :started], :refresh-every 10, :cache? false, :connection-id \"flows-db\", :from [{:select [:client_name :elapsed :ended :flow_id :human_elapsed :in_error :started :ts], :from [[:flow_history :mm134]], :where [:= :flow_id \"openai-image-gen-ladder\"]}], :group-by [:started]}",
     :max
     "{:select [[[[:min :elapsed]] :elapsed] :started], :refresh-every 10, :cache? false, :connection-id \"flows-db\", :from [{:select [:client_name :elapsed :ended :flow_id :human_elapsed :in_error :started :ts], :limit 45, :from [[:flow_history :mm134]], :where [:= :flow_id \"openai-image-gen-ladder\"]}], :group-by [:started]}",
     :avg
     "{:select [[[[:min :elapsed]] :elapsed] :started], :refresh-every 10, :cache? false, :connection-id \"flows-db\", :from [{:select [:client_name :elapsed :ended :flow_id :human_elapsed :in_error :started :ts], :limit 45, :from [[:flow_history :mm134]], :where [:= :flow_id \"openai-image-gen-ladder\"]}], :group-by [:started]} (non-numeric average)",
     :cardinality 100},
    :diff
    {:min "{:from [[0 {:limit {:old nil, :new 45}}]]}",
     :data-type "string",
     :commons
     {"{:from [[0 {:limit {:old nil, :new 45}}]]}" 1,
      "{:from [[0 {:order-by {:old nil, :new [[:started :desc]]}}]]}" 1},
     :distinct 2,
     :group-by? true,
     :median "{:from [[0 {:limit {:old nil, :new 45}}]]}",
     :max "{:from [[0 {:order-by {:old nil, :new [[:started :desc]]}}]]}",
     :avg
     "{:from [[0 {:order-by {:old nil, :new [[:started :desc]]}}]]} (non-numeric average)",
     :cardinality 100},
    :data
    {:min
     "{:select [[[[:min :elapsed]] :elapsed] :started], :refresh-every 10, :cache? false, :connection-id \"flows-db\", :from [{:select [:client_name :elapsed :ended :flow_id :human_elapsed :in_error :started :ts], :limit 45, :from [[:flow_history :mm134]], :where [:= :flow_id \"openai-image-gen-ladder\"]}], :group-by [:started]}",
     :data-type "string",
     :commons
     {"{:select [[[[:min :elapsed]] :elapsed] :started], :refresh-every 10, :cache? false, :connection-id \"flows-db\", :from [{:select [:client_name :elapsed :ended :flow_id :human_elapsed :in_error :started :ts], :limit 45, :from [[:flow_history :mm134]], :where [:= :flow_id \"openai-image-gen-ladder\"]}], :group-by [:started]}"
      1,
      "{:select [[[[:min :elapsed]] :elapsed] :started], :refresh-every 10, :cache? false, :connection-id \"flows-db\", :from [{:select [:client_name :elapsed :ended :flow_id :human_elapsed :in_error :started :ts], :order-by [[:started :desc]], :limit 45, :from [[:flow_history :mm134]], :where [:= :flow_id \"openai-image-gen-ladder\"]}], :group-by [:started]}"
      1},
     :distinct 2,
     :group-by? true,
     :median
     "{:select [[[[:min :elapsed]] :elapsed] :started], :refresh-every 10, :cache? false, :connection-id \"flows-db\", :from [{:select [:client_name :elapsed :ended :flow_id :human_elapsed :in_error :started :ts], :limit 45, :from [[:flow_history :mm134]], :where [:= :flow_id \"openai-image-gen-ladder\"]}], :group-by [:started]}",
     :max
     "{:select [[[[:min :elapsed]] :elapsed] :started], :refresh-every 10, :cache? false, :connection-id \"flows-db\", :from [{:select [:client_name :elapsed :ended :flow_id :human_elapsed :in_error :started :ts], :order-by [[:started :desc]], :limit 45, :from [[:flow_history :mm134]], :where [:= :flow_id \"openai-image-gen-ladder\"]}], :group-by [:started]}",
     :avg
     "{:select [[[[:min :elapsed]] :elapsed] :started], :refresh-every 10, :cache? false, :connection-id \"flows-db\", :from [{:select [:client_name :elapsed :ended :flow_id :human_elapsed :in_error :started :ts], :order-by [[:started :desc]], :limit 45, :from [[:flow_history :mm134]], :where [:= :flow_id \"openai-image-gen-ladder\"]}], :group-by [:started]} (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 2},
  :gen-viz-363
  {:fields
   {:fips_state_code
    {:min "",
     :data-type "integer",
     :commons {49 1, 8 1, 37 1},
     :distinct 51,
     :group-by? true,
     :median "34",
     :max "9",
     :avg " (non-numeric average)",
     :cardinality 100},
    :rows
    {:min 1,
     :data-type "integer",
     :commons {2 5, 3 3, 18 2},
     :distinct 39,
     :group-by? false,
     :median 28,
     :max 780,
     :avg 48.745098039215684,
     :cardinality 76}},
   :database-type "SQLite",
   :rowcount 51},
  :tmp--778794917-hist-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :shows-drag-525
  {:fields
   {:location
    {:min "Abilene, TX",
     :data-type "string",
     :commons {"San Francisco, CA" 15, "Seattle, WA" 7, "Dallas, TX" 7},
     :distinct 274,
     :group-by? true,
     :median "Madrid, Spain",
     :max "Zaragoza, Spain",
     :avg "Madison, WI (non-numeric average)",
     :cardinality 54},
    :show_date
    {:min "1982-06-05",
     :data-type "string",
     :commons {"1983-08-24" 1, "1998-04-07" 1, "1992-06-25" 1},
     :distinct 500,
     :group-by? true,
     :median "1996-07-27",
     :max "2023-09-01",
     :avg "1991-10-30 (non-numeric average)",
     :cardinality 100},
    :show_id
    {:min "https://www.metallica.com/tour/1982-06-05-anaheim-california.html",
     :data-type "string",
     :commons
     {"https://www.metallica.com/tour/1983-08-24-austin-texas.html" 1,
      "https://www.metallica.com/tour/1989-06-18-grand-forks-north-dakota.html" 1,
      "https://www.metallica.com/tour/2022-07-03-bilbao-spain.html" 1},
     :distinct 500,
     :group-by? true,
     :median "https://www.metallica.com/tour/1996-07-27-phoenix-arizona.html",
     :max "https://www.metallica.com/tour/2023-09-01-phoenix-arizona.html",
     :avg
     "https://www.metallica.com/tour/1991-10-30-madison-wisconsin.html (non-numeric average)",
     :cardinality 100},
    :show_name
    {:min "Abilene Civic Center",
     :data-type "string",
     :commons {"Sonisphere" 7, "Lollapalooza" 6, "Monsters of Rock" 6},
     :distinct 406,
     :group-by? true,
     :median "Mt. Smart Stadium",
     :max "iWireless Center",
     :avg "Dane County Coliseum (non-numeric average)",
     :cardinality 81},
    :title
    {:min "1982-06-05 Anaheim, CA",
     :data-type "string",
     :commons
     {"2010-09-22 Christchurch, New Zealand" 1,
      "1991-10-30 Madison, WI" 1,
      "2012-06-09 Castle Donington, England" 1},
     :distinct 500,
     :group-by? true,
     :median "1996-07-27 Phoenix, AZ",
     :max "2023-09-01 Phoenix, AZ ",
     :avg "1991-10-30 Madison, WI (non-numeric average)",
     :cardinality 100},
    :tour_name
    {:min "",
     :data-type "string",
     :commons {nil 103, "Damaged Justice" 55, "Wherever We May Roam" 54},
     :distinct 31,
     :group-by? true,
     :median "Madly In Anger With The World",
     :max "WorldWired",
     :avg "Wherever We May Roam (non-numeric average)",
     :cardinality 6}},
   :database-type "SQLite",
   :rowcount 500},
  :clover-fn
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 2,
     :group-by? true,
     :commons {},
     :cardinality 100}},
   :rowcount 2},
  :tmp--1922307764-hist-sys
  {:fields
   {:kp
    {:min "[:block-3020 :views :param-val-1]",
     :data-type "string",
     :commons {"[:block-3020 :views :param-val-1]" 1},
     :distinct 1,
     :group-by? true,
     :median "[:block-3020 :views :param-val-1]",
     :max "[:block-3020 :views :param-val-1]",
     :avg "[:block-3020 :views :param-val-1] (non-numeric average)",
     :cardinality 100},
    :key
    {:min ":param-val-1",
     :data-type "string",
     :commons {":param-val-1" 1},
     :distinct 1,
     :group-by? true,
     :median ":param-val-1",
     :max ":param-val-1",
     :avg ":param-val-1 (non-numeric average)",
     :cardinality 100},
    :updated
    {:min "2024-09-01 21:39:30",
     :data-type "string",
     :commons {"2024-09-01 21:39:30" 1},
     :distinct 1,
     :group-by? true,
     :median "2024-09-01 21:39:30",
     :max "2024-09-01 21:39:30",
     :avg "2024-09-01 21:39:30 (non-numeric average)",
     :cardinality 100},
    :type
    {:min ":views",
     :data-type "string",
     :commons {":views" 1},
     :distinct 1,
     :group-by? true,
     :median ":views",
     :max ":views",
     :avg ":views (non-numeric average)",
     :cardinality 100},
    :panel_key
    {:min ":block-3020",
     :data-type "string",
     :commons {":block-3020" 1},
     :distinct 1,
     :group-by? true,
     :median ":block-3020",
     :max ":block-3020",
     :avg ":block-3020 (non-numeric average)",
     :cardinality 100},
    :diff_kp
    {:min
     "([0 1 1 1 :new :src] [0 1 1 1 :new :src] [0 1 1 1 :new :width] [0 1 1 1 :new :width] [0 1 1 1 :new] [0 1 1 1 :old] [0 1 1 1 :old] [0 1 1 1] [0 1 1 0] [0 1 1 0] [0 1 1] [0 1 0 1 :new] [0 1 0 1 :new] [0 1 0 1 :old] [0 1 0 1 :old] [0 1 0 1] [0 1 0 0] [0 1 0 0] [0 1 0] [0 1] [0 0] [0 0] [0])",
     :data-type "string",
     :commons
     {"([0 1 1 1 :new :src] [0 1 1 1 :new :src] [0 1 1 1 :new :width] [0 1 1 1 :new :width] [0 1 1 1 :new] [0 1 1 1 :old] [0 1 1 1 :old] [0 1 1 1] [0 1 1 0] [0 1 1 0] [0 1 1] [0 1 0 1 :new] [0 1 0 1 :new] [0 1 0 1 :old] [0 1 0 1 :old] [0 1 0 1] [0 1 0 0] [0 1 0 0] [0 1 0] [0 1] [0 0] [0 0] [0])"
      1},
     :distinct 1,
     :group-by? true,
     :median
     "([0 1 1 1 :new :src] [0 1 1 1 :new :src] [0 1 1 1 :new :width] [0 1 1 1 :new :width] [0 1 1 1 :new] [0 1 1 1 :old] [0 1 1 1 :old] [0 1 1 1] [0 1 1 0] [0 1 1 0] [0 1 1] [0 1 0 1 :new] [0 1 0 1 :new] [0 1 0 1 :old] [0 1 0 1 :old] [0 1 0 1] [0 1 0 0] [0 1 0 0] [0 1 0] [0 1] [0 0] [0 0] [0])",
     :max
     "([0 1 1 1 :new :src] [0 1 1 1 :new :src] [0 1 1 1 :new :width] [0 1 1 1 :new :width] [0 1 1 1 :new] [0 1 1 1 :old] [0 1 1 1 :old] [0 1 1 1] [0 1 1 0] [0 1 1 0] [0 1 1] [0 1 0 1 :new] [0 1 0 1 :new] [0 1 0 1 :old] [0 1 0 1 :old] [0 1 0 1] [0 1 0 0] [0 1 0 0] [0 1 0] [0 1] [0 0] [0 0] [0])",
     :avg
     "([0 1 1 1 :new :src] [0 1 1 1 :new :src] [0 1 1 1 :new :width] [0 1 1 1 :new :width] [0 1 1 1 :new] [0 1 1 1 :old] [0 1 1 1 :old] [0 1 1 1] [0 1 1 0] [0 1 1 0] [0 1 1] [0 1 0 1 :new] [0 1 0 1 :new] [0 1 0 1 :old] [0 1 0 1 :old] [0 1 0 1] [0 1 0 0] [0 1 0 0] [0 1 0] [0 1] [0 0] [0 0] [0]) (non-numeric average)",
     :cardinality 100},
    :client_name
    {:min ":calm-lemon-buffalo-14",
     :data-type "string",
     :commons {":calm-lemon-buffalo-14" 1},
     :distinct 1,
     :group-by? true,
     :median ":calm-lemon-buffalo-14",
     :max ":calm-lemon-buffalo-14",
     :avg ":calm-lemon-buffalo-14 (non-numeric average)",
     :cardinality 100},
    :pre_data
    {:min
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:string :flow/openai-image-gen-ladder>:relative-url-path-for-png-version]]",
     :data-type "string",
     :commons
     {"[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:string :flow/openai-image-gen-ladder>:relative-url-path-for-png-version]]"
      1},
     :distinct 1,
     :group-by? true,
     :median
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:string :flow/openai-image-gen-ladder>:relative-url-path-for-png-version]]",
     :max
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:string :flow/openai-image-gen-ladder>:relative-url-path-for-png-version]]",
     :avg
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:string :flow/openai-image-gen-ladder>:relative-url-path-for-png-version]] (non-numeric average)",
     :cardinality 100},
    :diff
    {:min
     "[[10 [[0 {:old :string, :new :img}] [1 {:old :flow/openai-image-gen-ladder>:relative-url-path-for-png-version, :new {:width \"100%\", :src :flow/openai-image-gen-ladder>:relative-url-path-for-png-version}}]]]]",
     :data-type "string",
     :commons
     {"[[10 [[0 {:old :string, :new :img}] [1 {:old :flow/openai-image-gen-ladder>:relative-url-path-for-png-version, :new {:width \"100%\", :src :flow/openai-image-gen-ladder>:relative-url-path-for-png-version}}]]]]"
      1},
     :distinct 1,
     :group-by? true,
     :median
     "[[10 [[0 {:old :string, :new :img}] [1 {:old :flow/openai-image-gen-ladder>:relative-url-path-for-png-version, :new {:width \"100%\", :src :flow/openai-image-gen-ladder>:relative-url-path-for-png-version}}]]]]",
     :max
     "[[10 [[0 {:old :string, :new :img}] [1 {:old :flow/openai-image-gen-ladder>:relative-url-path-for-png-version, :new {:width \"100%\", :src :flow/openai-image-gen-ladder>:relative-url-path-for-png-version}}]]]]",
     :avg
     "[[10 [[0 {:old :string, :new :img}] [1 {:old :flow/openai-image-gen-ladder>:relative-url-path-for-png-version, :new {:width \"100%\", :src :flow/openai-image-gen-ladder>:relative-url-path-for-png-version}}]]]] (non-numeric average)",
     :cardinality 100},
    :data
    {:min
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:img {:width \"100%\", :src :flow/openai-image-gen-ladder>:relative-url-path-for-png-version}]]",
     :data-type "string",
     :commons
     {"[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:img {:width \"100%\", :src :flow/openai-image-gen-ladder>:relative-url-path-for-png-version}]]"
      1},
     :distinct 1,
     :group-by? true,
     :median
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:img {:width \"100%\", :src :flow/openai-image-gen-ladder>:relative-url-path-for-png-version}]]",
     :max
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:img {:width \"100%\", :src :flow/openai-image-gen-ladder>:relative-url-path-for-png-version}]]",
     :avg
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:img {:width \"100%\", :src :flow/openai-image-gen-ladder>:relative-url-path-for-png-version}]] (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 1},
  :tmp--699927626-hist-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :flow-fn-all-sys
  {:fields
   {:name
    {:min ":*",
     :data-type "string",
     :commons {":=" 1, ":>=" 1, ":write-file" 1},
     :distinct 34,
     :group-by? true,
     :median ":get-colors",
     :max ":write-file",
     :avg ":* (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 34}},
 :default-col-widths
 {:block-10812 {:OFFENSE-CODE-GROUP-drag-21 180},
  :block-10518 {:NAME-drag-37 155},
  :system-connections-list* {:connections-sys 126},
  :block-8473 {:client-memory-drag-36 123},
  :system-fields-list* {:fields-sys 170},
  :files-list* {:files-sys 170},
  :block-11793 {:STREET-drag-11 180},
  :block-984 {:OFFENSE-CODE-GROUP-drag-40 100},
  :blocks-list* {:blocks-sys 127},
  :block-6800 {:offenses-drag-9 103},
  :system-tables-list* {:tables-sys 133},
  :block-10504 {:offense-codes-drag-1 105},
  :block-12128 {:NAME-drag-37 155},
  :block-8590 {:bigfoot-sightings-drag-35 100},
  :block-11160 {:rowcnt-drag-21 161}},
 :runstream-drops nil,
 :tabs
 ["strategic grill locations"
  "poor touring me"
  "boston pd districts"
  "sasquath by state / class / season"
  "tree of victor-y"
  "affluent grasshopper"],
 :selected-cols {},
 :server {:settings nil},
 :runstreams {},
 :editor? false,
 :buffy? false,
 :valid-kits
 {[:clojure :export-to-csv]
  [[nil :queries nil]
   [:reco-preview :queries :query-preview]
   [:block-1152 :queries :gen-viz-516]
   [:block-9240 :queries :new-clojure-sqlized]
   [:block-724 :queries :gen-viz-1022]
   [:block-86 :queries :new-clojure-sqlized]
   [:block-10812 :queries :OFFENSE-CODE-GROUP-drag-21]
   [:block-496 :queries :gen-viz-507]
   [:block-10518 :queries :NAME-drag-37]
   [:block-9201 :queries :new-clojure-1-sqlized]
   [:block-8473 :queries :client-memory-drag-36]
   [:block-3284 :queries :new-clojure-2-sqlized]
   [:block-407 :queries :gen-viz-544]
   [:block-11793 :queries :STREET-drag-11]
   [:block-984 :queries :OFFENSE-CODE-GROUP-drag-40]
   [:block-6800 :queries :offenses-drag-9]
   [:block-10504 :queries :offense-codes-drag-1]
   [:block-12128 :queries :NAME-drag-37]
   [:block-8590 :queries :bigfoot-sightings-drag-35]
   [:block-11160 :queries :rowcnt-drag-21]],
  [:clojure :count-map-keys] [],
  [:clojure :new-lundberg] [[:* :* :*]],
  [:clojure :view-lundberg]
  [[:block-1084 :views :hare-vw-8]
   [:block-4780 :views :flow-play-runstreamed]
   [:reco-preview :views :oz]
   [:block-1152 :views :every-45-seconds]
   [:block-6330 :views :hi]
   [:block-3341 :views :hi]
   [:block-9240 :views :hi]
   [:block-9240 :views :stack]
   [:block-1285 :views :poised-maroon-fly]
   [:block-724 :views :reech]
   [:block-5402 :views :hare-vw]
   [:block-4970 :views :hare-vw-3]
   [:block-9973 :views :hare-vw-2]
   [:block-4733 :views :hare-vw-7]
   [:block-496 :views :oz]
   [:block-11523 :views :sub-0]
   [:block-4719 :views :hare-vw-3]
   [:block-3904 :views :reech]
   [:block-8499 :views :hare-vw]
   [:block-8473 :views :hi]
   [:block-8473 :views :stack]
   [:block-482 :views :hare-vw-16]
   [:hello-there-brother :views :heya!]
   [:block-8563 :views :hi]
   [:block-7234 :views :hare-vw-5]
   [:block-9709 :views :hare-vw-17]
   [:block-203 :views :hi]
   [:block-10760 :views :hare-vw-14]
   [:block-7845 :views :hare-vw-4]
   [:block-11130 :views :hare-vw-2]
   [:block-407 :views :oz]
   [:block-8806 :views :hare-vw-1]
   [:block-1584 :views :hare-vw-6]
   [:block-5999 :views :hare-vw-1]
   [:block-1320 :views :hare-vw-9]
   [:block-8155 :views :genius-plum-coyote]
   [:block-3879 :views :hi]
   [:block-9482 :views :hare-vw-15]],
  [:clojure :gen-ev] [],
  [:outliers :get-outliers]
  [[nil :queries nil]
   [:reco-preview :queries :query-preview]
   [:block-1152 :queries :gen-viz-516]
   [:block-9240 :queries :new-clojure-sqlized]
   [:block-724 :queries :gen-viz-1022]
   [:block-86 :queries :new-clojure-sqlized]
   [:block-10812 :queries :OFFENSE-CODE-GROUP-drag-21]
   [:block-496 :queries :gen-viz-507]
   [:block-10518 :queries :NAME-drag-37]
   [:block-9201 :queries :new-clojure-1-sqlized]
   [:block-8473 :queries :client-memory-drag-36]
   [:block-3284 :queries :new-clojure-2-sqlized]
   [:block-407 :queries :gen-viz-544]
   [:block-11793 :queries :STREET-drag-11]
   [:block-984 :queries :OFFENSE-CODE-GROUP-drag-40]
   [:block-6800 :queries :offenses-drag-9]
   [:block-10504 :queries :offense-codes-drag-1]
   [:block-12128 :queries :NAME-drag-37]
   [:block-8590 :queries :bigfoot-sightings-drag-35]
   [:block-11160 :queries :rowcnt-drag-21]]},
 :memory [224644044 202068264 4294705152],
 :sched {:gen-viz-516 164, :client-memory-drag-36 164},
 :client-name :wealthy-magenta-beaver-27,
 :flow-editor? true,
 :window {:w 2236, :h 1342},
 :implicit-rowsets {:solver [:new-clojure nil]},
 :post-meta
 {:fields-sys
  {:* {:rowcount 26},
   :field_name {:distinct 26},
   :field_type {:distinct 5},
   :data_type {:distinct 5}},
  :files-sys
  {:* {:rowcount 18},
   :file_path {:distinct 17},
   :screen_name {:distinct 12},
   :blocks {:distinct 10},
   :queries {:distinct 8},
   :ts {:distinct 6}},
  :blocks-sys
  {:* {:rowcount 70},
   :block_key {:distinct 70},
   :block_name {:distinct 61},
   :queries {:distinct 3},
   :views {:distinct 4},
   :block_data {:distinct 70},
   :view_names {:distinct 23},
   :query_names {:distinct 27}},
  :new-clojure-sqlized
  {:* {:rowcount 69}, :step_int {:distinct 69}, :step_val {:distinct 61}},
  :gen-viz-544
  {:* {:rowcount 7},
   :REPORTING_AREA {:distinct 7},
   :day_sqlite_DAY_OF_WEEK {:distinct 7}},
  :OFFENSE-CODE-GROUP-drag-21
  {:* {:rowcount 1}, :OFFENSE_CODE_GROUP {:distinct 1}, :rowcnt {:distinct 1}},
  :offense_codes {},
  :STREET-drag-11
  {:* {:rowcount 4658}, :STREET {:distinct 4657}, :rowcnt {:distinct 397}}},
 :flow-estimates
 {:blocks-sys {:times 0.002, :run-id :blocks-sys},
  :fields-sys {:times 0.001, :run-id :fields-sys},
  :client_memory {:times 0.008, :run-id :client_memory},
  :gen-viz-507 {:times 0.03, :run-id :gen-viz-507},
  :tables-sys {:times 0.018, :run-id :tables-sys},
  :OFFENSE-CODE-GROUP-drag-40 {:times 0.04, :run-id :OFFENSE-CODE-GROUP-drag-40},
  :raw-custom-override689825913
  {:times 0.167, :run-id :raw-custom-override689825913},
  :offenses-drag-9 {:times 0.071, :run-id :offenses-drag-9},
  :files-sys {:times 0.002, :run-id :files-sys},
  :OFFENSE-CODE-GROUP-drag-21 {:times 0.032, :run-id :OFFENSE-CODE-GROUP-drag-21},
  :bigfoot-sightings-drag-35 {:times 0.022, :run-id :bigfoot-sightings-drag-35},
  :raw-custom-override-793100426
  {:times 0.452, :run-id :raw-custom-override-793100426},
  :new-clojure-sqlized {:times 0.001, :run-id :new-clojure-sqlized},
  :gen-viz-1022 {:times 0.011, :run-id :gen-viz-1022},
  :STREET-drag-11 {:times 0.286, :run-id :STREET-drag-11},
  :rowcnt-drag-21 {:times 0.025, :run-id :rowcnt-drag-21},
  :raw-custom-override714264689
  {:times 0.017, :run-id :raw-custom-override714264689},
  :connections-sys {:times 0.001, :run-id :connections-sys},
  :gen-viz-544 {:times 0.031, :run-id :gen-viz-544},
  :raw-custom-override1070344508
  {:times 0.077, :run-id :raw-custom-override1070344508},
  :NAME-drag-37 {:times 0.002, :run-id :NAME-drag-37},
  :offense-codes-drag-1 {:times 0.003, :run-id :offense-codes-drag-1},
  :client-memory-drag-36 {:times 0.004, :run-id :client-memory-drag-36},
  :gen-viz-516 {:times 0.003, :run-id :gen-viz-516}},
 :status
 {:heartbeat
  {:kick
   [:solver/get-my-colors-1790973138
    :solver-status/wealthy-magenta-beaver-27>get-my-colors-1790973138>running?
    :kit/kicks>wealthy-magenta-beaver-27
    :flow-status/my-new-flow3587>*running?
    :solver/get-my-colors1909740824
    :solver-status/wealthy-magenta-beaver-27>get-my-colors1909740824>running?]},
  :alert1 {:alerts :alert2},
  :alert3 {:alerts :alert2},
  :alert2 {:alerts :alert2}},
 :screen-name "random-collection",
 :recos-page2 0,
 :selected-tab "tree of victor-y",
 :snapshots nil,
 :alerts
 [[[:box
    :style
    {:font-size "15px"}
    :child
    [:box
     :child
     "sent screen save request to server... Please wait."
     :style
     {:font-size "12px", :opacity 0.66}]]
   11
   0.5
   268
   -1247625457]],
 :recos-page 0,
 :rs-overrides-hashmap {},
 :base-sniff-queries
 {:bigfoot_sightings 302026766,
  :raw_custom_override86093687__block_86_clojure_new_clojure_ -1892756218,
  :raw_custom_override_793100426__block_86_clojure_new_clojure_ 1038642995,
  :client_memory -1981695802,
  :offenses -505802446,
  :offense_codes -1076692702,
  :raw_custom_override1589124350__block_9240_clojure_new_clojure_ 1893543296,
  :raw_custom_override1070344508__block_9240_clojure_new_clojure_ 1252677210},
 :user-params-hash -313742712,
 :grid-recos? true,
 :session-hash 360541714,
 :resolved-queries
 {nil {:_last-run "09:56:35"},
  :season-drag-828
  {:select [:season [[:count 1] :rowcnt]],
   :from
   [[{:select
      [:alsonoticed
       :bfroid
       :class
       :county
       :cty_abbrev
       :cty_name
       :date
       :environment
       :fips_county_code
       :fips_state_code
       :fixed_month
       :fixed_year
       :housing_units
       :land_area
       :latitude
       :locationdetails
       :longitude
       :month
       :nearestroad
       :nearesttown
       :observed
       :otherstories
       :otherwitnesses
       :population
       :run_id
       :run_time
       :season
       :state
       :state_abbrev
       :state_name
       :submitted
       :submitted_date
       :timeandconditions
       :title
       :url
       :water_area
       :year
       :zip_lat
       :zip_long
       :zip_name
       :zipcode],
      :from [[:bigfoot_sightings_locations :kk67]],
      :where [:= :class "Class A"]}
     :dd830]],
   :group-by [:season],
   :order-by [[:rowcnt :desc]]},
  :OFFENSE-CODE-GROUP-drag-327
  {:select [:OFFENSE_CODE_GROUP [[:count 1] :rowcnt]],
   :from
   [[{:select
      [:DAY_OF_WEEK
       :DISTRICT
       :HOUR
       :INCIDENT_NUMBER
       :Lat
       :Location
       :Long
       :MONTH
       :OCCURRED_ON_DATE
       :OFFENSE_CODE
       :OFFENSE_CODE_GROUP
       :OFFENSE_DESCRIPTION
       :REPORTING_AREA
       :SHOOTING
       :STREET
       :UCR_PART
       :YEAR],
      :from [[:offenses :yy713]],
      :where [:= :DISTRICT "B2"]}
     :qq486]],
   :group-by [:OFFENSE_CODE_GROUP],
   :order-by [[:rowcnt :desc]]},
  :offenses-drag-DISTRICT-260
  {:select [:DISTRICT [[:count 1] :rowcnt]],
   :from [[:offenses :hh24]],
   :group-by [:DISTRICT],
   :order-by [[:rowcnt :desc]]},
  :gen-viz-49
  {:select-distinct [:Lat :Long :DISTRICT],
   :from
   [{:select
     [:DAY_OF_WEEK
      :DISTRICT
      :HOUR
      :INCIDENT_NUMBER
      :Lat
      :Location
      :Long
      :MONTH
      :OCCURRED_ON_DATE
      :OFFENSE_CODE
      :OFFENSE_CODE_GROUP
      :OFFENSE_DESCRIPTION
      :REPORTING_AREA
      :SHOOTING
      :STREET
      :UCR_PART
      :YEAR],
     :from [[:offenses :yy713]],
     :where [:= :DISTRICT "B2"]}]},
  :albums-drag-289
  {:select [:album_name :img_300 :img_640 :popularity :release_date],
   :from [[:albums :gg872]]},
  :gen-viz-821
  {:select [[[:count 1] :rows] :tour_name],
   :from
   [{:select [:location :show_date :show_id :show_name :title :tour_name],
     :from [[:shows :cc542]]}],
   :group-by [:tour_name]},
  :bigfoot-sightings-locations-drag-305
  {:select
   [:alsonoticed
    :bfroid
    :class
    :county
    :cty_abbrev
    :cty_name
    :date
    :environment
    :fips_county_code
    :fips_state_code
    :fixed_month
    :fixed_year
    :housing_units
    :land_area
    :latitude
    :locationdetails
    :longitude
    :month
    :nearestroad
    :nearesttown
    :observed
    :otherstories
    :otherwitnesses
    :population
    :run_id
    :run_time
    :season
    :state
    :state_abbrev
    :state_name
    :submitted
    :submitted_date
    :timeandconditions
    :title
    :url
    :water_area
    :year
    :zip_lat
    :zip_long
    :zip_name
    :zipcode],
   :from [[:bigfoot_sightings_locations :kk67]],
   :where [:= :class "Class A"]},
  :gen-viz-987
  {:select [[[:count 1] :rows] :YEAR],
   :from
   [{:select
     [:DAY_OF_WEEK
      :DISTRICT
      :HOUR
      :INCIDENT_NUMBER
      :Lat
      :Location
      :Long
      :MONTH
      :OCCURRED_ON_DATE
      :OFFENSE_CODE
      :OFFENSE_CODE_GROUP
      :OFFENSE_DESCRIPTION
      :REPORTING_AREA
      :SHOOTING
      :STREET
      :UCR_PART
      :YEAR],
     :from [[:offenses :yy713]],
     :where [:= :DISTRICT "B2"]}],
   :group-by [:YEAR]},
  :gen-viz-1217
  {:select
   [[[:min :Long] :min-long]
    [[:max :Long] :max-long]
    [[:min :Lat] :min-lat]
    [[:max :Lat] :max-lat]
    [[:avg :Lat] :a-lat]
    [[:avg :Long] :a-long]
    [[:round [:raw ["(" [:max :Long] " - " [:min :Long] ") * 55"]] 2] :long_diff]
    [[:round [:raw ["(" [:max :Lat] " - " [:min :Lat] ") * 55"]] 2] :lat_diff]],
   :from
   [{:select
     [:DAY_OF_WEEK
      :DISTRICT
      :HOUR
      :INCIDENT_NUMBER
      :Lat
      :Location
      :Long
      :MONTH
      :OCCURRED_ON_DATE
      :OFFENSE_CODE
      :OFFENSE_CODE_GROUP
      :OFFENSE_DESCRIPTION
      :REPORTING_AREA
      :SHOOTING
      :STREET
      :UCR_PART
      :YEAR],
     :from [[:offenses :yy713]],
     :where [:= :DISTRICT "B2"]}],
   :where [:and [:<> :Lat -1] [:<> :Lat nil] [:<> :Long -1] [:<> :Long nil]]},
  :offenses-drag-761
  {:select
   [:DAY_OF_WEEK
    :DISTRICT
    :HOUR
    :INCIDENT_NUMBER
    :Lat
    :Location
    :Long
    :MONTH
    :OCCURRED_ON_DATE
    :OFFENSE_CODE
    :OFFENSE_CODE_GROUP
    :OFFENSE_DESCRIPTION
    :REPORTING_AREA
    :SHOOTING
    :STREET
    :UCR_PART
    :YEAR],
   :from [[:offenses :yy713]],
   :where [:= :DISTRICT "B2"]},
  :bigfoot-sightings-locations-drag-class-428
  {:select [:class [[:count 1] :rowcnt]],
   :from [[:bigfoot_sightings_locations :ff215]],
   :group-by [:class],
   :order-by [[:rowcnt :desc]]},
  :tour-name-drag-420
  {:select [:tour_name [[:count 1] :rowcnt]],
   :from
   [[{:select [:location :show_date :show_id :show_name :title :tour_name],
      :from [[:shows :cc542]]}
     :pp438]],
   :group-by [:tour_name],
   :order-by [[:rowcnt :desc]]},
  :tmp--1854238739-hist-sys {:_last-run "07:53:40"},
  :gen-viz-363
  {:select [:fips_state_code [[:count 1] :rows]],
   :from
   [{:select
     [:alsonoticed
      :bfroid
      :class
      :county
      :cty_abbrev
      :cty_name
      :date
      :environment
      :fips_county_code
      :fips_state_code
      :fixed_month
      :fixed_year
      :housing_units
      :land_area
      :latitude
      :locationdetails
      :longitude
      :month
      :nearestroad
      :nearesttown
      :observed
      :otherstories
      :otherwitnesses
      :population
      :run_id
      :run_time
      :season
      :state
      :state_abbrev
      :state_name
      :submitted
      :submitted_date
      :timeandconditions
      :title
      :url
      :water_area
      :year
      :zip_lat
      :zip_long
      :zip_name
      :zipcode],
     :from [[:bigfoot_sightings_locations :kk67]],
     :where [:= :class "Class A"]}],
   :group-by [:fips_state_code]},
  :shows-drag-525
  {:select [:location :show_date :show_id :show_name :title :tour_name],
   :from [[:shows :cc542]]},
  :tmp--699927626-hist-sys {:_last-run "07:53:32"}},
 :panels
 {nil
  {:queries
   {:tmp--699927626-hist-sys {:_last-run "07:53:32"},
    :tmp--1854238739-hist-sys {:_last-run "07:53:40"},
    nil {:_last-run "09:56:35"}}},
  :block-356
  {:name "basic_v_bar - rows, tour_name - 1232",
   :w 12,
   :root [1 15],
   :h 9,
   :connection-id "met-on-tour",
   :queries
   {:gen-viz-821
    {:select [[[:count 1] :rows] :tour_name],
     :from [:query/shows-drag-525],
     :group-by [:tour_name]}},
   :tab "poor touring me",
   :conditionals nil,
   :views
   {:oz
    [:vega-lite
     {:layer
      [{:encoding
        {:y {:field :tour_name, :type "ordinal"},
         :x {:aggregate "sum", :field :rows, :type "quantitative"},
         :row {:field nil, :legend nil},
         :size {:legend nil},
         :shape {:legend nil},
         :column {:field nil, :legend nil},
         :color
         {:scale :theme/vega-default-color-scheme,
          :legend nil,
          :field 1,
          :type "ordinal"}},
        :mark {:type "bar", :tooltip {:content "encoding"}}}],
      :data {:values :gen-viz-821},
      :config :theme/vega-defaults,
      :width "container",
      :height :panel-height,
      :padding 4,
      :background "transparent"}
     {:actions false}]}},
  :block-5567
  {:h 5,
   :w 8,
   :connection-id "bigfoot-ufos",
   :name "drag-from-select-all-bigfoot_sightings_locations",
   :queries
   {:season-drag-828
    {:select [:season [[:count 1] :rowcnt]],
     :from [[:query/bigfoot-sightings-locations-drag-305 :dd830]],
     :group-by [:season],
     :order-by [[:rowcnt :desc]]}},
   :root [16 12],
   :tab "sasquath by state / class / season"},
  :block-8804
  {:h 2,
   :w 10,
   :tab "poor touring me",
   :root [26 1],
   :name "block-8804",
   :views
   {:param
    [:box
     :align
     :center
     :justify
     :center
     :padding
     "8px"
     :style
     {:font-size "31px"}
     :child
     [:string :albums-drag-289/release_date]]},
   :queries {}},
  :block-757
  {:name "point_map_colors - DISTRICT, Lat, Long - 26",
   :w 16,
   :root [10 8],
   :h 9,
   :connection-id "boston-crime",
   :queries
   {:gen-viz-49
    {:select-distinct [:Lat :Long :DISTRICT], :from [:query/offenses-drag-761]},
    :gen-viz-1217
    {:select
     [[[:min :Long] :min-long]
      [[:max :Long] :max-long]
      [[:min :Lat] :min-lat]
      [[:max :Lat] :max-lat]
      [[:avg :Lat] :a-lat]
      [[:avg :Long] :a-long]
      [[:round [:raw ["(" [:max :Long] " - " [:min :Long] ") * 55"]] 2] :long_diff]
      [[:round [:raw ["(" [:max :Lat] " - " [:min :Lat] ") * 55"]] 2] :lat_diff]],
     :from [:query/offenses-drag-761],
     :where [:and [:<> :Lat -1] [:<> :Lat nil] [:<> :Long -1] [:<> :Long nil]]}},
   :tab "boston pd districts",
   :conditionals
   {:c843-country-lines? true,
    :c291-us-counties? false,
    :c632-us-states? false,
    :c875-geo-background? true},
   :views
   {:oz
    [:box
     :child
     [:vega-lite
      {:width "container",
       :height :panel-height+50,
       :autosize "none",
       :padding {:top 0, :bottom 0, :left 0, :right 0},
       :params
       [{:name "tx", :expr "width/2"}
        {:name "ty", :expr "height/2"}
        {:name "zoom_precise",
         :value 13,
         :bind {:input "range", :min 2, :max 30, :step 0.05}}
        {:name "centerY",
         :value :gen-viz-1217/a_lat.0,
         :bind
         {:input "range",
          :min :gen-viz-1217/min_lat.0,
          :max :gen-viz-1217/max_lat.0,
          :full-min -60,
          :full-max 60,
          :step 1.0E-6}}
        {:name "centerX",
         :value :gen-viz-1217/a_long.0,
         :bind
         {:input "range",
          :min :gen-viz-1217/min_long.0,
          :max :gen-viz-1217/max_long.0,
          :full-min -180,
          :full-max 180,
          :step 1.0E-6}}
        {:name "baseTileSize", :value 256}
        {:name "tileUrl", :value "https://a.tile.openstreetmap.org/"}
        {:name "zoom", :expr "ceil(zoom_precise)"}
        {:name "tilesCount", :expr "pow(2,zoom)"}
        {:name "tileSize", :expr "baseTileSize*pow(2,zoom_precise-zoom)"}
        {:name "maxTiles", :expr "ceil(max(height,width)/tileSize +1)"}
        {:name "basePoint", :expr "invert('projection',[0,0])"}
        {:name "dii", :expr "((basePoint[0]+180)/360*tilesCount)"}
        {:name "di", :expr "floor(dii)"}
        {:name "dx", :expr "round((floor(dii)-dii)*tileSize)"}
        {:name "djj",
         :expr
         "((1-log(tan(basePoint[1]*PI/180) + 1/cos(basePoint[1]*PI/180))/PI)/2 *tilesCount)"}
        {:name "dj", :expr "floor(djj)"}
        {:name "dy", :expr "round((floor(djj)-djj)*tileSize)"}
        {:name "scale", :expr "baseTileSize * pow(2,zoom_precise) / (2 * PI)"}],
       :layer
       [[:if
         :condi/c875-geo-background?
         {:data
          {:name "tile_list",
           :sequence {:start 0, :stop {:signal "maxTiles"}, :as "a"}},
          :transform
          [{:calculate "sequence(0,maxTiles)", :as "b"}
           {:flatten ["b"]}
           {:calculate
            "tileUrl+zoom+'/'+(datum.a+di+tilesCount)%tilesCount+'/'+((datum.b+dj))+'.png'",
            :as "url"}
           {:calculate "(datum.a * tileSize + dx)+(tileSize/2)", :as "x"}
           {:calculate "(datum.b * tileSize + dy)+(tileSize/2)", :as "y"}],
          :mark
          {:type "image",
           :opacity 0.5,
           :background "#000000",
           :fill "#000000",
           :width {:signal "tileSize"},
           :height {:signal "tileSize"}},
          :encoding
          {:x {:field "x", :type "quantitative", :scale nil},
           :y {:field "y", :type "quantitative", :scale nil},
           :url {:field "url", :type "nominal"}}}
         {:mark "geoshape",
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]}}]
        {:data {:values :gen-viz-49},
         :projection
         {:type "mercator",
          :scale {:expr "scale"},
          :center [{:signal "centerX"} {:signal "centerY"}],
          :translate [{:signal "tx"} {:signal "ty"}]},
         :mark {:type "circle"},
         :encoding
         {:latitude {:field :Lat, :type "quantitative"},
          :size {:field nil, :type "quantitative"},
          :color
          {:field :DISTRICT, :scale {:scheme "redyellowgreen"}, :type "nominal"},
          :longitude {:field :Long, :type "quantitative"}},
         :background "transparent"}
        [:if
         :condi/c291-us-counties?
         {:data
          {:name "us-counties",
           :url
           "assets/vega/us-10m.json",
           :format {:type "topojson", :feature "counties"}},
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]},
          :mark "geoshape",
          :encoding
          {:fill {:value "#a500ff22"},
           :fillOpacity {:value 0.5},
           :stroke {:value "#FFA50022"},
           :strokeWidth {:value 2}},
          :background "transparent"}
         {:mark "geoshape",
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]}}]
        [:if
         :condi/c632-us-states?
         {:data
          {:name "us-states",
           :url
           "assets/vega/us-10m.json",
           :format {:type "topojson", :feature "states"}},
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]},
          :mark "geoshape",
          :encoding
          {:fill {:value "#FFA50044"},
           :fillOpacity {:value 0.1},
           :stroke {:value "#FFA50044"},
           :strokeWidth {:value 2}},
          :background "transparent"}
         {:mark "geoshape",
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]}}]
        [:if
         :condi/c843-country-lines?
         {:data
          {:name "world",
           :url "assets/vega/world-110m.json",
           :format {:type "topojson", :feature "countries"}},
          :mark "geoshape",
          :encoding
          {:fill {:value "#FFA500"},
           :fillOpacity {:value 0.1},
           :stroke {:value "#FFA500"},
           :strokeWidth {:value 2}},
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]}}
         {:mark "geoshape",
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]}}]],
       :background "transparent",
       :config {:view {:stroke "transparent"}}}
      {:actions false}]]}},
  :block-6541
  {:h 21,
   :w 10,
   :root [3 2],
   :tab "tree of victor-y",
   :selected-view :hare-vw-1,
   :name "block-6541",
   :views {:hare-vw-1 [:scrubber [:param]]},
   :queries {}},
  :block-3889
  {:h 9,
   :w 12,
   :root [25 2],
   :tab "strategic grill locations",
   :name "block-3889",
   :views
   {:hi
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "21px",
      :font-weight 200,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     [:div
      "\"An escalator can never break: it can only become stairs.\""
      [:br]
      [:br]
      "\"You should never see an Escalator Temporarily Out Of Order sign, just... "
      [:br]
      [:br]
      [:span
       {:style {:font-weight 700, :font-size "36px"}}
       " Escalator Temporarily Stairs."]
      [:br]
      [:br]
      [:i]
      "Sorry for the convenience."]]},
   :queries {}},
  :block-8873
  {:h 7,
   :w 35,
   :connection-id "bigfoot-ufos",
   :name "select-all-bigfoot_sightings_locations",
   :queries
   {:bigfoot-sightings-locations-drag-305
    {:select
     [:alsonoticed
      :bfroid
      :class
      :county
      :cty_abbrev
      :cty_name
      :date
      :environment
      :fips_county_code
      :fips_state_code
      :fixed_month
      :fixed_year
      :housing_units
      :land_area
      :latitude
      :locationdetails
      :longitude
      :month
      :nearestroad
      :nearesttown
      :observed
      :otherstories
      :otherwitnesses
      :population
      :run_id
      :run_time
      :season
      :state
      :state_abbrev
      :state_name
      :submitted
      :submitted_date
      :timeandconditions
      :title
      :url
      :water_area
      :year
      :zip_lat
      :zip_long
      :zip_name
      :zipcode],
     :from [[:bigfoot_sightings_locations :kk67]],
     :where [:= :class :bigfoot-sightings-locations-drag-class-428/class]}},
   :root [1 1],
   :tab "sasquath by state / class / season"},
  :block-5404
  {:h 8,
   :w 9,
   :connection-id "met-on-tour",
   :name "drag-from-select-all-shows",
   :queries
   {:tour-name-drag-420
    {:select [:tour_name [[:count 1] :rowcnt]],
     :from [[:query/shows-drag-525 :pp438]],
     :group-by [:tour_name],
     :order-by [[:rowcnt :desc]]}},
   :root [13 15],
   :tab "poor touring me"},
  :block-7979
  {:h 7,
   :w 7,
   :tab "poor touring me",
   :root [19 1],
   :name "block-7979",
   :views
   {:param
    [:box
     :align
     :center
     :justify
     :center
     :padding
     "13px"
     :style
     {:font-size "45px"}
     :child
     [:img {:src :albums-drag-289/img_640, :width "100%"}]]},
   :queries {}},
  :block-7822
  {:h 7,
   :w 27,
   :connection-id "boston-crime",
   :name "select-all-offenses",
   :queries
   {:offenses-drag-761
    {:select
     [:DAY_OF_WEEK
      :DISTRICT
      :HOUR
      :INCIDENT_NUMBER
      :Lat
      :Location
      :Long
      :MONTH
      :OCCURRED_ON_DATE
      :OFFENSE_CODE
      :OFFENSE_CODE_GROUP
      :OFFENSE_DESCRIPTION
      :REPORTING_AREA
      :SHOOTING
      :STREET
      :UCR_PART
      :YEAR],
     :from [[:offenses :yy713]],
     :where [:= :DISTRICT :offenses-drag-DISTRICT-260/DISTRICT]}},
   :root [1 1],
   :tab "boston pd districts"},
  :block-9849
  {:h 5,
   :w 10,
   :tab "poor touring me",
   :root [26 3],
   :name "block-9849",
   :views
   {:param
    [:box
     :align
     :center
     :justify
     :center
     :padding
     "9px"
     :style
     {:font-size "25px"}
     :child
     [:string :albums-drag-289/album_name]]},
   :queries {}},
  :block-7210
  {:h 9,
   :w 7,
   :connection-id "boston-crime",
   :name "drag-from-select-all-offenses",
   :queries
   {:OFFENSE-CODE-GROUP-drag-327
    {:select [:OFFENSE_CODE_GROUP [[:count 1] :rowcnt]],
     :from [[:query/offenses-drag-761 :qq486]],
     :group-by [:OFFENSE_CODE_GROUP],
     :order-by [[:rowcnt :desc]]}},
   :root [26 8],
   :tab "boston pd districts"},
  :block-7226
  {:h 7,
   :w 5,
   :connection-id "boston-crime",
   :name "select-DISTRICT-offenses",
   :queries
   {:offenses-drag-DISTRICT-260
    {:select [:DISTRICT [[:count 1] :rowcnt]],
     :from [[:offenses :hh24]],
     :group-by [:DISTRICT],
     :order-by [[:rowcnt :desc]]}},
   :root [28 1],
   :tab "boston pd districts"},
  :hello-there-brother
  {:h 3,
   :w 12,
   :root [1 2],
   :name "hello there!",
   :tab "strategic grill locations",
   :views
   {:heya!
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "50px",
      :font-weight 700,
      :color :theme/editor-outer-rim-color,
      :padding-top "14px",
      :opacity 1,
      :font-family :theme/base-font}
     :child
     "hello! 🐇 👻 🎃"]},
   :queries {}},
  :block-1183
  {:h 7,
   :w 7,
   :views
   {:view-clone
    [:box
     :align
     :center
     :justify
     :center
     :padding
     "13px"
     :style
     {:font-size "45px"}
     :child
     [:img {:src :albums-drag-289/img_640.10, :width "100%"}]]},
   :name "clone-view-clone809",
   :root [15 8],
   :tab "poor touring me"},
  :block-5922
  {:h 7,
   :w 18,
   :connection-id "met-on-tour",
   :name "select-all-albums",
   :queries
   {:albums-drag-289
    {:select [:album_name :img_300 :img_640 :popularity :release_date],
     :from [[:albums :gg872]]}},
   :root [1 1],
   :tab "poor touring me"},
  :block-2932
  {:h 8,
   :w 10,
   :root [14 2],
   :tab "strategic grill locations",
   :name "block-2932",
   :views
   {:hi
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "106px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     [:img
      {:src
       "https://media.tenor.com/vveg5wG07ekAAAAC/mitch-hedberg-hedberg.gif"}]]},
   :queries {}},
  :block-7550
  {:h 7,
   :w 7,
   :views
   {:view-clone
    [:box
     :align
     :center
     :justify
     :center
     :padding
     "13px"
     :style
     {:font-size "45px"}
     :child
     [:img {:src :albums-drag-289/img_640.5, :width "100%"}]]},
   :name "clone-param608",
   :root [8 8],
   :tab "poor touring me"},
  :block-743
  {:name "basic_v_bar - YEAR, rows - 672",
   :w 9,
   :root [1 8],
   :h 9,
   :connection-id "boston-crime",
   :queries
   {:gen-viz-987
    {:select [[[:count 1] :rows] :YEAR],
     :from [:query/offenses-drag-761],
     :group-by [:YEAR]}},
   :tab "boston pd districts",
   :conditionals nil,
   :views
   {:oz
    [:vega-lite
     {:layer
      [{:encoding
        {:y {:field :YEAR, :type "ordinal"},
         :x {:aggregate "sum", :field :rows, :type "quantitative"},
         :row {:field nil, :legend nil},
         :size {:legend nil},
         :shape {:legend nil},
         :column {:field nil, :legend nil},
         :color
         {:scale :theme/vega-default-color-scheme,
          :legend nil,
          :field 1,
          :type "ordinal"}},
        :mark {:type "bar", :tooltip {:content "encoding"}}}],
      :data {:values :gen-viz-987},
      :config :theme/vega-defaults,
      :width "container",
      :height :panel-height,
      :padding 4,
      :background "transparent"}
     {:actions false}]}},
  :block-2811
  {:h 9,
   :w 12,
   :root [24 8],
   :tab "sasquath by state / class / season",
   :name "block-2811",
   :views
   {:hi
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "106px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "hi!"],
    :oz
    [:vega-lite
     {:layer
      [{:encoding
        {:x {:field :season, :type "ordinal", :sort "-y"},
         :y {:aggregate "sum", :field :rowcnt, :type "quantitative"},
         :row {:field nil, :legend nil},
         :size {:legend nil},
         :shape {:legend nil},
         :column {:field nil, :legend nil},
         :color {:scale {:scheme "reds"}, :legend nil, :field 1, :type "ordinal"}},
        :mark {:type "rect", :tooltip {:content "encoding"}}}],
      :config :theme/vega-defaults,
      :width :panel-width,
      :background "transparent",
      :padding 4,
      :height :panel-height,
      :data {:values :season-drag-828}}
     {:actions false}]},
   :queries {},
   :selected-view :oz},
  :block-91
  {:name "us_states_fips_map_dim - fips_state_code, rows - 1230",
   :w 15,
   :root [1 8],
   :h 9,
   :connection-id "bigfoot-ufos",
   :queries
   {:gen-viz-363
    {:select [:fips_state_code [[:count 1] :rows]],
     :from [:query/bigfoot-sightings-locations-drag-305],
     :group-by [:fips_state_code]}},
   :tab "sasquath by state / class / season",
   :conditionals
   {:c390-country-lines? false,
    :c261-us-counties? false,
    :c0-us-states? true,
    :c405-geo-background? false},
   :views
   {:oz
    [:box
     :child
     [:vega-lite
      {:width "container",
       :height :panel-height+50,
       :autosize "none",
       :padding {:top 0, :bottom 0, :left 0, :right 0},
       :params
       [{:name "tx", :expr "width/2"}
        {:name "ty", :expr "height/2"}
        {:name "zoom_precise",
         :value 4,
         :bind {:input "range", :min 2, :max 30, :step 0.05}}
        {:name "centerY",
         :value 38.76,
         :bind {:input "range", :min -60, :max 60, :step 0.01}}
        {:name "centerX",
         :value -97.17,
         :bind {:input "range", :min -180, :max 180, :step 0.01}}
        {:name "baseTileSize", :value 256}
        {:name "tileUrl", :value "https://a.tile.openstreetmap.org/"}
        {:name "zoom", :expr "ceil(zoom_precise)"}
        {:name "tilesCount", :expr "pow(2,zoom)"}
        {:name "tileSize", :expr "baseTileSize*pow(2,zoom_precise-zoom)"}
        {:name "maxTiles", :expr "ceil(max(height,width)/tileSize +1)"}
        {:name "basePoint", :expr "invert('projection',[0,0])"}
        {:name "dii", :expr "((basePoint[0]+180)/360*tilesCount)"}
        {:name "di", :expr "floor(dii)"}
        {:name "dx", :expr "round((floor(dii)-dii)*tileSize)"}
        {:name "djj",
         :expr
         "((1-log(tan(basePoint[1]*PI/180) + 1/cos(basePoint[1]*PI/180))/PI)/2 *tilesCount)"}
        {:name "dj", :expr "floor(djj)"}
        {:name "dy", :expr "round((floor(djj)-djj)*tileSize)"}
        {:name "scale", :expr "baseTileSize * pow(2,zoom_precise) / (2 * PI)"}],
       :layer
       [[:if
         :condi/c405-geo-background?
         {:data
          {:name "tile_list",
           :sequence {:start 0, :stop {:signal "maxTiles"}, :as "a"}},
          :transform
          [{:calculate "sequence(0,maxTiles)", :as "b"}
           {:flatten ["b"]}
           {:calculate
            "tileUrl+zoom+'/'+(datum.a+di+tilesCount)%tilesCount+'/'+((datum.b+dj))+'.png'",
            :as "url"}
           {:calculate "(datum.a * tileSize + dx)+(tileSize/2)", :as "x"}
           {:calculate "(datum.b * tileSize + dy)+(tileSize/2)", :as "y"}],
          :mark
          {:type "image",
           :opacity 0.5,
           :background "#000000",
           :fill "#000000",
           :width {:signal "tileSize"},
           :height {:signal "tileSize"}},
          :encoding
          {:x {:field "x", :type "quantitative", :scale nil},
           :y {:field "y", :type "quantitative", :scale nil},
           :url {:field "url", :type "nominal"}}}
         {:mark "geoshape",
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]}}]
        [:if
         :condi/c261-us-counties?
         {:data
          {:name "us-counties",
           :url
           "assets/vega/us-10m.json",
           :format {:type "topojson", :feature "counties"}},
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]},
          :mark "geoshape",
          :encoding
          {:fill {:value "#a500ff22"},
           :fillOpacity {:value 0.1},
           :stroke {:value "#FFA50022"},
           :strokeWidth {:value 2}},
          :background "transparent"}
         {:mark "geoshape",
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]}}]
        [:if
         :condi/c0-us-states?
         {:data
          {:name "us-states",
           :url
           "assets/vega/us-10m.json",
           :format {:type "topojson", :feature "states"}},
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]},
          :mark "geoshape",
          :transform
          [{:lookup :id,
            :from
            {:data {:values :gen-viz-363},
             :key :fips_state_code,
             :fields [:fips_state_code :rows]}}],
          :encoding
          {:color {:field :rows, :type "nominal", :scale {:scheme "darkred"}},
           :stroke {:value "#FFA50077"},
           :strokeWidth {:value 2}},
          :background "transparent"}
         {:mark "geoshape",
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]}}]
        [:if
         :condi/c390-country-lines?
         {:data
          {:name "world",
           :url "assets/vega/world-110m.json",
           :format {:type "topojson", :feature "countries"}},
          :mark "geoshape",
          :encoding
          {:fill {:value "#FFA500"},
           :fillOpacity {:value 0.1},
           :stroke {:value "#FFA500"},
           :strokeWidth {:value 2}},
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]}}
         {:mark "geoshape",
          :projection
          {:type "mercator",
           :scale {:expr "scale"},
           :center [{:signal "centerX"} {:signal "centerY"}],
           :translate [{:signal "tx"} {:signal "ty"}]}}]],
       :background "transparent",
       :config {:view {:stroke "transparent"}}}
      {:actions false}]]}},
  :block-11429
  {:h 7,
   :w 7,
   :tab "poor touring me",
   :root [1 8],
   :name "block-11429",
   :views
   {:param
    [:box
     :align
     :center
     :justify
     :center
     :padding
     "13px"
     :style
     {:font-size "45px"}
     :child
     [:img {:src :albums-drag-289/img_640.3, :width "100%"}]]},
   :queries {},
   :selected-view :param},
  :block-1922
  {:h 12,
   :w 16,
   :connection-id "met-on-tour",
   :name "select-all-shows",
   :queries
   {:shows-drag-525
    {:select [:location :show_date :show_id :show_name :title :tour_name],
     :from [[:shows :cc542]]}},
   :root [22 8],
   :tab "poor touring me"},
  :block-11046
  {:h 4,
   :w 8,
   :connection-id "bigfoot-ufos",
   :name "select-class-bigfoot_sightings_locations",
   :queries
   {:bigfoot-sightings-locations-drag-class-428
    {:select [:class [[:count 1] :rowcnt]],
     :from [[:bigfoot_sightings_locations :ff215]],
     :group-by [:class],
     :order-by [[:rowcnt :desc]]}},
   :root [16 8],
   :tab "sasquath by state / class / season"},
  :block-12141
  {:clojure
   {:new-clojure
    (do
      (ns svg-tree-generator
        (:require [clojure.string :as str]))
      (def default-config
       {:left-curl-max (or :param/left-curl-max 33),
        :branch-color (or :param/branch-color "#FFFFFF"),
        :right-curl-max (or :param/right-curl-max 55),
        :branch-length-mod (or :param/branch-length-mod 80),
        :trunk-x-pct (or :param/trunk-x-pct 0.5),
        :width :card-width,
        :blossom-max-alpha (or :param/blossom-max-alpha 195),
        :right-curl-min (or :param/right-curl-min 4),
        :blossom-color (or :param/blossom-color "#FF69B4"),
        :blossom-max-size (or :param/blossom-max-size 11),
        :taper-rate (or :param/taper-rate 0.95),
        :blossom-y-var (or :param/blossom-y-var 19),
        :trunk-height-pct (or :param/trunk-height-pct 0.9),
        :gradient-start (or :param/gradient-start "#FFFFFF"),
        :blossom-x-var (or :param/blossom-x-var 14),
        :twig-depth (or :param/twig-depth 8),
        :trunk-angle (or :param/trunk-angle -90),
        :trunk-thickness (or :param/trunk-thickness 5),
        :twig-color (or :param/twig-color "#FFFFFF"),
        :left-curl-min (or :param/left-curl-min 3),
        :gradient-end (or :param/gradient-end "#E6E6FA"),
        :height :card-height})
      (defn deg-to-rad [angle] (* angle (/ Math/PI 180)))
      (defn sin [angle] (Math/sin (deg-to-rad angle)))
      (defn cos [angle] (Math/cos (deg-to-rad angle)))
      (defn random [min max] (+ min (rand (- max min))))
      (defn create-gradient [config]
        (let [{:keys [gradient-start gradient-end]} config]
          [:defs
           [:linearGradient
            {:id "branch-gradient", :x1 "0%", :y1 "0%", :x2 "100%", :y2 "100%"}
            [:stop {:offset "0%", :stop-color gradient-start}]
            [:stop {:offset "100%", :stop-color gradient-end}]]]))
      (defn calculate-thickness [config depth]
        (let [{:keys [trunk-thickness taper-rate twig-depth]} config
              max-depth (max twig-depth depth)]
          (* trunk-thickness (Math/pow taper-rate (- max-depth depth)))))
      (defn draw-line [config x1 y1 x2 y2 depth]
        (let [{:keys [branch-color twig-color twig-depth]} config
              thickness (calculate-thickness config depth)
              color (if (< depth twig-depth) "url(#branch-gradient)" branch-color)]
          [:line
           {:x1 x1,
            :y1 y1,
            :x2 x2,
            :y2 y2,
            :stroke color,
            :stroke-width thickness,
            :stroke-linecap "round"}]))
      (defn draw-blossom [config x y]
        (let [{:keys
               [blossom-color
                blossom-max-alpha
                blossom-max-size
                blossom-x-var
                blossom-y-var]} config
              blossom-alpha (format "%02X" (rand-int blossom-max-alpha))
              blossom-size (rand-int blossom-max-size)
              blossom-x (+ x (rand-int blossom-x-var))
              blossom-y (+ y (rand-int blossom-y-var))]
          [:circle
           {:cx blossom-x,
            :cy blossom-y,
            :r blossom-size,
            :fill (str blossom-color blossom-alpha)}]))
      (defn draw-tree [config x1 y1 angle depth]
        (let [{:keys
               [width
                height
                branch-length-mod
                left-curl-min
                left-curl-max
                right-curl-min
                right-curl-max]} config
              larger (max width height)
              branch-length (/ larger branch-length-mod)
              x2 (+ x1 (* (cos angle) depth branch-length))
              y2 (+ y1 (* (sin angle) depth branch-length))]
          (if (zero? depth)
            (repeatedly 2 (fn [] (draw-blossom config x2 y2)))
            (let [line (draw-line config x1 y1 x2 y2 depth)
                  left-branch (draw-tree
                                config
                                x2
                                y2
                                (- angle (random left-curl-min left-curl-max))
                                (dec depth))
                  right-branch (draw-tree
                                 config
                                 x2
                                 y2
                                 (+ angle (random right-curl-min right-curl-max))
                                 (dec depth))]
              (concat [line] left-branch right-branch)))))
      (defn generate-svg-tree
        ([] (generate-svg-tree {}))
        ([user-config]
          (let [config (merge default-config user-config)
                {:keys
                 [width height twig-depth trunk-height-pct trunk-angle trunk-x-pct]} config
                gradient (create-gradient config)
                tree-content (draw-tree
                               config
                               (* trunk-x-pct width)
                               (* trunk-height-pct height)
                               trunk-angle
                               twig-depth)]
            [:svg
             {:xmlns "http://www.w3.org/2000/svg", :width width, :height height}
             gradient
             tree-content])))
      (generate-svg-tree))},
   :name "block-12141",
   :w 17,
   :selected-mode {:new-clojure :clover},
   :selected-view :new-clojure,
   :root [13 2],
   :h 17,
   :display {:new-clojure :value},
   :queries {},
   :tab "tree of victor-y",
   :views
   {:hare-vw
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "21px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "It's not enough to be able to pick up a sword. You have to know which end to poke into the enemy."]}},
  :block-2343
  {:h 22,
   :w 16,
   :views
   {:editor-block-12141-new-clojure [:editor [:block-12141 :clojure :new-clojure]]},
   :name "editor-block-12141-new-clojure",
   :root [30 2],
   :tab "tree of victor-y"}},
 :selected-block "none!",
 :theme-colors-hashmap
 {"float" "#b2a692",
  "boolean" "#aa6bc1",
  "map" "#5ccc80",
  "list" "#8a235d",
  "string" "#c9d8db",
  "any" "#8a2635",
  "vector" "#43adb0",
  "keyword" "#e7b299",
  "rabbit-code" "#10bcd0",
  "datetime" "#412e6d",
  "integer" "#72d56c",
  "unknown" "#5b2a2c",
  "date" "#394822"},
 :solver-fn nil,
 :click-param
 {:recos-sys
  {:combo_hash "2006850921",
   :combo_edn
   "Clean_Alternative_Fuel_Vehicle_CAFV_Eligibility, Electric_Range, Make",
   :shape_name "basic_v_bar_avg_color",
   :query_map
   "[{:select [[[[:avg :Electric_Range]] :Electric_Range] :Make :Clean_Alternative_Fuel_Vehicle_CAFV_Eligibility], :from [\"query/Electric_Vehicle_Population_Data_drag_580\"], :group-by [:Make :Clean_Alternative_Fuel_Vehicle_CAFV_Eligibility]}]",
   :viz_map
   "[:vega-lite {:layer [{:encoding {:y {:field :Make, :type \"ordinal\"}, :x {:aggregate \"avg\", :field :Electric_Range, :type \"quantitative\"}, :row {:field nil, :legend nil}, :size {:legend nil}, :shape {:legend nil}, :column {:field nil, :legend nil}, :color {:scale :theme/vega-default-color-scheme, :field :Clean_Alternative_Fuel_Vehicle_CAFV_Eligibility, :type \"ordinal\"}}, :mark {:type \"bar\", :tooltip {:content \"encoding\"}}}], :data {:values \"query/Electric_Vehicle_Population_Data_drag_580\"}} {:actions false}]",
   :condis ""},
  :blocks-sys
  {:block_key ":*theme*",
   :block_name "(meta: this screen's theme)",
   :queries 0,
   :views 28,
   :block_data
   "{:codemirror-theme \"rvbbit-dynamic\", :editor-param-background-color \"#000000\", :base-block-style :param/glass-fish-style, :vega-defaults {:view {:stroke \"transparent\"}, :axis {:domainColor \"#ffffff22\", :grid true, :font \"Lato\", :labelColor \"#ffffff88\", :titleFont \"Lato\", :titleColor \"#ffffff99\", :labelFont \"Lato\", :domain false, :gridColor \"#ffffff22\", :tickColor \"#ffffff22\", :axisFont \"Lato\"}, :legend {:labelFont \"Lato\", :legendFont \"Lato\", :labelColor \"#ffffff99\", :titleColor \"#ffffff99\", :stroke \"#ffffff99\", :titleFont \"Lato\"}, :header {:labelFont \"Lato\", :titleFont \"Lato\", :titleColor \"#ffffff99\"}, :mark {:font \"Lato\"}, :title {:font \"Lato\", :subtitleFont \"Lato\", :labelFont \"Lato\", :titleFont \"Lato\", :titleColor \"#ffffff99\"}}, :grid-selected-column-css {:background-color \"#00000088\", :filter \"brightness(200%)\"}, :base-block-color-selected :param/generated-colors>second-darkest, :block-title-font-color \"#ffffff\", :universal-pop-color :param/tetradss>0, :base-block-color \"#04041e82\", :editor-rim-color :param/generated-colors>colors>4, :base-block-filter-selected \"drop-shadow(0.35rem 0.35rem 0.4rem #8dceff) drop-shadow(-0.35rem -0.35rem 0.4rem #8dceff)\", :vega-default-color-scheme {:scheme \"pastel2\"}, :data-colors :param/generated-colors>data-colors, :editor-grid-selected-font-color \"#000000\", :monospaced-font \"JetBrains Mono\", :editor-grid-selected-background-color \"#dc9cb0\", :nivo-defaults {:font-family \"Instagram Sans\", :labels {:text {:fill \"#ffffff\", :font-size \"16px\", :font-family \"Instagram Sans\", :font-weight 700}}, :tooltip {:container {:background \"#000\", :color \"#ffffff\", :text {:fill \"#eeeeee\"}, :fontSize \"18px\", :borderRadius \"4px\", :boxShadow \"0 1px 2px rgba(0, 0, 0, 0.55)\", :padding \"5px 9px\"}, :basic {:whiteSpace \"pre\", :display \"flex\", :alignItems \"center\"}, :tableCell {:padding \"3px 5px\"}}, :axis {:legend {:text {:fill \"#ffffff\", :font-size \"14px\", :font-family \"Instagram Sans\", :font-weight 700}}, :ticks {:line {:stroke \"#ffffff60\"}, :text {:fill \"#ffffff60\", :font-weight 700}}}, :grid {:line {:stroke \"#ffffff\", :strokeWidth 0, :strokeDasharray \"0 0\"}}}, :editor-outer-rim-color :param/generated-colors>dominant, :grid-selected-font-color \"#000000\", :block-title-selected-font-color \"#ffffff\", :grid-selected-background-color \"#a3d3ff\", :grid-font-color \"#ffffff\", :canvas-background-css {:background-image [:str \"url(\" :param/rel-image-path \")\"], :transition \"all 1.8s ease-in-out\", :background-blend-mode \"overlay\", :background-size \"cover\", :background-color \"#00000088\"}, :editor-font-color \"#ffffff\", :base-font \"Poppins\", :block-tab-selected-font-color \"#c9d1ff\", :editor-background-color \"#000006\", :editor-grid-font-color \"#ffffff\"}",
   :view_names
   ":codemirror-theme :editor-param-background-color :base-block-style :vega-defaults :grid-selected-column-css :base-block-color-selected :block-title-font-color :universal-pop-color :base-block-color :editor-rim-color :base-block-filter-selected :vega-default-color-scheme :data-colors :editor-grid-selected-font-color :monospaced-font :editor-grid-selected-background-color :nivo-defaults :editor-outer-rim-color :grid-selected-font-color :block-title-selected-font-color :grid-selected-background-color :grid-font-color :canvas-background-css :editor-font-color :base-font :block-tab-selected-font-color :editor-background-color :editor-grid-font-color",
   :query_names ""},
  :fields-sys {:field_name "class", :field_type "VARCHAR(7)", :data_type "string"},
  :viz-shapes-sys {:combo_edn nil},
  :tables-sys
  {:db_schema "none",
   :db_catalog nil,
   :connection_id "bigfoot-ufos",
   :schema_cat nil,
   :table_name "bigfoot_sightings_locations",
   :fields 42},
  :offenses-drag-DISTRICT-260 {:DISTRICT "B2", :rowcnt 49945},
  :flows-sys
  {:flow_id "openai-image-gen-ladder",
   :file_path "./flows/openai-image-gen-ladder.edn",
   :last_modified "2024-09-01 02:42:12"},
  :files-sys
  {:file_path "./screens/duality-of-lepus33aa.edn",
   :screen_name "duality-of-lepus33aa",
   :blocks 70,
   :queries 28,
   :ts "2024-08-23 03:12:39"},
  :albums-drag-289
  {:album_name "Kill 'Em All (Deluxe Remaster)",
   :img_300 "https://i.scdn.co/image/ab67616d00001e02a4c3675649cce210651d150d",
   :img_640 "https://i.scdn.co/image/ab67616d0000b273a4c3675649cce210651d150d",
   :popularity 49,
   :release_date "1983-07-25"},
  :user-dropdown-sys {:req-field nil},
  :viz-tables-sys {:table_name "bigfoot_sightings_locations_drag_305"},
  :bigfoot-sightings-locations-drag-305
  {:nearestroad "Federal Street",
   :water_area 42579,
   :housing_units 53068,
   :date nil,
   :locationdetails
   "Take Route 9 through Belchertown and enter Federal street via either entrance as it is a road that turns off Rt 9, runs for about 3-4 miles then ends again at another intersection of Rt 9. It was around the street address if 722 Federal street.",
   :submitted_date "2020-07-11",
   :bfroid 65734,
   :cty_abbrev "MA",
   :otherwitnesses
   "There were about 4-5 of us. Maybe a bit more. We were all just sitting on the porch talking. There was a light illuminating us on the porch but the meadow and woods were shrouded in darkness.",
   :run_id 34,
   :fips_county_code 15,
   :cty_name "Hampshire County",
   :nearesttown "Belchertown",
   :timeandconditions "Late at night. After midnight but before dawn.",
   :month nil,
   :county "Hampshire County",
   :land_area 1370182,
   :longitude -72.44578160338926,
   :state "Massachusetts",
   :zipcode 1007,
   :fixed_month "0001-04-01",
   :submitted "2020-07-11 00:00:00.000000",
   :fips_state_code 25,
   :state_abbrev "MA",
   :title
   "Possible tree push over and vocalization near Belchertown and Quabbin Reservoir",
   :otherstories "No, I have not.",
   :year "1998",
   :season "Spring",
   :state_name "MASSACHUSETTS",
   :class "Class B",
   :population 146568,
   :zip_long -72.411005,
   :alsonoticed
   "No, nothing. I do remember thinking it was weird that wed hear trees falling in the woods a fair bit. But this could really mean not much.",
   :zip_lat 42.278424,
   :url "http://www.bfro.net/GDB/show_report.asp?id=65734&PrinterFriendly=True",
   :latitude 42.326315539106616,
   :observed
   " Hello!<BR><BR>This is something that happened a long time ago and to be honest I never thought it could be connected to Sasquatch/Bigfoot but recently Ive been reading about the topic a lot and I figured Id send it to you guys after finding your site and just checking out reports from areas where Ive lived in the past. Anyway, I found a report from Belchertown, MA and I lived a rural part of Belchertown for several years when I was in college. <BR><BR>This was sometime around 1997-1998 in Belchertown. My housemates and I were out on our porch which faced a 2-3 acre meadow. This open meadow and the porch were on the east side of the house. The entire area past the meadow to the East was wooded with houses and cabins here and there for about a mile until you hit a lake. Behind the house was abput 10-20 yards of woods with a walking trail and then another 10 yards past was a train tracks running East/west then more woods. <BR><BR>Anyway, my housemates and I were out on the porch when we heard the sound of a tree crashing to the ground.  About 19 seconds later while we all were kindve shocked there was an enormously loud and guttural growl/scream/roar.  In all my life I have never heard any animal sound that could match it in intensity, volume, and it just sounded plain angry and vivacious. It is hard to describe just how loud it was and how stunned we all were that this was coming from an animal just inside the tree line.  There were coyotes, owls, foxes galore back there and the sounds they made were a world away in comparison.  <BR><BR>We all immediately looked at each other, got up and went into the house as fast as we could without saying a word. <BR><BR>Everyone assumed it was an animal but after reading about and hearing recordings of presumed Sasquatch scream and howls it brought the memory rushing back because it is so similar to what we heard. <BR><BR>Anyway, just wanted to send this in as I saw there was another report for this area. <BR><BR>Best regards ",
   :environment
   "The property was about 7 acres. Most of it a meadow but wooded in front of the street with a small creek near the road. Woods surrounded the entire property and behind the house there was a public trail and a train track running parallel East/west behind the house. To the east of the 2-3 acre was a wooded area filled with many large Birch trees. The houses in this area are mostly in the woods.",
   :fixed_year "1998",
   :run_time "2022-05-20 16:27:43.000000",
   :zip_name "BELCHERTOWN"},
  :param
  {:left-curl-max 35,
   :background-image-path
   "assets/openai-images/b64-image3-22058-69286-4k.webp-q10.jpg",
   :branch-color "#17b772",
   :right-curl-max 36,
   :branch-length-mod 91,
   :trunk-x-pct 0.5,
   :energetic-lilac-wren
   "Create a highly detailed and ultra-realistic image that features a collection of peculiar and otherworldly woodland creatures situated amidst a ruined woodland scenery reminiscent of New England's landscape characteristics. This haunting imagery subtly combines the visuals of both cyberpunk and vaporwave aesthetics while bearing the mystery and charm of 20th-century noir settings. Above them, a bewitching midnight sky laden with twinkling stars is the backdrop. The surrounding environment is illuminated by the mysterious glow of neon lights that emit hues of rose pink, purple, and sky blue. This unconventional fusion of color and themes lends a strangely entrancing allure to the entire scenario. A vison of tech overtaking the nature and the nature fighting back to overgrow it.",
   :novel-peach-squirrel
   "Generate a hyperrealistic image of a woman in her late twenties, of Irish-Scottish descent, long hair, fair skin, and intricate wilderness tattoos featuring rabbit designs. She is situated in a dystopian New England, North America setting, creating a stark contrast with her unusual environment. Her dress sense is a unique blend of punk and retro-futurism. The serene forest in the backdrop is disrupted by ominous robotic figures from a cyberpunk era, bizarrely harmonizing with a vaporwave-styled luminosity that tints the evening sky in stunning hues of neon pink, purple, and light blue. Her hair is swept by the wind; her skin is decorated with masterfully drawn tattoos that trace the shape of rabbits, extending from her arms, up to her neck, signifying her love for natural art. In a nod to pin-up fashion, she radiates intense charm through every minute detail, particularly her slightly puckered, plump lips, offering a beautifully refined portrayal of future from a historical perspective.",
   :blossom-max-alpha 6,
   :voice "This is a test of the voice to parameter, ba-ba-ba-boo.",
   :right-curl-min 3,
   :blossom-color "#0077ff",
   :blossom-max-size 86,
   :selected-view-data nil,
   :taper-rate 0.7,
   :blossom-y-var 14,
   :trunk-height-pct 0.9,
   :gradient-start "#17ffa9",
   :selected-view nil,
   :blossom-x-var 6,
   :twig-depth 10,
   :generated-colors
   [:run-solver [:get-my-colors {:input-image-path :param/background-image-path}]],
   :trunk-angle -90,
   :trunk-thickness 30,
   :twig-color "#40bfb9",
   :left-curl-min 2,
   :gradient-end "#18bcb0",
   :rel-image-path "assets/openai-images/b64-image3-22058-69286-4k.webp-q10.jpg",
   :tetradss [:tetrads :param/generated-colors>dominant],
   :selected-block :block-1462,
   :glass-fish-style
   {:background-color [:str :param/generated-colors>darkest 73],
    :border-radius [:sticky-border-radius "33px"],
    :box-shadow "10px 5px 5px #00000034",
    :backdrop-filter "blur(4px) brightness(40%)",
    :filter nil},
   :good-cobalt-ostrich
   "Create a highly detailed and ultra-realistic image that features a collection of peculiar and otherworldly rabbits situated amidst a ruined woodland scenery reminiscent of New England's landscape characteristics. This haunting imagery subtly combines the visuals of both cyberpunk and vaporwave aesthetics while bearing the mystery and charm of 20th-century noir settings. Above them, a bewitching midnight sky laden with twinkling stars is the backdrop. The surrounding environment is illuminated by the mysterious glow of neon lights that emit hues of rose pink, purple, and sky blue. This unconventional fusion of color and themes lends a strangely entrancing allure to the entire scenario.",
   :upbeat-apricot-turtle
   "Create a highly detailed 16:9 cyberpunk illustration, executed with a vibrant, exaggerated pinup technique drawn from the traditional myths of New England, enveloped in an otherworldly allure and set in an awe-inspiring environment. Place at the center of this setting a buxom woman of late 20s from Caucasian descent, characterized by her gorgeously billowing hair. Distinguish her by voluptuous lips and an upward-tilting nose, her expression a blend of joy and fascination. Observe the intricate designs of Celtic-inspired tattoos of rabbits and nature adorning her neck, collarbone, and shoulders. She possesses a magical physique that's significant and plentifully curvaceous. Bathe her in the mystic, abstract illuminations of blue and pink that enhance her robust symmetry, amplifying the glow of her skin. Counterpoint to her fair skin is her dark makeup. Finalize her look with a choker ribbon and a long necklace as she leans on a wall, shooting an enticingly playful skip to the viewer."},
  :viz-shapes0-sys {:shape nil, :recos 266},
  :theme
  {:codemirror-theme "rvbbit-dynamic",
   :editor-param-background-color "#000000",
   :base-block-style :param/glass-fish-style,
   :vega-defaults
   {:view {:stroke "transparent"},
    :axis
    {:domainColor "#ffffff22",
     :grid true,
     :font "Lato",
     :labelColor "#ffffff88",
     :titleFont "Lato",
     :titleColor "#ffffff99",
     :labelFont "Lato",
     :domain false,
     :gridColor "#ffffff22",
     :tickColor "#ffffff22",
     :axisFont "Lato"},
    :legend
    {:labelFont "Lato",
     :legendFont "Lato",
     :labelColor "#ffffff99",
     :titleColor "#ffffff99",
     :stroke "#ffffff99",
     :titleFont "Lato"},
    :header {:labelFont "Lato", :titleFont "Lato", :titleColor "#ffffff99"},
    :mark {:font "Lato"},
    :title
    {:font "Lato",
     :subtitleFont "Lato",
     :labelFont "Lato",
     :titleFont "Lato",
     :titleColor "#ffffff99"}},
   :grid-selected-column-css
   {:background-color "#00000088", :filter "brightness(200%)"},
   :base-block-color-selected :param/generated-colors>second-darkest,
   :block-title-font-color "#ffffff",
   :universal-pop-color :param/tetradss>0,
   :base-block-color "#04041e82",
   :editor-rim-color :param/generated-colors>colors>4,
   :base-block-filter-selected
   "drop-shadow(0.35rem 0.35rem 0.4rem #8dceff) drop-shadow(-0.35rem -0.35rem 0.4rem #8dceff)",
   :vega-default-color-scheme {:scheme "pastel2"},
   :data-colors :param/generated-colors>data-colors,
   :editor-grid-selected-font-color "#000000",
   :monospaced-font "JetBrains Mono",
   :editor-grid-selected-background-color "#dc9cb0",
   :nivo-defaults
   {:font-family "Instagram Sans",
    :labels
    {:text
     {:fill "#ffffff",
      :font-size "16px",
      :font-family "Instagram Sans",
      :font-weight 700}},
    :tooltip
    {:container
     {:background "#000",
      :color "#ffffff",
      :text {:fill "#eeeeee"},
      :fontSize "18px",
      :borderRadius "4px",
      :boxShadow "0 1px 2px rgba(0, 0, 0, 0.55)",
      :padding "5px 9px"},
     :basic {:whiteSpace "pre", :display "flex", :alignItems "center"},
     :tableCell {:padding "3px 5px"}},
    :axis
    {:legend
     {:text
      {:fill "#ffffff",
       :font-size "14px",
       :font-family "Instagram Sans",
       :font-weight 700}},
     :ticks
     {:line {:stroke "#ffffff60"}, :text {:fill "#ffffff60", :font-weight 700}}},
    :grid {:line {:stroke "#ffffff", :strokeWidth 0, :strokeDasharray "0 0"}}},
   :editor-outer-rim-color :param/generated-colors>dominant,
   :grid-selected-font-color "#000000",
   :block-title-selected-font-color "#ffffff",
   :grid-selected-background-color "#a3d3ff",
   :grid-font-color "#ffffff",
   :canvas-background-css
   {:background-image [:str "url(" :param/rel-image-path ")"],
    :transition "all 1.8s ease-in-out",
    :background-blend-mode "overlay",
    :background-size "cover",
    :background-color "#00000088"},
   :editor-font-color "#ffffff",
   :base-font "Poppins",
   :block-tab-selected-font-color "#c9d1ff",
   :editor-background-color "#000006",
   :editor-grid-font-color "#ffffff"},
  :bigfoot-sightings-locations-drag-class-428 {:class "Class A", :rowcnt 2486},
  :class-drag-987 nil,
  :flow-runner nil,
  :connections-sys {:database_name "SQLite", :connection_id "bigfoot-ufos"},
  :new-clojure-1-sqlized {:ffilename "vap9.png"},
  :sys {:selected-tab "tree of victor-y", :selected-tab-idx 4},
  :tracker nil},
 :selected-flow "my-new-flow3587"}