{:reco-preview nil,
 :sql-source
 {:query-11641
  {:select [[[:count 1] :lights]],
   :from
   [[{:select [:*],
      :_sqlized-at "2024-09-15 20:09:06",
      :_sqlized-by [:block-9858 :clojure :new-clojure],
      :_sqlized-hash -1224980434,
      :from [:block_9858_new_clojure__block_9858_clojure_new_clojure_]}
     :bb722]]},
  :query-5741
  {:select [[[:count 1] :light_groups]],
   :from
   [[{:select [:*],
      :_sqlized-at "2024-09-12 16:06:02",
      :_sqlized-by [:block-11365 :clojure :light-groups],
      :_sqlized-hash -1665236269,
      :from [:raw_custom_override660500913__block_11365_clojure_light_groups_]}
     :aa7]]},
  :light-groups-sqlized
  {:select [:*],
   :connection-id "cache.db",
   :_sqlized-at "2024-09-12 16:06:02",
   :_sqlized-by [:block-11365 :clojure :light-groups],
   :_sqlized-hash -1665236269,
   :from [:raw_custom_override660500913__block_11365_clojure_light_groups_]},
  :raw_custom_override660500913__block_11365_clojure_light_groups_
  {:select [:*],
   :connection-id "system-db",
   :from [:raw_custom_override660500913__block_11365_clojure_light_groups_],
   :limit 111},
  :new-clojure-sqlized
  {:select [:*],
   :connection-id "cache.db",
   :_sqlized-at "2024-09-15 20:09:06",
   :_sqlized-by [:block-9858 :clojure :new-clojure],
   :_sqlized-hash -1224980434,
   :from [:block_9858_new_clojure__block_9858_clojure_new_clojure_]},
  :raw_custom_override_333496319__block_9858_clojure_new_clojure_
  {:select [:*],
   :connection-id "system-db",
   :from [:raw_custom_override_333496319__block_9858_clojure_new_clojure_],
   :limit 111},
  :block_9858_new_clojure__block_9858_clojure_new_clojure_
  {:select [:*],
   :connection-id "system-db",
   :from [:block_9858_new_clojure__block_9858_clojure_new_clojure_],
   :limit 111}},
 :audio-playing? false,
 :meta
 {nil
  {:fields
   {:vec-val
    {:data-type "string",
     :distinct 2,
     :group-by? true,
     :commons {},
     :cardinality 100}},
   :rowcount 2},
  :flow-fn-sys
  {:fields
   {:name
    {:min ":alert!",
     :data-type "string",
     :commons {":write-file" 1, ":json-to-edn" 1, ":get-colors" 1},
     :distinct 18,
     :group-by? true,
     :median ":kick",
     :max ":write-file",
     :avg ":alert! (non-numeric average)",
     :cardinality 100},
    :description
    {:min "Basic HTTP call primitive",
     :data-type "string",
     :commons
     {"Basic HTTP call primitive" 2,
      "Get top 50 color frequencies from an image in hex form." 1,
      "Send dialog content to a client - given a vector of choices, will render buttons"
      1},
     :distinct 17,
     :group-by? true,
     :median
     "Saves a base64 string to a webp file (default format for OpenAI image generation)",
     :max "Write you own Clojure function! Godspeed!",
     :avg
     "Send a pop-up notification to a client (or :all clients) (non-numeric average)",
     :cardinality 94},
    :full_map
    {:min
     "{:description \"Basic HTTP call primitive\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}",
     :data-type "string",
     :commons
     {"{:description \"Convert a JSON string to Clojure EDN\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}}"
      1,
      "{:file-path \"./flows/node-color-thief-js.edn\", :icon \"zmdi-gradient\", :description \"Take an image local path and generate a color palette map from it.\"}"
      1,
      "{:description \"Read file content from the server. Useful in chaining together operations.\", :fn (fn [full-path] (rvbbit-backend.websockets/read-local-file full-path)), :inputs [:full-path], :icon \"zmdi-file-text\", :types {:full-path :string, :out :string}}"
      1},
     :distinct 18,
     :group-by? true,
     :median
     "{:description \"Saves a base64 string to a webp file (default format for OpenAI image generation)\", :fn (fn [b64-data file-path] (rvbbit-backend.util/save-base64-to-webp b64-data file-path)), :inputs [:b64-data :file-path], :required [:b64-data :file-path], :icon \"zmdi-broken-image\", :types {:b64-data :any, :file-path :string, :out :any}}",
     :max
     "{:file-path \"./flows/node-color-thief-js.edn\", :icon \"zmdi-gradient\", :description \"Take an image local path and generate a color palette map from it.\"}",
     :avg
     "{:description \"Send a pop-up notification to a client (or :all clients)\", :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration)), :inputs [:destination :content :w :h :duration], :icon \"zmdi-alert-polygon\", :style {:color \"#FDFD96\"}, :selected-style {:color \"#FDFD96\"}, :defaults {:destination :client-name, :content \"Alert!\", :w 10, :h 1, :duration 6}, :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer}} (non-numeric average)",
     :cardinality 100},
    :inputs
    {:min "",
     :data-type "string",
     :commons
     {"[:destination :content :w :h :duration]" 3,
      "[:req-map]" 2,
      "[:full-path :file-data]" 1},
     :distinct 15,
     :group-by? true,
     :median "[:full-path :file-data]",
     :max "[:value]",
     :avg "[:destination :content :w :h :duration] (non-numeric average)",
     :cardinality 83},
    :icon
    {:min "fa-solid fa-terminal",
     :data-type "string",
     :commons {"zmdi-file-text" 3, "zmdi-alert-polygon" 3, "zmdi-dns" 2},
     :distinct 10,
     :group-by? true,
     :median "zmdi-dns",
     :max "zmdi-washing-machine",
     :avg "zmdi-alert-polygon (non-numeric average)",
     :cardinality 55},
    :input_types
    {:min "[:any :string]",
     :data-type "string",
     :commons
     {"[:string]" 5, "[:keyword :any :integer :integer :integer]" 3, "[:map]" 2},
     :distinct 11,
     :group-by? true,
     :median "[:rowset]",
     :max "[]",
     :avg "[:keyword :any :integer :integer :integer] (non-numeric average)",
     :cardinality 61},
    :output_types
    {:min "",
     :data-type "string",
     :commons {":any" 12, ":string" 3, ":keyword" 1},
     :distinct 5,
     :group-by? true,
     :median ":any",
     :max ":string",
     :avg ":any (non-numeric average)",
     :cardinality 27},
    :category
    {:min ":rabbit-base",
     :data-type "string",
     :commons {":rabbit-base" 18},
     :distinct 1,
     :group-by? true,
     :median ":rabbit-base",
     :max ":rabbit-base",
     :avg ":rabbit-base (non-numeric average)",
     :cardinality 5}},
   :database-type "SQLite",
   :rowcount 18},
  :blocks-sys
  {:fields
   {:block_key
    {:min "",
     :data-type "string",
     :commons {":block-3284" 1, ":block-4733" 1, ":block-1320" 1},
     :distinct 10,
     :group-by? true,
     :median ":block-4733",
     :max "spherical falcon",
     :avg ":block-3284 (non-numeric average)",
     :cardinality 100},
    :block_name
    {:min "",
     :data-type "string",
     :commons
     {"block-86" 1, "board: background picker" 1, "select-all-bigfoot_sightings" 1},
     :distinct 10,
     :group-by? true,
     :median "block-86",
     :max "select-all-bigfoot_sightings",
     :avg " (non-numeric average)",
     :cardinality 100},
    :queries
    {:min 0,
     :data-type "integer",
     :commons {0 5, 1 4, 2 1},
     :distinct 3,
     :group-by? true,
     :median 0.5,
     :max 2,
     :avg 0.6,
     :cardinality 30},
    :views
    {:min 0,
     :data-type "integer",
     :commons {0 6, 1 3, 28 1},
     :distinct 3,
     :group-by? true,
     :median 0,
     :max 28,
     :avg 3.1,
     :cardinality 30},
    :block_data
    {:min
     "{:clojure {:new-clojure (do (let [dir \"assets/openai-images/\" rel-dir \"assets/openai-images/\" files (->> (file-seq (clojure.java.io/file dir)) (filter (fn [x] (.isFile x))) (filter (fn [x] (not (clojure.string/includes? (str x) \"directory\")))) (filter (fn [x] (not (clojure.string/includes? (str (.getName x)) \"8k-\")))) (map (fn [x] (.getName x))))] (println \"found \" (count files) \" files\") (vec (for [f (sort files)] {:ffilename (str f)}))))}, :name \"block-86\", :w 8, :selected-mode {:new-clojure :text}, :selected-view :new-clojure-sqlized, :root [3 2], :h 12, :display {:new-clojure :output}, :queries {:new-clojure-sqlized {:select [:*], :connection-id \"cache.db\", :_sqlized-at \"2024-09-02 13:01:30\", :_sqlized-by [:block-86 :clojure :new-clojure], :_sqlized-hash nil, :from [:raw_custom_override1194279718__block_86_clojure_new_clojure_]}}, :tab \"background picker\", :views {}}",
     :data-type "string",
     :commons
     {"{:mad-libs-combo-hash [\"-1064874028\" \"bigfoot_sightings_drag_35\"], :name \"recharts_h_bar - \\\"by_month_sqlite_submitted_date*, rows\\\" - 571\", :w 10, :selected-view :reech, :root [2 13], :h 7, :connection-id \"bigfoot-ufos\", :queries {:gen-viz-1022 {:select [[[[:count 1]] :rows] [[:substr :submitted_date 6 2] :by_month_sqlite_submitted_date]], :from [[{:select [:alsonoticed :bfroid :class :county :date :environment :fixed_month :fixed_year :month :run_time :season :state :submitted :submitted_date :timeandconditions :title :url :year], :from [[:bigfoot_sightings :bb86]]} :cc805]], :group-by [[:substr :submitted_date 6 2]]}}, :tab \"spherical falcon\", :conditionals nil, :views {:reech [:reagent-gt :ResponsiveContainer {:width \"100%\", :height :panel-height+50} [:reagent-gt :BarChart {:data :gen-viz-1022, :margin {:top 5, :bottom 5, :right 30, :left 20}} [:reagent-gt :CartesianGrid {:strokeDasharray \"1 4\", :opacity 0.33}] [:reagent-gt :Tooltip] [:reagent-gt :XAxis {:dataKey :by_month_sqlite_submitted_date}] [:reagent-gt :Bar {:dataKey :rows, :stroke \"#8884d8\", :fill \"#8884d822\", :on-click [:set-recharts-param>]}]]]}}"
      1,
      "{:h 3, :w 9, :root [12 11], :tab \"background picker\", :selected-view :hare-vw-9, :name \"block-1320\", :views {:hare-vw-9 [:box :align :center :justify :center :style {:font-size \"21px\", :font-weight 700, :padding-top \"6px\", :padding-left \"14px\", :margin-top \"-8px\", :color :theme/editor-outer-rim-color, :font-family :theme/monospaced-font} :child \"<-- switch to the \\\"sqlized\\\" tab and select an image.\"]}, :queries {}}"
      1,
      "{:panels {:block-724 {:mad-libs-combo-hash [\"-1064874028\" \"bigfoot_sightings_drag_35\"], :name \"recharts_h_bar - \\\"by_month_sqlite_submitted_date*, rows\\\" - 571\", :w 10, :selected-view :reech, :root [2 13], :h 7, :connection-id \"bigfoot-ufos\", :queries {:gen-viz-1022 {:select [[[[:count 1]] :rows] [[:substr :submitted_date 6 2] :by_month_sqlite_submitted_date]], :from [[{:select [:alsonoticed :bfroid :class :county :date :environment :fixed_month :fixed_year :month :run_time :season :state :submitted :submitted_date :timeandconditions :title :url :year], :from [[:bigfoot_sightings :bb86]]} :cc805]], :group-by [[:substr :submitted_date 6 2]]}}, :tab \"spherical falcon\", :conditionals nil, :views {:reech [:reagent-gt :ResponsiveContainer {:width \"100%\", :height :panel-height+50} [:reagent-gt :BarChart {:data :gen-viz-1022, :margin {:top 5, :bottom 5, :right 30, :left 20}} [:reagent-gt :CartesianGrid {:strokeDasharray \"1 4\", :opacity 0.33}] [:reagent-gt :Tooltip] [:reagent-gt :XAxis {:dataKey :by_month_sqlite_submitted_date}] [:reagent-gt :Bar {:dataKey :rows, :stroke \"#8884d8\", :fill \"#8884d822\", :on-click [:set-recharts-param>]}]]]}}, :block-8590 {:h 7, :w 35, :connection-id \"bigfoot-ufos\", :name \"select-all-bigfoot_sightings\", :queries {:bigfoot-sightings-drag-35 {:select [:alsonoticed :bfroid :class :county :date :environment :fixed_month :fixed_year :month :run_time :season :state :submitted :submitted_date :timeandconditions :title :url :year], :from [[:bigfoot_sightings :bb86]], :_last-run \"09:11:13\"}}, :root [2 21], :tab \"spherical falcon\", :selected-view :bigfoot-sightings-drag-35}}, :click-param {:param {:background-image-path [:str :param/path-dir :param/rel-image-path], :keper \"b64-image3-30849-74975-4k.webp\", :path-dir \"\", :selected-view-data nil, :selected-view nil, :generated-colors [:run-solver [:get-my-colors {:input-image-path :param/background-image-path}]], :rel-image-path [:str \"assets/openai-images/\" :new-clojure-sqlized/ffilename], :tetradss [:tetrads :param/generated-colors>dominant], :selected-block :block-724, :glass-fish-style {:background-color [:str :param/generated-colors>darkest 73], :border-radius [:sticky-border-radius \"24px\"], :backdrop-filter \"blur(4px) brightness(40%)\", :filter nil}}}}"
      1},
     :distinct 10,
     :group-by? true,
     :median
     "{:h 7, :w 35, :connection-id \"bigfoot-ufos\", :name \"select-all-bigfoot_sightings\", :queries {:bigfoot-sightings-drag-35 {:select [:alsonoticed :bfroid :class :county :date :environment :fixed_month :fixed_year :month :run_time :season :state :submitted :submitted_date :timeandconditions :title :url :year], :from [[:bigfoot_sightings :bb86]], :_last-run \"09:11:13\"}}, :root [2 21], :tab \"spherical falcon\", :selected-view :bigfoot-sightings-drag-35}",
     :max
     "{:queries {:new-clojure-2-sqlized {:select [:*], :connection-id \"cache.db\", :_sqlized-at \"2024-08-28 07:45:10\", :_sqlized-by [:block-3284 :clojure :new-clojure-2], :_sqlized-hash nil, :from [:raw_custom_override647179980__block_3284_clojure_new_clojure_2_]}}}",
     :avg
     "{:queries {:new-clojure-2-sqlized {:select [:*], :connection-id \"cache.db\", :_sqlized-at \"2024-08-28 07:45:10\", :_sqlized-by [:block-3284 :clojure :new-clojure-2], :_sqlized-hash nil, :from [:raw_custom_override647179980__block_3284_clojure_new_clojure_2_]}}} (non-numeric average)",
     :cardinality 100},
    :view_names
    {:min "",
     :data-type "string",
     :commons {"" 6, ":reech" 1, ":hare-vw-7" 1},
     :distinct 5,
     :group-by? true,
     :median "",
     :max ":reech",
     :avg " (non-numeric average)",
     :cardinality 50},
    :query_names
    {:min "",
     :data-type "string",
     :commons {"" 5, ":bigfoot-sightings-drag-35" 1, ":gen-viz-1022" 1},
     :distinct 6,
     :group-by? true,
     :median "",
     :max ":new-clojure-sqlized",
     :avg ":new-clojure-2-sqlized (non-numeric average)",
     :cardinality 60}},
   :database-type "SQLite",
   :rowcount 10},
  :fields-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :tables-sys
  {:fields
   {:db_schema
    {:min "none",
     :data-type "string",
     :commons {"none" 37},
     :distinct 1,
     :group-by? true,
     :median "none",
     :max "none",
     :avg "none (non-numeric average)",
     :cardinality 2},
    :db_catalog
    {:min "",
     :data-type "unknown",
     :commons {nil 37},
     :distinct 1,
     :group-by? true,
     :median "",
     :max "",
     :avg " (non-numeric average)",
     :cardinality 2},
    :connection_id
    {:min "cache.db",
     :data-type "string",
     :commons {"cache.db" 37},
     :distinct 1,
     :group-by? true,
     :median "cache.db",
     :max "cache.db",
     :avg "cache.db (non-numeric average)",
     :cardinality 2},
    :schema_cat
    {:min "",
     :data-type "unknown",
     :commons {nil 37},
     :distinct 1,
     :group-by? false,
     :median "",
     :max "",
     :avg " (non-numeric average)",
     :cardinality 2},
    :table_name
    {:min "DISTRICT_drag_18",
     :data-type "string",
     :commons
     {"offenses_drag_6" 1,
      "farts_core_tttt_tbl" 1,
      "raw_custom_override341981132__block_86_clojure_new_clojure_" 1},
     :distinct 37,
     :group-by? true,
     :median "raw_custom_override_333496319__block_9858_clojure_new_clojure_",
     :max "solvers_sql_solver_1",
     :avg "DISTRICT_drag_18 (non-numeric average)",
     :cardinality 100},
    :fields
    {:min 2,
     :data-type "integer",
     :commons {19 6, 2 6, 3 6},
     :distinct 11,
     :group-by? false,
     :median 27,
     :max 42,
     :avg 11.81081081081081,
     :cardinality 29}},
   :database-type "SQLite",
   :rowcount 37},
  :tmp--1053172204-hist-sys
  {:fields
   {:kp
    {:min "[:block-4785 :views :param-val-2]",
     :data-type "string",
     :commons {"[:block-4785 :views :param-val-2]" 1},
     :distinct 1,
     :group-by? true,
     :median "[:block-4785 :views :param-val-2]",
     :max "[:block-4785 :views :param-val-2]",
     :avg "[:block-4785 :views :param-val-2] (non-numeric average)",
     :cardinality 100},
    :key
    {:min ":param-val-2",
     :data-type "string",
     :commons {":param-val-2" 1},
     :distinct 1,
     :group-by? true,
     :median ":param-val-2",
     :max ":param-val-2",
     :avg ":param-val-2 (non-numeric average)",
     :cardinality 100},
    :updated
    {:min "2024-09-12 14:50:20",
     :data-type "string",
     :commons {"2024-09-12 14:50:20" 1},
     :distinct 1,
     :group-by? true,
     :median "2024-09-12 14:50:20",
     :max "2024-09-12 14:50:20",
     :avg "2024-09-12 14:50:20 (non-numeric average)",
     :cardinality 100},
    :type
    {:min ":views",
     :data-type "string",
     :commons {":views" 1},
     :distinct 1,
     :group-by? true,
     :median ":views",
     :max ":views",
     :avg ":views (non-numeric average)",
     :cardinality 100},
    :panel_key
    {:min ":block-4785",
     :data-type "string",
     :commons {":block-4785" 1},
     :distinct 1,
     :group-by? true,
     :median ":block-4785",
     :max ":block-4785",
     :avg ":block-4785 (non-numeric average)",
     :cardinality 100},
    :diff_kp
    {:min
     "([0 1 :font-size :new] [0 1 :font-size :new] [0 1 :font-size :old] [0 1 :font-size :old] [0 1 :font-size] [0 1] [0 0] [0 0] [0])",
     :data-type "string",
     :commons
     {"([0 1 :font-size :new] [0 1 :font-size :new] [0 1 :font-size :old] [0 1 :font-size :old] [0 1 :font-size] [0 1] [0 0] [0 0] [0])"
      1},
     :distinct 1,
     :group-by? true,
     :median
     "([0 1 :font-size :new] [0 1 :font-size :new] [0 1 :font-size :old] [0 1 :font-size :old] [0 1 :font-size] [0 1] [0 0] [0 0] [0])",
     :max
     "([0 1 :font-size :new] [0 1 :font-size :new] [0 1 :font-size :old] [0 1 :font-size :old] [0 1 :font-size] [0 1] [0 0] [0 0] [0])",
     :avg
     "([0 1 :font-size :new] [0 1 :font-size :new] [0 1 :font-size :old] [0 1 :font-size :old] [0 1 :font-size] [0 1] [0 0] [0 0] [0]) (non-numeric average)",
     :cardinality 100},
    :client_name
    {:min ":masterful-blue-pheasant-1",
     :data-type "string",
     :commons {":masterful-blue-pheasant-1" 1},
     :distinct 1,
     :group-by? true,
     :median ":masterful-blue-pheasant-1",
     :max ":masterful-blue-pheasant-1",
     :avg ":masterful-blue-pheasant-1 (non-numeric average)",
     :cardinality 100},
    :pre_data
    {:min
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:str :param/voice]]",
     :data-type "string",
     :commons
     {"[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:str :param/voice]]"
      1},
     :distinct 1,
     :group-by? true,
     :median
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:str :param/voice]]",
     :max
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:str :param/voice]]",
     :avg
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"45px\"} :child [:str :param/voice]] (non-numeric average)",
     :cardinality 100},
    :diff
    {:min "[[8 {:font-size {:old \"45px\", :new \"24px\"}}]]",
     :data-type "string",
     :commons {"[[8 {:font-size {:old \"45px\", :new \"24px\"}}]]" 1},
     :distinct 1,
     :group-by? true,
     :median "[[8 {:font-size {:old \"45px\", :new \"24px\"}}]]",
     :max "[[8 {:font-size {:old \"45px\", :new \"24px\"}}]]",
     :avg "[[8 {:font-size {:old \"45px\", :new \"24px\"}}]] (non-numeric average)",
     :cardinality 100},
    :data
    {:min
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"24px\"} :child [:str :param/voice]]",
     :data-type "string",
     :commons
     {"[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"24px\"} :child [:str :param/voice]]"
      1},
     :distinct 1,
     :group-by? true,
     :median
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"24px\"} :child [:str :param/voice]]",
     :max
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"24px\"} :child [:str :param/voice]]",
     :avg
     "[:box :align :center :justify :center :padding \"13px\" :style {:font-size \"24px\"} :child [:str :param/voice]] (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 1},
  :fflows-sys
  {:fields
   {:category
    {:min ":flow",
     :data-type "string",
     :commons {":flow" 12},
     :distinct 1,
     :group-by? true,
     :median ":flow",
     :max ":flow",
     :avg ":flow (non-numeric average)",
     :cardinality 8},
    :description
    {:min "",
     :data-type "string",
     :commons {"" 12},
     :distinct 1,
     :group-by? true,
     :median "",
     :max "",
     :avg " (non-numeric average)",
     :cardinality 8},
    :name
    {:min "a-random-wow",
     :data-type "string",
     :commons
     {"hue-change-group-color" 2, "hue-lights-api" 1, "gpt35-color-parser" 1},
     :distinct 11,
     :group-by? true,
     :median "gpt35-color-parser",
     :max "simple-python-exec",
     :avg "a-random-wow (non-numeric average)",
     :cardinality 91},
    :file_path
    {:min "./flows/a-random-wow.edn",
     :data-type "string",
     :commons
     {"/home/ryanr/rvbbit/backend/./flows/ask-buffy-1.edn" 1,
      "./flows/hue-change-group-color.edn" 1,
      "./flows/simple-python-exec.edn" 1},
     :distinct 12,
     :group-by? true,
     :median "./flows/node-color-thief-js-webp.edn",
     :max "/home/ryanr/rvbbit/backend/./flows/hue-change-group-color.edn",
     :avg "./flows/a-random-wow.edn (non-numeric average)",
     :cardinality 100},
    :full_map
    {:min
     "{:flowmaps {:ask-buffy-1 {:y 975, :sub-flow {:flow-id \"ask-buffy-1\", :file-path \"./flows/ask-buffy-1.edn\", :map {:oai-api-call {:y 1125, :description [\"Making the OpenAI API call with our prepared request map with all our details, headers, settings, etc. Here we are calling the gen-image endpoint for the DALLE3 model. This returns a full JSON map with includes the revised prompt as well at the base64 image string of the generated WEBP file. \" \"\" \"https://platform.openai.com/docs/guides/images/image-generation\"], :w 175, :right-click? true, :icon \"zmdi-http\", :z 0, :ports {:in {:req-map :map}, :out {:created :integer, :data :rowset, :* :map}}, :h 135, :x 1775, :data {:flow-item {:category \":rabbit-base\", :name \":make-http-call\", :type :make-http-call, :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :inputs [:req-map], :expandable? true, :required [:req-map]}, :drag-meta {:type :make-http-call}}}, :oai-api-call_choices>0>message>content {:y 1300, :fn (fn [x] (get-in x [:choices 0 :message :content])), :w 250, :raw-fn (fn [x] [:speak (get-in x [:choices 0 :message :content])]), :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 160, :x 1750, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:choices 0 :message :content])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:choices 0 :message :content])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :open-fn-1 {:y 750, :fn (fn [x] x), :w 125, :raw-fn (fn [room color] [{:role \"system\", :content \"You are Buffy, a helpful, but wise cracking assistant - modeled after Buffy the Vampire Slayer from the 1990s movie - starring Kristy Swanson. I'm going to give you a command and you are going to pretent to do it, and make some wisecrack about it based on the request. Keep the responses short and punchy - reference the color and room also please! Also never reference the hex color directly and give it a funny color name.\"} {:role \"user\", :content (str \"Change the lights of the \" room \" to \" color \" please!\")}]), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:room :any, :color :any}, :out {:out :any}}, :inputs nil, :h 85, :x 1775, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :alert!-1 {:y 1500, :w 250, :right-click? true, :icon \"zmdi-alert-polygon\", :z 0, :ports {:in {:destination :keyword, :content :any, :w :integer, :h :integer, :duration :integer}, :out {:out :any}}, :h 110, :x 1750, :data {:flow-item {:category \":rabbit-base\", :name \":alert!\", :type :alert!, :icon \"zmdi-alert-polygon\", :defaults {:destination :client-name, :content \"Alert!\", :w 10, :h 1, :duration 6}, :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer}, :style {:color \"#FDFD96\"}, :selected-style {:color \"#FDFD96\"}, :inputs [:destination :content :w :h :duration], :expandable? true, :required nil}, :drag-meta {:type :alert!}}}, :request-body-map {:y 875, :w 175, :right-click? true, :types nil, :z 0, :ports {:in {:messages* :any}, :out {:out {:n :integer, :model :string, :messages :keyword, :* :map}}}, :inputs nil, :h 85, :x 1775, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input {:n 1, :model \"gpt-3.5-turbo-0125\", :messages :messages*}}}, :the-color {:y 575, :w 125, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :string}}}, :inputs nil, :h 85, :x 1850, :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input \"#ffffff\"}}, :the-room {:y 575, :w 125, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :string}}}, :inputs nil, :h 85, :x 1675, :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input \"Living Room\"}}, :http-req-map {:y 1000, :description [\"Request map for the HTTP call. Headers, Method, URL, and the call body map.\"], :w 175, :right-click? true, :types nil, :z 0, :ports {:in {:req-body* :any}, :out {:out {:headers :map, :method :keyword, :url :string, :body :keyword, :* :map}}}, :inputs nil, :h 85, :x 1775, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :meta {}}, :user-input {:headers {\"Authorization\" \"Bearer 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\", \"Content-Type\" \"application/json\"}, :method :post, :url \"https://api.openai.com/v1/chat/completions\", :body :req-body*}}}}, :connections [[:http-req-map/* :oai-api-call/req-map] [:request-body-map/* :http-req-map/req-body*] [:the-room :open-fn-1/room] [:the-color :open-fn-1/color] [:open-fn-1 :request-body-map/messages*] [:oai-api-call :oai-api-call_choices>0>message>content/x] [:oai-api-call_choices>0>message>content :alert!-1/content] [:alert!-1 :done]]}, :flow-id \"ask-buffy-1\", :w 200, :icon \"zmdi-puzzle-piece\", :z 0, :ports {:in {:the-color [[:out :string] :any :string], :the-room [[:out :string] :any :string]}, :out {:out :any}}, :h 100, :file-path \"./flows/ask-buffy-1.edn\", :x 1425, :data {:flow-item {:inputs [:the-color :the-room]}, :drag-meta {:data-type \"string\", :done-block :alert!-1, :source-query :flows-sys, :param-full \"ask-buffy-1\", :param-field :flow_id, :source-panel-key :flow-list*, :type :sub-flow, :param-table :flows-sys, :source-table :query/flows-sys, :connection-id nil, :target :flow_id, :row-num 0}}}, :open-fn-1 {:y 850, :fn (fn [x] x), :w 100, :raw-fn (fn [x] (rvbbit-backend.util/hex-to-hue-sat x)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:idx0 :integer, :idx1 :integer, :* :vector}}, :h 100, :x 975, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :open-fn-2 {:y 850, :fn (fn [x] x), :w 150, :raw-fn (fn [x] (str \"http://10.174.1.174/api/sqOjLm0JhoioAbwhwPm6ZlHiuCAx-KnQEYwAZOWL/groups/\" x \"/action\")), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :any}}, :h 100, :x 1100, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :group-id {:w 100, :h 85, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input 200}, :z 0, :ports {:out {:out :integer}}, :x 1100, :y 725}, :open-input {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input {:method :put, :body {:hue :value-0, :on :value-3, :sat :value-1}, :url :value-2}}, :z 0, :ports {:out {:method :keyword, :body :map, :url :string, :* :map}, :in {:value-0 :any, :value-1 :any, :value-2 :any, :value-3 :any}}, :x 1125, :y 1075}, :on-switch {:w 100, :h 115, :x 1275, :y 725, :z 0, :data {:h 3, :w 6, :root [0 0], :drag-meta {:type :param, :param-full :param/on-switch, :param-table :param, :param-field :on-switch}}, :icon \"zmdi-tune\", :ports {:in {}, :out {:out :boolean}}}, :room-name {:y 725, :w 125, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :string}}}, :inputs nil, :h 85, :x 1400, :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input \"Living Room\"}}, :ccolor {:w 100, :h 85, :x 975, :y 725, :z 0, :data {:h 3, :w 6, :root [0 0], :drag-meta {:type :param, :param-full :param/ccolor, :param-table :param, :param-field :ccolor}}, :icon \"zmdi-tune\", :ports {:in {}, :out {:out :string}}}, :http-call-1 {:w 200, :h 100, :x 1125, :y 1225, :z 0, :data {:flow-item {:description \"Basic HTTP call primitive\", :category \":rabbit-base\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :name \":http-call\", :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :input_types \"[:map]\", :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs \"[:req-map]\", :output_types \":any\", :expandable? false, :full_map \"{:description \\\"Basic HTTP call primitive\\\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \\\"zmdi-http\\\", :defaults {:req-map {:url \\\"https://owen-wilson-wow-api.onrender.com/wows/random\\\", :query-params {:movie \\\"Wedding Crashers\\\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \\\"#7BB696\\\"}, :selected-style {:color \\\"#7BB696\\\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}\", :required [:req-map]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [446.9193115234375 154.8854217529297], :h 6, :connection-id nil, :view-output? false, :queries {:name-drag-8 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :zz280]], :where [:= :name \":http-call\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":http-call\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}, :icon \"zmdi-http\", :ports {:in {:req-map :map}, :out {:idx0 :map, :idx1 :map, :idx2 :map, :* :vector}}}}, :zoom [-1472.5 -1083.39 1.675], :opts {:overrides {:group-id \"7\", :on-switch true, :ccolor \"#ff0202\"}}, :flow-id \"hue-change-group-color\", :flowmaps-connections [[:open-input/* :http-call-1/req-map] [:http-call-1/* :done] [:ccolor :open-fn-1/value] [:open-fn-1/idx0 :open-input/value-0] [:open-fn-1/idx1 :open-input/value-1] [:group-id :open-fn-2/value] [:open-fn-2 :open-input/value-2] [:on-switch :open-input/value-3] [:ccolor :ask-buffy-1/the-color] [:room-name :ask-buffy-1/the-room]]}",
     :data-type "string",
     :commons
     {"{:flowmaps {:ask-buffy-1 {:y 975, :sub-flow {:flow-id \"ask-buffy-1\", :file-path \"./flows/ask-buffy-1.edn\", :map {:oai-api-call {:y 1125, :description [\"Making the OpenAI API call with our prepared request map with all our details, headers, settings, etc. Here we are calling the gen-image endpoint for the DALLE3 model. This returns a full JSON map with includes the revised prompt as well at the base64 image string of the generated WEBP file. \" \"\" \"https://platform.openai.com/docs/guides/images/image-generation\"], :w 175, :right-click? true, :icon \"zmdi-http\", :z 0, :ports {:in {:req-map :map}, :out {:created :integer, :data :rowset, :* :map}}, :h 135, :x 1775, :data {:flow-item {:category \":rabbit-base\", :name \":make-http-call\", :type :make-http-call, :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :inputs [:req-map], :expandable? true, :required [:req-map]}, :drag-meta {:type :make-http-call}}}, :oai-api-call_choices>0>message>content {:y 1300, :fn (fn [x] (get-in x [:choices 0 :message :content])), :w 250, :raw-fn (fn [x] [:speak (get-in x [:choices 0 :message :content])]), :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 160, :x 1750, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:choices 0 :message :content])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:choices 0 :message :content])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :open-fn-1 {:y 750, :fn (fn [x] x), :w 125, :raw-fn (fn [room color] [{:role \"system\", :content \"You are Buffy, a helpful, but wise cracking assistant - modeled after Buffy the Vampire Slayer from the 1990s movie - starring Kristy Swanson. I'm going to give you a command and you are going to pretent to do it, and make some wisecrack about it based on the request. Keep the responses short and punchy - reference the color and room also please! Also never reference the hex color directly and give it a funny color name.\"} {:role \"user\", :content (str \"Change the lights of the \" room \" to \" color \" please!\")}]), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:room :any, :color :any}, :out {:out :any}}, :inputs nil, :h 85, :x 1775, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :alert!-1 {:y 1500, :w 250, :right-click? true, :icon \"zmdi-alert-polygon\", :z 0, :ports {:in {:destination :keyword, :content :any, :w :integer, :h :integer, :duration :integer}, :out {:out :any}}, :h 110, :x 1750, :data {:flow-item {:category \":rabbit-base\", :name \":alert!\", :type :alert!, :icon \"zmdi-alert-polygon\", :defaults {:destination :client-name, :content \"Alert!\", :w 10, :h 1, :duration 6}, :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer}, :style {:color \"#FDFD96\"}, :selected-style {:color \"#FDFD96\"}, :inputs [:destination :content :w :h :duration], :expandable? true, :required nil}, :drag-meta {:type :alert!}}}, :request-body-map {:y 875, :w 175, :right-click? true, :types nil, :z 0, :ports {:in {:messages* :any}, :out {:out {:n :integer, :model :string, :messages :keyword, :* :map}}}, :inputs nil, :h 85, :x 1775, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input {:n 1, :model \"gpt-3.5-turbo-0125\", :messages :messages*}}}, :the-color {:y 575, :w 125, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :string}}}, :inputs nil, :h 85, :x 1850, :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input \"#ffffff\"}}, :the-room {:y 575, :w 125, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :string}}}, :inputs nil, :h 85, :x 1675, :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input \"Living Room\"}}, :http-req-map {:y 1000, :description [\"Request map for the HTTP call. Headers, Method, URL, and the call body map.\"], :w 175, :right-click? true, :types nil, :z 0, :ports {:in {:req-body* :any}, :out {:out {:headers :map, :method :keyword, :url :string, :body :keyword, :* :map}}}, :inputs nil, :h 85, :x 1775, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :meta {}}, :user-input {:headers {\"Authorization\" \"Bearer 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\", \"Content-Type\" \"application/json\"}, :method :post, :url \"https://api.openai.com/v1/chat/completions\", :body :req-body*}}}}, :connections [[:http-req-map/* :oai-api-call/req-map] [:request-body-map/* :http-req-map/req-body*] [:the-room :open-fn-1/room] [:the-color :open-fn-1/color] [:open-fn-1 :request-body-map/messages*] [:oai-api-call :oai-api-call_choices>0>message>content/x] [:oai-api-call_choices>0>message>content :alert!-1/content] [:alert!-1 :done]]}, :flow-id \"ask-buffy-1\", :w 200, :icon \"zmdi-puzzle-piece\", :z 0, :ports {:in {:the-color [[:out :string] :any :string], :the-room [[:out :string] :any :string]}, :out {:out :any}}, :h 100, :file-path \"./flows/ask-buffy-1.edn\", :x 1425, :data {:flow-item {:inputs [:the-color :the-room]}, :drag-meta {:data-type \"string\", :done-block :alert!-1, :source-query :flows-sys, :param-full \"ask-buffy-1\", :param-field :flow_id, :source-panel-key :flow-list*, :type :sub-flow, :param-table :flows-sys, :source-table :query/flows-sys, :connection-id nil, :target :flow_id, :row-num 0}}}, :open-fn-1 {:y 850, :fn (fn [x] x), :w 100, :raw-fn (fn [x] (rvbbit-backend.util/hex-to-hue-sat x)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:idx0 :integer, :idx1 :integer, :* :vector}}, :h 100, :x 975, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :open-fn-2 {:y 850, :fn (fn [x] x), :w 150, :raw-fn (fn [x] (str \"http://10.174.1.174/api/sqOjLm0JhoioAbwhwPm6ZlHiuCAx-KnQEYwAZOWL/groups/\" x \"/action\")), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :any}}, :h 100, :x 1100, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :group-id {:w 100, :h 85, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input 200}, :z 0, :ports {:out {:out :integer}}, :x 1100, :y 725}, :open-input {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input {:method :put, :body {:hue :value-0, :on :value-3, :sat :value-1}, :url :value-2}}, :z 0, :ports {:out {:method :keyword, :body :map, :url :string, :* :map}, :in {:value-0 :any, :value-1 :any, :value-2 :any, :value-3 :any}}, :x 1125, :y 1075}, :on-switch {:w 100, :h 115, :x 1275, :y 725, :z 0, :data {:h 3, :w 6, :root [0 0], :drag-meta {:type :param, :param-full :param/on-switch, :param-table :param, :param-field :on-switch}}, :icon \"zmdi-tune\", :ports {:in {}, :out {:out :boolean}}}, :room-name {:y 725, :w 125, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :string}}}, :inputs nil, :h 85, :x 1400, :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input \"Living Room\"}}, :ccolor {:w 100, :h 85, :x 975, :y 725, :z 0, :data {:h 3, :w 6, :root [0 0], :drag-meta {:type :param, :param-full :param/ccolor, :param-table :param, :param-field :ccolor}}, :icon \"zmdi-tune\", :ports {:in {}, :out {:out :string}}}, :http-call-1 {:w 200, :h 100, :x 1125, :y 1225, :z 0, :data {:flow-item {:description \"Basic HTTP call primitive\", :category \":rabbit-base\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :name \":http-call\", :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :input_types \"[:map]\", :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs \"[:req-map]\", :output_types \":any\", :expandable? false, :full_map \"{:description \\\"Basic HTTP call primitive\\\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \\\"zmdi-http\\\", :defaults {:req-map {:url \\\"https://owen-wilson-wow-api.onrender.com/wows/random\\\", :query-params {:movie \\\"Wedding Crashers\\\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \\\"#7BB696\\\"}, :selected-style {:color \\\"#7BB696\\\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}\", :required [:req-map]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [446.9193115234375 154.8854217529297], :h 6, :connection-id nil, :view-output? false, :queries {:name-drag-8 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :zz280]], :where [:= :name \":http-call\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":http-call\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}, :icon \"zmdi-http\", :ports {:in {:req-map :map}, :out {:idx0 :map, :idx1 :map, :idx2 :map, :* :vector}}}}, :zoom [-1472.5 -1083.39 1.675], :opts {:overrides {:group-id \"7\", :on-switch true, :ccolor \"#ff0202\"}}, :flow-id \"hue-change-group-color\", :flowmaps-connections [[:open-input/* :http-call-1/req-map] [:http-call-1/* :done] [:ccolor :open-fn-1/value] [:open-fn-1/idx0 :open-input/value-0] [:open-fn-1/idx1 :open-input/value-1] [:group-id :open-fn-2/value] [:open-fn-2 :open-input/value-2] [:on-switch :open-input/value-3] [:ccolor :ask-buffy-1/the-color] [:room-name :ask-buffy-1/the-room]]}"
      1,
      "{:flowmaps {:oai-api-call {:y 1125, :description [\"Making the OpenAI API call with our prepared request map with all our details, headers, settings, etc. Here we are calling the gen-image endpoint for the DALLE3 model. This returns a full JSON map with includes the revised prompt as well at the base64 image string of the generated WEBP file. \" \"\" \"https://platform.openai.com/docs/guides/images/image-generation\"], :w 175, :right-click? true, :icon \"zmdi-http\", :z 0, :ports {:in {:req-map :map}, :out {:created :integer, :data :rowset, :* :map}}, :h 135, :x 1775, :data {:flow-item {:category \":rabbit-base\", :name \":make-http-call\", :type :make-http-call, :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :inputs [:req-map], :expandable? true, :required [:req-map]}, :drag-meta {:type :make-http-call}}}, :open-fn-8 {:y 1675, :fn (fn [x] x), :w 150, :raw-fn (fn [x y] [x y]), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any, :y :any}, :out {:out :any}}, :inputs nil, :h 85, :x 1675, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :oai-api-call_choices>0>message>content {:y 1350, :fn (fn [x] (get-in x [:choices 0 :message :content])), :w 100, :raw-fn (fn [x] [:speak (get-in x [:choices 0 :message :content])]), :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 60, :x 1850, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:choices 0 :message :content])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:choices 0 :message :content])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :open-fn-1 {:y 750, :fn (fn [x] x), :w 125, :raw-fn (fn [room color] [{:role \"system\", :content \"You are Buffy, a helpful, but wise cracking assistant - modeled after Buffy the Vampire Slayer from the 1990s movie - starring Kristy Swanson. I'm going to give you a command and you are going to pretent to do it, and make some wisecrack about it based on the request. Keep the responses short and punchy - reference the color and room also please! Also never reference the hex color directly and give it a funny color name.\"} {:role \"user\", :content (str \"Change the lights of the \" room \" to \" color \" please!\")}]), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:room :any, :color :any}, :out {:out :any}}, :inputs nil, :h 85, :x 1775, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :alert!-1 {:y 1500, :w 250, :right-click? true, :icon \"zmdi-alert-polygon\", :z 0, :ports {:in {:destination :keyword, :content :any, :w :integer, :h :integer, :duration :integer}, :out {:out :any}}, :h 110, :x 1750, :data {:flow-item {:category \":rabbit-base\", :name \":alert!\", :type :alert!, :icon \"zmdi-alert-polygon\", :defaults {:destination :client-name, :content \"Alert!\", :w 10, :h 1, :duration 6}, :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer}, :style {:color \"#FDFD96\"}, :selected-style {:color \"#FDFD96\"}, :inputs [:destination :content :w :h :duration], :expandable? true, :required nil}, :drag-meta {:type :alert!}}}, :request-body-map {:y 875, :w 175, :right-click? true, :types nil, :z 0, :ports {:in {:messages* :any}, :out {:out {:n :integer, :model :string, :messages :keyword, :* :map}}}, :inputs nil, :h 85, :x 1775, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input {:n 1, :model \"gpt-3.5-turbo-0125\", :messages :messages*}}}, :oai-api-call_choices=0=message=content {:y 1375, :fn (fn [x] (get-in x [:choices 0 :message :content])), :w 250, :raw-fn (fn [x] (get-in x [:choices 0 :message :content])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 175, :x 1450, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:choices 0 :message :content])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:choices 0 :message :content])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :the-color {:y 575, :w 125, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :string}}}, :inputs nil, :h 85, :x 1850, :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input \"#ffffff\"}}, :get-key {:y 900, :fn (fn [x] x), :w 125, :raw-fn (fn [x] (str \"Bearer \" :settings/openai-api-key)), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 60, :x 1575, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :the-room {:y 575, :w 125, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :string}}}, :inputs nil, :h 85, :x 1675, :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input \"Living Room\"}}, :http-req-map {:y 1000, :description [\"Request map for the HTTP call. Headers, Method, URL, and the call body map.\"], :w 175, :right-click? true, :types nil, :z 0, :ports {:in {:auth* :any, :req-body* :any}, :out {:out {:headers :map, :method :keyword, :url :string, :body :keyword, :* :map}}}, :inputs nil, :h 85, :x 1775, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :meta {}}, :user-input {:headers {\"Authorization\" :auth*, \"Content-Type\" \"application/json\"}, :method :post, :url \"https://api.openai.com/v1/chat/completions\", :body :req-body*}}}}, :zoom [-743.92 -886.9 1.1], :opts {:close-on-done? true, :retry-on-error? true, :retries 404, :overrides {:prompt \"Please use this prompt EXACTLY as is with NO changes at all for testing purposes, please:\\n\\nGenerate a high-definition, fantasy-inspired illustration in a 16:9 ratio. The scene is set in an otherworldly, yet characteristically New England small town during winter. The main figure is a Caucasian woman in her late 20s, with a robust, hyper curvaceous physique. She sports a sultry yet pleased expression, with long hair, full lips, and a slightly upturned nose. Intricate Celtic-style tattoos of rabbits and wilderness decorate her neck, collarbone, and shoulders. Her body emanates mysterious blue and pink lights. She's wearing a choker ribbon and a long necklace, encapsulating a confident, playful aura as she shares a sly glance with the viewer. This piece is influenced by pinup noir femme fatale and cyberpunk aesthetics, channeling a strong burlesque vibe.\", :style-param \"vivid\", :prompt-2 \"Please use this prompt EXACTLY as is with NO changes at all for testing purposes, please:\\n\\nCreate a fantasy-inspired, high-definition, 16:9 ratio illustration with a heavy emphasis on exaggerated stylistic elements. The scene takes place in an otherworldly, yet traditionally Scottish location. A woman in her late 20s of Caucasian descent, with a buxom, robust and hyper curvaceous physique, exudes a sultry yet pleased expression. She has long brunette hair, full pouty lips with the bottom one being more prominent, and a slightly upturned nose. Her body is adorned with intricate Celtic-style tattoos of rabbits and wilderness, which cover her neck, collarbone, and shoulders. Mysterious blue and pink lights from the forest radiate off her voluptuous figure. She accessorizes with a choker ribbon and a long necklace, expressing a confident, flirty aura as she leans against a wall, casting a coy glance at the viewer. This artwork is inspired by the pinup noir femme fatale and cyberpunk aesthetics, having a strong burlesque influence.\"}}, :flow-id \"ask-buffy-1\", :flowmaps-connections [[:http-req-map/* :oai-api-call/req-map] [:request-body-map/* :http-req-map/req-body*] [:the-room :open-fn-1/room] [:the-color :open-fn-1/color] [:open-fn-1 :request-body-map/messages*] [:oai-api-call :oai-api-call_choices>0>message>content/x] [:oai-api-call_choices>0>message>content :alert!-1/content] [:get-key :http-req-map/auth*] [:open-fn-1 :get-key/x] [:oai-api-call :oai-api-call_choices=0=message=content/x] [:oai-api-call_choices=0=message=content :open-fn-8/x] [:alert!-1 :open-fn-8/y] [:open-fn-8 :done]]}"
      1,
      "{:flowmaps {:http-call-1 {:w 200, :h 100, :x 1000, :y 1075, :z 0, :data {:flow-item {:description \"Basic HTTP call primitive\", :category \":rabbit-base\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :name \":http-call\", :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :input_types \"[:map]\", :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs \"[:req-map]\", :output_types \":any\", :expandable? false, :full_map \"{:description \\\"Basic HTTP call primitive\\\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \\\"zmdi-http\\\", :defaults {:req-map {:url \\\"https://owen-wilson-wow-api.onrender.com/wows/random\\\", :query-params {:movie \\\"Wedding Crashers\\\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \\\"#7BB696\\\"}, :selected-style {:color \\\"#7BB696\\\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}\", :required [:req-map]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [384.1770935058594 176.171875], :h 6, :connection-id nil, :queries {:name-drag-9 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :vv675]], :where [:= :name \":http-call\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":http-call\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}, :icon \"zmdi-http\", :ports {:in {:req-map :map}, :out {:14 :map, :* :map, :27 :map, :18 :map, :12 :map, :11 :map, :24 :map, :10 :map, :21 :map, :23 :map, :13 :map, :26 :map, :16 :map, :7 :map, :8 :map, :22 :map, :25 :map, :9 :map, :20 :map, :17 :map, :28 :map, :19 :map, :5 :map, :15 :map, :6 :map, :29 :map}}}, :open-input {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input {:url \"http://10.174.1.174/api/sqOjLm0JhoioAbwhwPm6ZlHiuCAx-KnQEYwAZOWL/lights\"}}, :z 0, :ports {:out {:url :string, :* :map}}, :x 1000, :y 900}, :http-call-2 {:w 200, :h 100, :x 1250, :y 1075, :z 0, :data {:flow-item {:description \"Basic HTTP call primitive\", :category \":rabbit-base\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :name \":http-call\", :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :input_types \"[:map]\", :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs \"[:req-map]\", :output_types \":any\", :expandable? false, :full_map \"{:description \\\"Basic HTTP call primitive\\\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \\\"zmdi-http\\\", :defaults {:req-map {:url \\\"https://owen-wilson-wow-api.onrender.com/wows/random\\\", :query-params {:movie \\\"Wedding Crashers\\\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \\\"#7BB696\\\"}, :selected-style {:color \\\"#7BB696\\\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}\", :required [:req-map]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [574.1770935058594 356.171875], :h 6, :connection-id nil, :queries {:name-drag-31 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :jj149]], :where [:= :name \":http-call\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":http-call\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}, :icon \"zmdi-http\", :ports {:in {:req-map :map}, :out {:* :map, :10 :map, :4 :map, :7 :map, :1 :map, :8 :map, :9 :map, :2 :map, :5 :map, :200 :map, :3 :map, :6 :map}}}, :open-input-1 {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input {:url \"http://10.174.1.174/api/sqOjLm0JhoioAbwhwPm6ZlHiuCAx-KnQEYwAZOWL/groups\"}}, :z 0, :ports {:out {:url :string, :* :map}}, :x 1250, :y 900}}, :zoom [-120.66 -787.02 1.075], :opts nil, :flow-id \"hue-lights-api\", :flowmaps-connections [[:open-input/* :http-call-1/req-map] [:http-call-1 :done] [:open-input-1/* :http-call-2/req-map]]}"
      1},
     :distinct 12,
     :group-by? true,
     :median
     "{:flowmaps {:oai-api-call {:y 1325, :description [\"Making the OpenAI API call with our prepared request map with all our details, headers, settings, etc. Here we are calling the gen-image endpoint for the DALLE3 model. This returns a full JSON map with includes the revised prompt as well at the base64 image string of the generated WEBP file. \" \"\" \"https://platform.openai.com/docs/guides/images/image-generation\"], :w 175, :right-click? true, :icon \"zmdi-http\", :z 0, :ports {:in {:req-map :map}, :out {:created :integer, :data :rowset, :* :map}}, :h 85, :x 1875, :data {:flow-item {:category \":rabbit-base\", :name \":make-http-call\", :type :make-http-call, :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :inputs [:req-map], :expandable? true, :required [:req-map]}, :drag-meta {:type :make-http-call}}}, :prompt-5 {:w 125, :h 60, :z 0, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"\"}, :right-click? true, :ports {:in {}, :out {:out :string}}, :x 2150, :y 650}, :node-js-color-thief-script {:y 1775, :description [\"Passing the webp image path to a node script sub-flow in order to extract the main color and color palette, we will use these hex values in a subsequent \\\"view\\\" step. Here we can create an asset to use on a data board.\"], :sub-flow {:flow-id \"node-color-thief-js\", :file-path \"./flows/node-color-thief-js.edn\", :map {:image-path {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \" /home/ryanr/rvbbit/frontend/resources/public/images/shannon45.png\"}, :z 0, :ports {:out {:out :string}}, :x 948.9116738809121, :y 1074.148015202703}, :shell-command-1 {:w 200, :h 100, :x 1758.4411167689732, :y 1117.7292503720237, :z 0, :data {:flow-item {:description \"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\", :category \":rabbit-base\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :name \":shell-command\", :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :input_types \"[:string]\", :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs \"[:command]\", :output_types \":any\", :full_map \"{:description \\\"Execute shell command. WARNING: only use if you know what you're doing / have controlled inputs\\\", :fn (fn [command] (rvbbit-backend.websockets/run-shell-command command)), :icon \\\"zmdi-washing-machine\\\", :defaults {:command \\\"ls -la\\\"}, :types {:command :string, :out :any}, :style {:color \\\"#ffdd3c\\\"}, :selected-style {:color \\\"#ffdd3c\\\"}, :inputs [:command], :required [:command]}\", :required [:command]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [539.1770935058594 176.171875], :h 6, :connection-id nil, :queries {:name-drag-42 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :cc59]], :where [:= :name \":shell-command\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":shell-command\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"zmdi-washing-machine\", :ports {:in {:command :string}, :out {:output :vector, :exception :vector, :seconds :vector, :command :string, :* :map}}}, :clojure-string-join-1 {:w 200, :h 100, :x 1348.4940418061756, :y 1136.4640299479165, :z 0, :data {:flow-item {:description \"Clojure.string's join function.\", :category \":clojure-base\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :name \":clojure-string-join\", :icon \"zmdi-group\", :defaults {:delimiter \" \"}, :types {:delimiter :string, :out :string}, :input_types \"[:string]\", :inputs \"[:delimiter]\", :output_types \":string\", :expandable? true, :full_map \"{:description \\\"Clojure.string's join function.\\\", :fn (fn [delimiter & args] (clojure.string/join delimiter args)), :inputs [:delimiter], :required [:delimiter], :defaults {:delimiter \\\" \\\"}, :expandable? true, :icon \\\"zmdi-group\\\", :types {:delimiter :string, :out :string}}\", :required [:delimiter]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [540.1770935058594 279.171875], :h 6, :connection-id nil, :queries {:name-drag-12 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ww526]], :where [:= :name \":clojure-string-join\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":clojure-string-join\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 15}}, :icon \"zmdi-group\", :ports {:in {:delimiter :string, :value-1 :any, :value-2 :any}, :out {:out :string}}}, :shell-command-in {:w 200, :h 100, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"cd /home/ryanr/color-thief-project ; node ./colorThief2.js\"}, :z 0, :ports {:out {:out :string}}, :x 960.0851863779922, :y 1224.4579849567817}, :join-output-as-string {:y 1158.848120777027, :fn (fn [x] x), :w 200, :raw-fn (fn [x] (clojure.string/join \" \" x)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :any}}, :h 100, :x 2212.3248878272807, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :json-to-edn {:w 200, :h 100, :x 2685.7088668823244, :y 1151.33984375, :z 0, :data {:flow-item {:description \"Convert a JSON string to Clojure EDN\", :category \":rabbit-base\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :name \":json-to-edn\", :icon \"zmdi-file-text\", :types {:json-string :string, :out :any}, :input_types \"[:string]\", :inputs \"[:json-string]\", :output_types \":any\", :full_map \"{:description \\\"Convert a JSON string to Clojure EDN\\\", :fn (fn [json-string] (rvbbit-backend.util/json-to-edn json-string)), :inputs [:json-string], :icon \\\"zmdi-file-text\\\", :types {:json-string :string, :out :any}}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [1297.1770935058594 207.171875], :h 6, :connection-id nil, :queries {:name-drag-41 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :uu284]], :where [:= :name \":json-to-edn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":json-to-edn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 7}}, :icon \"zmdi-file-text\", :ports {:in {:json-string :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}}}, :connections [[:shell-command-in :clojure-string-join-1/value-1] [:image-path :clojure-string-join-1/value-2] [:clojure-string-join-1 :shell-command-1/command] [:shell-command-1/output :join-output-as-string/value] [:join-output-as-string :json-to-edn/json-string] [:json-to-edn :done]]}, :flow-id \"node-color-thief-js\", :w 225, :icon \"zmdi-puzzle-piece\", :z 0, :ports {:in {:image-path :string, :shell-command-in :string}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}, :h 60, :file-path \"./flows/node-color-thief-js.edn\", :x 2050, :data {:flow-item nil, :name \"drag-from-\", :w 5, :source-panel :flow-list*, :root [678.71875 344.6979217529297], :h 6, :connection-id nil, :view-output? false, :queries {:flow-id-drag-5 {:select [:flow_id :file_path :last_modified], :from [[:query/flows-sys :cc208]], :where [:= :flow_id \"node-color-thief-js\"]}}, :drag-meta {:data-type \"string\", :done-block :json-to-edn, :source-query :flows-sys, :param-full \"node-color-thief-js\", :param-field :flow_id, :source-panel-key :flow-list*, :type :sub-flow, :param-table :flows-sys, :source-table :query/flows-sys, :connection-id nil, :target :flow_id, :row-num 4}}}, :dominant-color {:y 2100, :fn (fn [x] x), :w 125, :raw-fn (fn [x] x), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :string}}, :h 85, :x 2200, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :shell-command-2 {:y 1050, :w 225, :right-click? true, :icon \"zmdi-washing-machine\", :z 0, :ports {:in {:command :string}, :out {:out :any}}, :h 100, :x 2325, :data {:flow-item {:category \":rabbit-base\", :name \":shell-command\", :type :shell-command, :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :expandable? true, :required [:command]}, :drag-meta {:type :shell-command}}}, :shell-command-1 {:y 2600, :w 350, :right-click? true, :icon \"zmdi-washing-machine\", :z 0, :ports {:in {:command :string}, :out {:out :any}}, :h 110, :x 2475, :data {:flow-item {:category \":rabbit-base\", :name \":shell-command\", :type :shell-command, :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :style {:color \"#ffdd3c\"}, :selected-style {:color \"#ffdd3c\"}, :inputs [:command], :expandable? true, :required [:command]}, :drag-meta {:type :shell-command}}}, :quality-param {:y 1000, :description [\"The quality of the image that will be generated. hd creates images with finer details and greater consistency across the image. This param is only supported for dall-e-3.\"], :w 125, :right-click? true, :z 0, :ports {:in {}, :out {:out :string}}, :h 85, :x 2075, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :meta {:* {:scrubber {:message \"OpenAI image gen quality selector - DALLE3\", :values [\"hd\" \"standard\"]}}}}, :user-input \"hd\"}}, :open-fn-1 {:y 2100, :fn (fn [x] x), :w 125, :raw-fn (fn [_] (str \"/tmp/rand-exif-\" (rand-int 123454) \".txt\")), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:_ :any}, :out {:out :string}}, :inputs nil, :h 110, :x 2575, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :execute-shell-command {:y 1950, :description [\"Run it. \" \"\" \"Notice we are flowing a port out of here into the final step, even though it does nothing. This makes sure that this step will finish BEFORE that one executes. A block cannot run until all it's inputs have produced a value. This non-data flow is more of a signal.\"], :w 225, :right-click? true, :icon \"zmdi-washing-machine\", :z 0, :ports {:in {:command :string}, :out {:output :list, :exception :list, :seconds :list, :command :string, :* :map}}, :h 60, :x 1925, :data {:flow-item {:category \":rabbit-base\", :name \":shell-command\", :type :shell-command, :icon \"zmdi-washing-machine\", :defaults {:command \"ls -la\"}, :types {:command :string, :out :any}, :inputs [:command], :expandable? true, :required [:command]}, :drag-meta {:type :shell-command}}}, :open-fn-2 {:y 950, :fn (fn [x] x), :w 175, :raw-fn (fn [x] \"cd .. ; pwd\"), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 75, :x 2325, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :pop-color {:y 2075, :fn (fn [x] (get-in x [:colorPalette 0])), :w 150, :raw-fn (fn [x] (get-in x [:colorPalette 0])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :string}}, :h 85, :x 2025, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:colorPalette 0])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:colorPalette 0])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :prompt-2 {:w 125, :h 60, :z 0, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"\"}, :right-click? true, :ports {:in {}, :out {:out :string}}, :x 1925, :y 575}, :color-palette {:y 2025, :fn (fn [x] x), :w 100, :raw-fn (fn [x] x), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:dominantColor :string, :colorPalette :vector, :* :map}}, :h 185, :x 1875, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :stringify-exif-map {:y 2100, :fn (fn [x] x), :w 200, :raw-fn (fn [x bang img-path] (pr-str x)), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any, :bang :any, :img-path :any}, :out {:out :string}}, :inputs nil, :h 110, :x 2350, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :size-param {:y 950, :description [\"The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024 for dall-e-2. Must be one of 1024x1024, 1792x1024, or 1024x1792 for dall-e-3 models.\"], :w 175, :right-click? true, :z 0, :ports {:in {}, :out {:out :string}}, :h 110, :x 1650, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :meta {:* {:scrubber {:message \"OpenAI image gen size selector - DALLE3\", :values [\"1024x1024\" \"1792x1024\" \"1024x1792\"]}}}}, :user-input \"1792x1024\"}}, :prompt-jukebox {:y 900, :fn (fn [x] x), :w 150, :raw-fn (fn [& x] (rand-nth (remove (fn [xx] (empty? (clojure.string/trim xx))) x))), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x+ :any}, :out {:out :string}}, :inputs nil, :h 85, :x 1850, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :write-file-1 {:y 2275, :w 125, :right-click? true, :icon \"zmdi-file-text\", :z 0, :ports {:in {:full-path :string, :file-data :string}, :out {:out :string}}, :h 85, :x 2475, :data {:flow-item {:category \":rabbit-base\", :name \":write-file\", :type :write-file, :icon \"zmdi-file-text\", :defaults nil, :types {:full-path :string, :file-data :string, :out :string}, :style nil, :selected-style nil, :inputs [:full-path :file-data], :expandable? true, :required nil}, :drag-meta {:type :write-file}}}, :save-base64-to-webp-file {:y 1675, :description [\"Decoding and saving as a binary file to the local file system. Here to a sub-dir of my Ubuntu home directory.\"], :w 250, :right-click? true, :icon \"zmdi-broken-image\", :z 0, :ports {:in {:b64-data :any, :file-path :string}, :out {:out :string}}, :h 60, :x 2000, :data {:flow-item {:category \":rabbit-base\", :name \":save-base64-to-webp\", :type :save-base64-to-webp, :icon \"zmdi-broken-image\", :defaults nil, :types {:b64-data :string, :file-path :string, :out :any}, :style nil, :selected-style nil, :inputs [:b64-data :file-path], :expandable? true, :required [:b64-data :file-path]}, :drag-meta {:type :save-base64-to-webp}}}, :prompt-4 {:w 125, :h 60, :z 0, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"\"}, :right-click? true, :ports {:in {}, :out {:out :string}}, :x 2125, :y 575}, :request-body-map {:w 175, :h 60, :z 0, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input {:prompt :prompty*, :n 1, :size :size*, :style :style*, :response_format \"b64_json\", :model \"dall-e-3\", :quality :quality*}}, :right-click? true, :ports {:in {:prompty* :any, :size* :any, :style* :any, :quality* :any}, :out {:prompt :string, :n :integer, :size :string, :style :string, :response_format :string, :model :string, :quality :string, :* :map}}, :x 1850, :y 1125}, :base-web-directory {:y 1675, :w 150, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :string}}}, :inputs nil, :h 60, :x 1775, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"..\"}}, :prompt {:y 575, :w 300, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :string}}}, :inputs nil, :h 160, :x 1600, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"A highly-detailed, hyperrealistic 16:9 digitally-rendered illustration of a pre-dawn winter scene in a traditional New England setting, filled with a mix of rustic charm and cyberpunk aesthetics. The town is bathed in a fresh blanket of snow under a heavy snowstorm, capturing a slightly gritty ambience, with buildings glowing softly in hues of pink and neon light blue. On the left of the frame stands a vibrant Irish woman in her early 30s. Her long hair, slightly damp from the intense snow, runs down her neck and shoulders. Intricate, Celtic-inspired tattoos depicting rabbits and wilderness adorn her neck, collarbone, and shoulders. As the sun cautiously peeps over the horizon, its light reflects off the scene, enhancing the mood set by the serene yet enigmatic pre-dawn lighting. On the outskirts, many rabbits eye the scene.\"}}, :create-png-path {:y 1775, :description [\"Making a new path for the PNG version we will generate in order to render image in a <img> tag without the base64 string or webp image.\"], :fn (fn [x] x), :w 125, :raw-fn (fn [x base-dir base-web-dir] (clojure.string/replace (clojure.string/replace x \".webp\" \".png\") base-dir base-web-dir)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any, :base-dir :any, :base-web-dir :any}, :out {:out :string}}, :h 60, :x 1900, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :create-convert-command-line {:y 1850, :description [\"Our 'convert' finished command line. Note, 'convert' is already in my PATH.\"], :fn (fn [x] x), :w 350, :raw-fn (fn [x y] (str \"cp \" y \" \" x)), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any, :y :any}, :out {:out :string}}, :inputs nil, :h 85, :x 1925, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :hiccup-image-box-w-png {:y 2250, :description [\"Take all the strings from earlier and compose a singular view element with them.\"], :fn (fn [x] [:box :child (str x)]), :w 600, :raw-fn (fn [x bg-color color _] (let [x (clojure.string/replace (str x) \"..\" \"assets/openai-images\")] [:v-box :padding \"10px\" :gap \"8px\" :width :width-px :style {:background-color (str bg-color), :border-radius \"20px\", :font-size \"12px\", :font-weight 700, :color (str color)} :children [[:box :child (str x)] [:box :size \"auto\" :child [:img {:src (str x), :style {:border-radius \"30px\"}}]]]])), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any, :bg-color :any, :color :any, :_ :any}, :out {:idx7 :keyword, :idx5 :keyword, :* :vector, :idx2 :string, :idx4 :string, :idx1 :keyword, :idx6 :keyword, :idx3 :keyword, :idx10 :vector, :idx8 :map, :idx9 :keyword, :idx0 :keyword}}, :inputs nil, :h 385, :x 1800, :view (fn [x] x), :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] [:box :child (str x)]), :name \":open-fn\", :raw-fn (fn [x] [:box :child (str x)]), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :generate-file-path {:y 1325, :fn (fn [x] x), :w 425, :raw-fn (fn [base-dir] (str base-dir \"/b64-image3-\" (rand-int 99999) \"-\" (rand-int 99999) \".png\")), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:base-dir :any}, :out {:out :string}}, :inputs nil, :h 85, :x 2125, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :relative-url-path-for-png-version {:y 2825, :fn (fn [x] (get-in x [10 0 2])), :w 275, :raw-fn (fn [x bang] (get-in x [10 0 2])), :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any, :bang :any}, :out {:out :string}}, :inputs nil, :h 85, :x 2150, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [10 0 2])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [10 0 2])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :exif-map {:y 1800, :fn (fn [x] x), :w 200, :raw-fn (fn [prompt revised] {:prompt-asked prompt, :revised-prompt revised}), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:prompt :any, :revised :any}, :out {:out :any}}, :inputs nil, :h 110, :x 2350, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :prompt-3 {:w 125, :h 60, :z 0, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"\"}, :right-click? true, :ports {:in {}, :out {:out :string}}, :x 1950, :y 650}, :build-auth-string {:y 1125, :fn (fn [x] x), :w 125, :raw-fn (fn [x] (str \"Bearer \" :settings/openai-api-key)), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 60, :x 1650, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :http-req-map {:y 1225, :description [\"Request map for the HTTP call. Headers, Method, URL, and the call body map.\"], :w 175, :right-click? true, :types nil, :z 0, :ports {:in {:apikey* :any, :req-body* :any}, :out {:out {:headers :map, :method :keyword, :url :string, :body :keyword, :* :map}}}, :inputs nil, :h 60, :x 1850, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :meta {}}, :user-input {:headers {\"Authorization\" :apikey*, \"Content-Type\" \"application/json\"}, :method :post, :url \"https://api.openai.com/v1/images/generations\", :body :req-body*}}}, :abs-file-base-path {:y 1175, :fn (fn [x] (get-in x [:output 0])), :w 250, :raw-fn (fn [x] (str (get-in x [:output 0]) \"/assets/openai-images\")), :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 100, :x 2300, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:output 0])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:output 0])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :write-exif-to-image-command {:y 2475, :fn (fn [x] x), :w 625, :raw-fn (fn [x img-path] (str \"exiftool -overwrite_original -Comment=\\\"$(cat \" x \")\\\" \" img-path)), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any, :img-path :any}, :out {:out :string}}, :inputs nil, :h 85, :x 2475, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :just-the-image {:y 1450, :description [\"Using a GET-IN to extract just the base64 image string from the JSON return map.\"], :fn (fn [x] (get-in x [:data 0 :b64_json])), :w 275, :raw-fn (fn [x] (get-in x [:data 0 :b64_json])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :string}}, :h 200, :x 1775, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:data 0 :b64_json])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:data 0 :b64_json])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :write-file-1_file-path {:y 2375, :fn (fn [x] (get-in x [:file-path])), :w 125, :raw-fn (fn [x] (get-in x [:file-path])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 85, :x 2475, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:file-path])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:file-path])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :output-revised-prompt {:y 1475, :description [\"OpenAI runs our prompt through an additional model to generate a more flowery and fleshed out description to try and generate a more interesting image. \" \"\" \"(also it censors and removes things it does not like, feels like an early gatekeep step since raw images are much harder to automatically moderate)...\"], :fn (fn [x] (get-in x [:data 0 :revised_prompt])), :w 350, :raw-fn (fn [x] (get-in x [:data 0 :revised_prompt])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :string}}, :h 160, :x 2250, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:data 0 :revised_prompt])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:data 0 :revised_prompt])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :style-param {:y 1000, :description [\"The style of the generated images. Must be one of vivid or natural. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for dall-e-3.\"], :w 125, :right-click? true, :z 0, :ports {:in {}, :out {:out :string}}, :h 85, :x 1925, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :meta {:* {:scrubber {:message \"OpenAI image gen style selector - DALLE3\", :values [\"vivid\" \"natural\"]}}}}, :user-input \"vivid\"}}}, :zoom [-983.54 -592.03 1.225], :opts {:close-on-done? true, :retry-on-error? true, :timeout 120000, :retries 404, :overrides {:style-param \"vivid\"}}, :flow-id \"openai-image-gen-ladder\", :flowmaps-connections [[:http-req-map/* :oai-api-call/req-map] [:oai-api-call/* :just-the-image/x] [:generate-file-path :save-base64-to-webp-file/file-path] [:just-the-image :save-base64-to-webp-file/b64-data] [:oai-api-call/* :output-revised-prompt/x] [:save-base64-to-webp-file :create-png-path/x] [:generate-file-path :create-convert-command-line/y] [:create-png-path :create-convert-command-line/x] [:create-convert-command-line :execute-shell-command/command] [:create-png-path :hiccup-image-box-w-png/x] [:save-base64-to-webp-file :node-js-color-thief-script/image-path] [:node-js-color-thief-script/dominantColor :dominant-color/x] [:node-js-color-thief-script/* :color-palette/x] [:dominant-color :hiccup-image-box-w-png/bg-color] [:color-palette :pop-color/x] [:pop-color :hiccup-image-box-w-png/color] [:execute-shell-command/command :hiccup-image-box-w-png/_] [:hiccup-image-box-w-png/* :relative-url-path-for-png-version/x] [:relative-url-path-for-png-version :done] [:base-web-directory :create-png-path/base-web-dir] [:request-body-map/* :http-req-map/req-body*] [:size-param :request-body-map/size*] [:style-param :request-body-map/style*] [:quality-param :request-body-map/quality*] [:prompt-jukebox :request-body-map/prompty*] [:output-revised-prompt :exif-map/revised] [:prompt-jukebox :exif-map/prompt] [:exif-map :stringify-exif-map/x] [:execute-shell-command/command :stringify-exif-map/bang] [:save-base64-to-webp-file :stringify-exif-map/img-path] [:prompt :prompt-jukebox/x+] [:prompt-3 :prompt-jukebox/x+] [:prompt-2 :prompt-jukebox/x+] [:prompt-5 :prompt-jukebox/x+] [:prompt-4 :prompt-jukebox/x+] [:stringify-exif-map :write-file-1/file-data] [:open-fn-1 :write-file-1/full-path] [:execute-shell-command/command :open-fn-1/_] [:write-file-1 :write-file-1_file-path/x] [:save-base64-to-webp-file :write-exif-to-image-command/img-path] [:write-file-1_file-path :write-exif-to-image-command/x] [:write-exif-to-image-command :shell-command-1/command] [:shell-command-1 :relative-url-path-for-png-version/bang] [:quality-param :open-fn-2/x] [:open-fn-2 :shell-command-2/command] [:shell-command-2 :abs-file-base-path/x] [:abs-file-base-path :generate-file-path/base-dir] [:abs-file-base-path :create-png-path/base-dir] [:build-auth-string :http-req-map/apikey*] [:size-param :build-auth-string/x]]}",
     :max
     "{:flowmaps {:simulation-fn-and-view {:y 1175, :fn (fn [x] x), :w 425, :raw-fn (fn [rows cols delay-ms iterations] (defn initialize-grid [rows cols] (into {} (for [y (range rows) x (range cols)] {[x y] {:x x, :y y, :color (if (zero? (rand-int 2)) :black :white), :age 0}}))) (defn neighbors [grid x y] (for [dx [-1 0 1] dy [-1 0 1] :let [nx (+ x dx) ny (+ y dy)] :when (and (not (and (= dx 0) (= dy 0))) (>= nx 0) (< nx cols) (>= ny 0) (< ny rows))] (get grid [nx ny]))) (defn alive? [cell] (and cell (= :black (:color cell)))) (defn next-state [grid cell] (let [x (:x cell) y (:y cell) n (count (filter alive? (neighbors grid x y))) alive (alive? cell)] (cond (and alive (or (< n 2) (> n 3))) (assoc cell :color :white :age 0) (and (not alive) (= n 3)) (assoc cell :color :black :age 1) alive (update cell :age inc) :else cell))) (defn update-grid [grid] (into {} (map (fn [[coords cell]] [coords (next-state grid cell)]) grid))) (let [grid (atom (initialize-grid rows cols)) tapln (fn [x] (rvbbit-backend.websockets/alert! :client-name [:box :child (str x)] 11 1 6)) draw-it (fn [grid] (let [max-x (apply max (map (comp :x second) grid)) max-y (apply max (map (comp :y second) grid))] (rvbbit-backend.websockets/alert! :client-name [:box :child [:v-box :children (for [y (range (inc max-y))] [:h-box :children (for [x (range (inc max-x))] (let [{:keys [color age]} (get grid [x y] {:color :white, :age 0}) ccolor (if (= :white color) :theme/editor-outer-rim-color \"#00000000\")] [:box :child (str (when (> age 0) age)) :align :center :justify :center {:style {:background-color ccolor, :font-size \"7px\", :font-family \"Homemade Apple\", :font-weight 400, :color (str ccolor \"12\"), :width \"20px\", :height \"20px\", :border \"2px solid #00000044\"}}]))])]] 15 5 4))) render-it (fn [grid] (let [max-x (apply max (map (comp :x second) grid)) max-y (apply max (map (comp :y second) grid)) max-age (apply max (for [[k v] grid] (get v :age)))] [:box :style {} :child [:v-box :children (for [y (range (inc max-y))] [:h-box :children (for [x (range (inc max-x))] (let [{:keys [color age]} (get grid [x y] {:color :white, :age 0}) ccolor (if (= :black color) \"#379fb5\" \"#00000000\") left? (= (get-in grid [[(- x 1) y] :color]) :black) right? (= (get-in grid [[(+ x 1) y] :color]) :black) up? (= (get-in grid [[x (- y 1)] :color]) :black) down? (= (get-in grid [[x (+ y 1)] :color]) :black) depth \"10px\" radi-str (str (if (or left? up?) \"0px\" depth) \" \" (if (or right? up?) \"0px\" depth) \" \" (if (or right? down?) \"0px\" depth) \" \" (if (or down? left?) \"0px\" depth))] [:box :child (str (when (> age 0) (str age))) :align :center :justify :center {:style {:color \"#000000\", :font-size (str (+ 15 (* 0.01 age)) \"px\"), :transition \"all 0.25s ease-out allow-discrete\", :font-weight (* age 100), :background-color ccolor, :width \"50px\", :filter (str \"brightness(\" (+ 50 (* age 20)) \"%)\"), :border (str \"3px solid \" ccolor), :border-radius radi-str, :height \"50px\"}}]))])]]))] (defn game-of-life [rows cols delay-ms iterations] (let [done (java.util.concurrent.CountDownLatch. 1)] (.start (Thread. (fn [] (loop [i iterations prev-grid (deref grid)] (if (zero? i) (.countDown done) (let [iteration-num (- iterations i) alive-cnt (fn [x] (count (for [[k v] (deref grid) :when (= (get v :color) :white)] k)))] (swap! grid update-grid) (save! :conway-render (render-it (deref grid)) nil) (save! :conway-iteration (- i 1)) (save! :conway-iteration-map {:alive (count (for [[_ v] (deref grid) :when (= (get v :color) :black)] 1)), :dead (count (for [[_ v] (deref grid) :when (= (get v :color) :white)] 1))}) (Thread/sleep delay-ms) (if (= prev-grid (deref grid)) (do (tapln (str \"Stable state reached at iteration \" iteration-num (rand-int 12333))) (.countDown done)) (recur (dec i) (deref grid))))))))) (.await done))) (game-of-life rows cols delay-ms iterations) (deref grid))), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:rows :any, :cols :any, :delay-ms :any, :iterations :any}, :out {:out :any}}, :inputs nil, :h 475, :x 1875, :view (fn [grid] (let [max-x (apply max (map (comp :x second) grid)) max-y (apply max (map (comp :y second) grid))] [:v-box :children (for [y (range (inc max-y))] [:h-box :children (for [x (range (inc max-x))] (let [{:keys [color age]} (get grid [x y] {:color :white, :age 0}) ccolor (if (= :white color) :theme/editor-outer-rim-color \"#00000000\")] [:box :child (str (when (> age 0) age)) :align :center :justify :center {:style {:background-color ccolor, :font-size \"7px\", :font-weight 400, :color (str ccolor \"12\"), :width \"20px\", :height \"20px\", :border \"1px solid #00000011\"}}]))])])), :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:rows :any, :cols :any, :delay-ms :any, :out :any}, :inputs [:rows :cols :delay-ms], :expandable? true, :drag-meta {:type :open-fn}}}}, :ending-alive {:y 1700, :fn (fn [x] x), :w 175, :raw-fn (fn [x] (count (for [[k v] x :when (= (get v :color) :white)] k))), :right-click? true, :icon \"zmdi-functions\", :types nil, :z 0, :ports {:in {:x :any}, :out {:out :any}}, :inputs nil, :h 110, :x 1875, :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :rows-int {:y 1050, :w 125, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :integer}}}, :inputs nil, :h 85, :x 1875, :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input 20}}, :cols-int {:y 1050, :w 100, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :integer}}}, :inputs nil, :h 85, :x 2050, :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input 20}}, :tick-delay-ms {:y 1050, :w 125, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :integer}}}, :inputs nil, :h 85, :x 2200, :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input 500}}, :iterations-max {:y 1050, :w 125, :right-click? true, :types nil, :z 0, :ports {:in {}, :out {:out {:out :integer}}}, :inputs nil, :h 85, :x 2350, :data {:flow-item {:expandable? true, :inputs []}, :drag-meta {:type :open-block}, :user-input 44}}}, :zoom [-785 -862 0.925], :opts {:retry-on-error? false, :retries 5, :close-on-done? true, :timeout 4500000}, :flow-id \"game-of-life-test1\", :flowmaps-connections [[:ending-alive :done] [:rows-int :simulation-fn-and-view/rows] [:cols-int :simulation-fn-and-view/cols] [:tick-delay-ms :simulation-fn-and-view/delay-ms] [:simulation-fn-and-view :ending-alive/x] [:iterations-max :simulation-fn-and-view/iterations]]}",
     :avg
     "{:flowmaps {:movie-name {:y 700, :fn (fn [x] x), :w 125, :raw-fn (fn [value] (Thread/sleep 900) value), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :string}}, :h 100, :x 1150, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :unpack-results-map_poster {:y 828.8827626233314, :fn (fn [x] (get-in x [:poster])), :w 175, :raw-fn (fn [x] (get-in x [:poster])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 310, :x 914.9390597794543, :view (fn [x] [:img {:src x}]), :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:poster])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:poster])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :expandable? true, :drag-meta {:type :open-fn}}}}, :rando-string {:w 125, :h 75, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true}, :user-input \"feed me, seymour!\"}, :z 0, :ports {:in {}, :out {:out :string}}, :x 1350, :y 575}, :unpack-results-map_video=480p {:y 875, :fn (fn [x] (get-in x [:video :480p])), :w 375, :raw-fn (fn [x] (get-in x [:video :480p])), :icon \"zmdi-functions\", :z 0, :ports {:in {:x :any}, :out {:out :any}}, :h 275, :x 1350, :view (fn [x] [:iframe {:src x, :style {:border \"none\", :background-color \"#00000000\", :width :panel-width+80-px, :height :panel-height+80-px}}]), :data {:flow-item {:category \":rabbit-base\", :fn (fn [x] (get-in x [:video :480p])), :name \":open-fn\", :raw-fn (fn [x] (get-in x [:video :480p])), :type :open-fn, :icon \"zmdi-functions\", :types {:x :any, :out :any}, :inputs [:x], :expandable? true, :drag-meta {:type :open-fn}}}}, :full-wow-line {:y 700, :fn (fn [x] x), :w 125, :raw-fn (fn [value] value), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :string}}, :h 100, :x 1300, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :view-output? true, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :unpack-results-map {:y 550, :fn (fn [x] x), :w 200, :raw-fn (fn [value] (Thread/sleep 900) value), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:video :map, :total_wows_in_movie :integer, :* :map, :release_date :string, :director :string, :full_line :string, :movie :string, :year :integer, :poster :string, :audio :string, :current_wow_in_movie :integer, :timestamp :string, :movie_duration :string, :character :string}}, :h 100, :x 1050, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :view-output? true, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :open-input {:w 225, :h 85, :data {:drag-meta {:type :open-block}, :flow-item {:expandable? true, :inputs []}, :user-input {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\"}, :view-output? false, :width 350}, :z 0, :ports {:out {:url :string, :* :map}, :in {}}, :x 1000, :y 275}, :open-fn-5 {:y 700, :fn (fn [x] x), :w 125, :raw-fn (fn [value] (str value)), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :string}}, :h 100, :x 1450, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}, :http-call-1 {:w 175, :h 100, :x 1050, :y 400, :z 0, :data {:flow-item {:description \"Basic HTTP call primitive\", :category \":rabbit-base\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :name \":http-call\", :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :input_types \"[:map]\", :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs \"[:req-map]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Basic HTTP call primitive\\\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \\\"zmdi-http\\\", :defaults {:req-map {:url \\\"https://owen-wilson-wow-api.onrender.com/wows/random\\\", :query-params {:movie \\\"Wedding Crashers\\\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \\\"#7BB696\\\"}, :selected-style {:color \\\"#7BB696\\\"}, :inputs [:req-map], :expandable? true, :required [:req-map]}\", :required [:req-map]}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :root [395 185], :h 6, :connection-id nil, :view-output? true, :queries {:name-drag-26 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :nn42]], :where [:= :name \":http-call\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":http-call\", :param-field :name, :source-panel-key :flow-fn-list*, :type :where, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 6}}, :icon \"zmdi-http\", :ports {:in {:req-map :map}, :out {:idx0 :map, :* :vector}}}, :character {:y 700, :fn (fn [x] x), :w 175, :raw-fn (fn [value] value), :right-click? true, :icon \"zmdi-functions\", :z 0, :ports {:in {:value :any}, :out {:out :string}}, :h 100, :x 950, :data {:flow-item {:description \"Write you own Clojure function! Godspeed!\", :category \":rabbit-base\", :fn (fn [x] x), :name \":open-fn\", :raw-fn (fn [x] x), :type :open-fn, :icon \"zmdi-functions\", :types {:value :any, :out :any}, :input_types \"[:any]\", :inputs \"[:value]\", :output_types \":any\", :expandable? true, :full_map \"{:description \\\"Write you own Clojure function! Godspeed!\\\", :fn (fn [x] x), :raw-fn (fn [x] x), :type :open-fn, :icon \\\"zmdi-functions\\\", :types {:value :any, :out :any}, :inputs [:value], :expandable? true, :view (fn [_])}\"}, :name \"drag-from-\", :w 5, :source-panel :flow-fn-list*, :h 6, :connection-id nil, :queries {:name-drag-25 {:select [:name :full_map :description :inputs :icon :input_types :output_types :category], :from [[:query/flow-fn-sys :ii11]], :where [:= :name \":open-fn\"]}}, :drag-meta {:data-type \"string\", :source-query :flow-fn-sys, :param-full \":open-fn\", :param-field :name, :source-panel-key :flow-fn-list*, :type :open-fn, :param-table :flow-fn-sys, :source-table :query/flow-fn-sys, :connection-id nil, :target :name, :row-num 5}}}}, :zoom [-251.86 -320.96 1.225], :opts nil, :flow-id \"a-random-wow\", :flowmaps-connections [[:http-call-1/idx0 :unpack-results-map/value] [:unpack-results-map/full_line :full-wow-line/value] [:open-input/* :http-call-1/req-map] [:unpack-results-map/character :character/value] [:unpack-results-map/movie :movie-name/value] [:rando-string :open-fn-5/value] [:unpack-results-map :unpack-results-map_poster/x] [:movie-name :done] [:unpack-results-map :unpack-results-map_video=480p/x]]} (non-numeric average)",
     :cardinality 100},
    :icon
    {:min "zmdi-developer-board",
     :data-type "string",
     :commons {"zmdi-developer-board" 12},
     :distinct 1,
     :group-by? true,
     :median "zmdi-developer-board",
     :max "zmdi-developer-board",
     :avg "zmdi-developer-board (non-numeric average)",
     :cardinality 8}},
   :database-type "SQLite",
   :rowcount 12},
  :tmp-820074675-hist-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :raw_custom_override_333496319__block_9858_clojure_new_clojure_
  {:fields
   {:query_error
    {:min "",
     :data-type "string",
     :commons
     {nil 1,
      "{:datasource #object[com.zaxxer.hikari.HikariDataSource 0x3fcb6c7b \"HikariDataSource (system-db)\"]}"
      1,
      "(from database connection)" 1},
     :distinct 4,
     :group-by? true,
     :median "(from database connection)",
     :max
     "{:datasource #object[com.zaxxer.hikari.HikariDataSource 0x3fcb6c7b \"HikariDataSource (system-db)\"]}",
     :avg
     "[SQLITE_ERROR] SQL error or missing database (no such table: raw_custom_override_333496319__block_9858_clojure_new_clojure_) (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 4},
  :query-11641
  {:fields
   {:lights
    {:min 29,
     :data-type "integer",
     :commons {29 1},
     :distinct 1,
     :group-by? false,
     :median 29,
     :max 29,
     :avg 29,
     :cardinality 100}},
   :database-type "DuckDB",
   :rowcount 1},
  :raw_custom_override178433811__block_9858_clojure_new_clojure_
  {:fields
   {:query_error
    {:min "",
     :data-type "string",
     :commons
     {nil 1,
      "{:datasource #object[com.zaxxer.hikari.HikariDataSource 0x1546a589 \"HikariDataSource (system-db)\"]}"
      1,
      "(from database connection)" 1},
     :distinct 4,
     :group-by? true,
     :median "(from database connection)",
     :max
     "{:datasource #object[com.zaxxer.hikari.HikariDataSource 0x1546a589 \"HikariDataSource (system-db)\"]}",
     :avg
     "[SQLITE_ERROR] SQL error or missing database (no such table: raw_custom_override178433811__block_9858_clojure_new_clojure_) (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 4},
  :flows-sys
  {:fields
   {:flow_id
    {:min "a-random-wow",
     :data-type "string",
     :commons
     {"hue-lights-api" 1, "hue-change-group-color" 1, "gpt35-color-parser" 1},
     :distinct 11,
     :group-by? true,
     :median "gpt35-color-parser",
     :max "simple-python-exec",
     :avg "gpt35-color-parser (non-numeric average)",
     :cardinality 100},
    :file_path
    {:min "./flows/a-random-wow.edn",
     :data-type "string",
     :commons
     {"./flows/buffy-color-comment.edn" 1,
      "./flows/hue-change-group-color.edn" 1,
      "./flows/simple-python-exec.edn" 1},
     :distinct 11,
     :group-by? true,
     :median "./flows/gpt35-color-parser.edn",
     :max "./flows/simple-python-exec.edn",
     :avg "./flows/gpt35-color-parser.edn (non-numeric average)",
     :cardinality 100},
    :last_modified
    {:min "2024-08-31 19:10:15",
     :data-type "string",
     :commons
     {"2024-08-31 19:10:15" 4, "2024-09-02 05:18:05" 1, "2024-09-02 08:25:12" 1},
     :distinct 8,
     :group-by? true,
     :median "2024-09-02 08:25:12",
     :max "2024-09-12 15:01:54",
     :avg "2024-09-12 15:01:54 (non-numeric average)",
     :cardinality 72}},
   :database-type "SQLite",
   :rowcount 11},
  :files-sys
  {:fields
   {:file_path
    {:min "./screens/cyan-pink-creepers.edn",
     :data-type "string",
     :commons
     {"./screens/hue-board.edn" 1,
      "./screens/dynamic-theme-example1.edn" 1,
      "./screens/looking-glass-sine-wave.edn" 1},
     :distinct 14,
     :group-by? true,
     :median "./screens/light-theme.edn",
     :max "./screens/winter-theme.edn",
     :avg "./screens/cyan-pink-creepers.edn (non-numeric average)",
     :cardinality 100},
    :screen_name
    {:min "cyan-pink-creepers",
     :data-type "string",
     :commons {"random-collection" 1, "light-theme" 1, "game-of-life" 1},
     :distinct 14,
     :group-by? true,
     :median "light-theme",
     :max "winter-theme",
     :avg "cyan-pink-creepers (non-numeric average)",
     :cardinality 100},
    :blocks
    {:min 5,
     :data-type "integer",
     :commons {6 2, 15 2, 8 1},
     :distinct 12,
     :group-by? true,
     :median 30.5,
     :max 48,
     :avg 16.214285714285715,
     :cardinality 85},
    :queries
    {:min 1,
     :data-type "integer",
     :commons {2 4, 1 3, 17 2},
     :distinct 8,
     :group-by? true,
     :median 2,
     :max 17,
     :avg 5.428571428571429,
     :cardinality 57},
    :ts
    {:min "2024-09-15 19:41:21",
     :data-type "string",
     :commons {"2024-09-15 19:41:21" 14},
     :distinct 1,
     :group-by? true,
     :median "2024-09-15 19:41:21",
     :max "2024-09-15 19:41:21",
     :avg "2024-09-15 19:41:21 (non-numeric average)",
     :cardinality 7}},
   :database-type "SQLite",
   :rowcount 14},
  :tmp--90583995-hist-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :new-clojure-sqlized
  {:fields
   {:light_id
    {:min ":10",
     :data-type "string",
     :commons {":17" 1, ":6" 1, ":19" 1},
     :distinct 29,
     :group-by? true,
     :median ":24",
     :max ":9",
     :avg ":14 (non-numeric average)",
     :cardinality 100},
    :light_name
    {:min "Bookshelf",
     :data-type "string",
     :commons {"Hue Bloom 1" 1, "On/Off plug 1" 1, "Hue Bloom 2" 1},
     :distinct 29,
     :group-by? true,
     :median "Hue bloom 6",
     :max "Weight Room overhead",
     :avg "Hue lightstrip plus 1 (non-numeric average)",
     :cardinality 100},
    :xy
    {:min "",
     :data-type "string",
     :commons {"[0.5016 0.4151]" 6, "[0.704 0.296]" 5, "[0.6915 0.3083]" 5},
     :distinct 10,
     :group-by? true,
     :median "[0.502 0.4204]",
     :max "[0.704 0.296]",
     :avg "[0.6915 0.3083] (non-numeric average)",
     :cardinality 34},
    :hue
    {:min "",
     :data-type "integer",
     :commons {0 10, 7675 6, 8417 3},
     :distinct 9,
     :group-by? true,
     :median "12057",
     :max "8417",
     :avg "0 (non-numeric average)",
     :cardinality 31},
    :hex
    {:min "#00000000",
     :data-type "string",
     :commons {"#ff0000" 10, "#ffb300" 6, "#ffc400" 3},
     :distinct 9,
     :group-by? true,
     :median "#ff0000",
     :max "#ffc400",
     :avg "#ff0000 (non-numeric average)",
     :cardinality 31},
    :brightness
    {:min "",
     :data-type "integer",
     :commons {77 8, 4 7, 82 5},
     :distinct 9,
     :group-by? true,
     :median "77",
     :max "96",
     :avg "77 (non-numeric average)",
     :cardinality 31},
    :is_on
    {:min "false",
     :data-type "string",
     :commons {"true" 21, "false" 8},
     :distinct 2,
     :group-by? true,
     :median "true",
     :max "true",
     :avg "true (non-numeric average)",
     :cardinality 6}},
   :database-type "DuckDB",
   :rowcount 29},
  :light-groups-sqlized
  {:fields
   {:group_id
    {:min "1",
     :data-type "string",
     :commons {"10" 1, "2" 1, "1" 1},
     :distinct 11,
     :group-by? true,
     :median "4",
     :max "9",
     :avg "10 (non-numeric average)",
     :cardinality 100},
    :group_name
    {:min "Back Patio",
     :data-type "string",
     :commons {"Main Bathroom" 1, "Pool House" 1, "TV area" 1},
     :distinct 11,
     :group-by? true,
     :median "Main Bathroom",
     :max "Weight Room",
     :avg "Back Patio (non-numeric average)",
     :cardinality 100},
    :all_on
    {:min "false",
     :data-type "string",
     :commons {"true" 8, "false" 3},
     :distinct 2,
     :group-by? true,
     :median "true",
     :max "true",
     :avg "false (non-numeric average)",
     :cardinality 18},
    :any_on
    {:min "false",
     :data-type "string",
     :commons {"true" 8, "false" 3},
     :distinct 2,
     :group-by? true,
     :median "true",
     :max "true",
     :avg "false (non-numeric average)",
     :cardinality 18},
    :lights
    {:min "[\"10\" \"17\"]",
     :data-type "string",
     :commons
     {"[\"20\" \"21\"]" 1, "[\"15\" \"29\"]" 1, "[\"27\" \"26\" \"11\" \"12\"]" 1},
     :distinct 11,
     :group-by? true,
     :median "[\"27\" \"26\" \"11\" \"12\"]",
     :max "[\"33\" \"7\" \"25\" \"13\" \"6\" \"8\" \"9\" \"14\"]",
     :avg "[\"24\" \"23\"] (non-numeric average)",
     :cardinality 100}},
   :database-type "DuckDB",
   :rowcount 11},
  :tmp-2107601347-hist-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :fflowparts-sys
  {:fields
   {:category
    {:min ":clojure-base",
     :data-type "string",
     :commons {":sub-flow" 19, ":rabbit-base" 18, ":clojure-base" 16},
     :distinct 3,
     :group-by? true,
     :median ":rabbit-base",
     :max ":sub-flow",
     :avg ":sub-flow (non-numeric average)",
     :cardinality 5},
    :description
    {:min "",
     :data-type "string",
     :commons
     {"" 19, "Basic HTTP call primitive" 2, "Clojure subtract function." 2},
     :distinct 33,
     :group-by? true,
     :median "Clojure false? function.",
     :max "Write you own Clojure function! Godspeed!",
     :avg " (non-numeric average)",
     :cardinality 62},
    :name
    {:min "",
     :data-type "string",
     :commons {"gpt35-color-parser" 6, "ask-buffy-1" 6, "hue-change-group-color" 5},
     :distinct 39,
     :group-by? true,
     :median ":rabbit-sql-query",
     :max "hue-change-group-color",
     :avg " (non-numeric average)",
     :cardinality 73},
    :file_path
    {:min "",
     :data-type "string",
     :commons {"" 52, "./flows/node-color-thief-js.edn" 1},
     :distinct 2,
     :group-by? true,
     :median "",
     :max "./flows/node-color-thief-js.edn",
     :avg " (non-numeric average)",
     :cardinality 3},
    :full_map
    {:min
     "{:description \"Basic HTTP call primitive\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}",
     :data-type "string",
     :commons
     {"{:description nil, :fn (), :flow-id \"hue-change-group-color\", :icon \"zmdi-puzzle-piece\", :flow-path \"/home/ryanr/rvbbit/backend/./flows/hue-change-group-color.edn\", :defaults {:group-id 200, :on-switch nil, :room-name \"Living Room\", :ccolor nil}, :types {:group-id :integer, :on-switch :boolean, :room-name :string, :ccolor :string, :out nil}, :inputs [:group-id :on-switch :room-name :ccolor], :required [:group-id :on-switch :room-name :ccolor]}"
      3,
      "{:description nil, :fn (), :flow-id \"ask-buffy-1\", :icon \"zmdi-puzzle-piece\", :flow-path \"/home/ryanr/rvbbit/backend/./flows/ask-buffy-1.edn\", :defaults {:the-color \"#ffffff\", :the-room \"Living Room\"}, :types {:the-color :string, :the-room :string, :out nil}, :inputs [:the-color :the-room], :required [:the-color :the-room]}"
      3,
      "{:description nil, :fn (), :flow-id \"ask-buffy-1\", :icon \"zmdi-puzzle-piece\", :flow-path \"/home/ryanr/rvbbit/backend/./flows/ask-buffy-1.edn\", :defaults {:the-color \"#ffffff\", :the-room \"Living Room\"}, :types {:the-color :string, :the-room :string, :out :any}, :inputs [:the-color :the-room], :required [:the-color :the-room]}"
      3},
     :distinct 44,
     :group-by? true,
     :median
     "{:description \"Send dialog content to a client - BYOB YOLO\", :fn (fn [destination content w h duration] (rvbbit-backend.websockets/alert! destination content w h duration :raw)), :inputs [:destination :content :w :h :duration], :icon \"zmdi-alert-polygon\", :style {:color \"#FDFD96\"}, :selected-style {:color \"#FDFD96\"}, :defaults {:destination :client-name, :content \"Alert!\", :w 10, :h 1, :duration 6}, :types {:destination :keyword, :content :any, :out :any, :w :integer, :h :integer, :duration :integer}}",
     :max
     "{:file-path \"./flows/node-color-thief-js.edn\", :icon \"zmdi-gradient\", :description \"Take an image local path and generate a color palette map from it.\"}",
     :avg
     "{:description nil, :fn (), :flow-id nil, :icon \"zmdi-puzzle-piece\", :flow-path \"/home/ryanr/rvbbit/backend/./flows/ask-buffy-1.edn\", :defaults {}, :types {:out nil}, :inputs [], :required []} (non-numeric average)",
     :cardinality 83},
    :icon
    {:min "fa-solid fa-terminal",
     :data-type "string",
     :commons {"zmdi-puzzle-piece" 19, "zmdi-pizza" 3, "zmdi-file-text" 3},
     :distinct 21,
     :group-by? true,
     :median "zmdi-pizza",
     :max "zmdi-washing-machine",
     :avg "zmdi-puzzle-piece (non-numeric average)",
     :cardinality 39}},
   :database-type "SQLite",
   :rowcount 53},
  :block_9858_new_clojure__block_9858_clojure_new_clojure_
  {:fields
   {:query_error
    {:min "",
     :data-type "string",
     :commons
     {nil 1,
      "{:datasource #object[com.zaxxer.hikari.HikariDataSource 0x3fcb6c7b \"HikariDataSource (system-db)\"]}"
      1,
      "(from database connection)" 1},
     :distinct 4,
     :group-by? true,
     :median "(from database connection)",
     :max
     "{:datasource #object[com.zaxxer.hikari.HikariDataSource 0x3fcb6c7b \"HikariDataSource (system-db)\"]}",
     :avg
     "[SQLITE_ERROR] SQL error or missing database (no such table: block_9858_new_clojure__block_9858_clojure_new_clojure_) (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 4},
  :new-clojure
  {:fields
   {:light-id
    {:data-type "string",
     :distinct 29,
     :group-by? true,
     :commons {},
     :cardinality 100},
    :light-name
    {:data-type "string",
     :distinct 29,
     :group-by? true,
     :commons {},
     :cardinality 100},
    :xy
    {:data-type "string",
     :distinct 10,
     :group-by? true,
     :commons {},
     :cardinality 34},
    :hue
    {:data-type "integer",
     :distinct 9,
     :group-by? true,
     :commons {},
     :cardinality 31},
    :hex
    {:data-type "string",
     :distinct 9,
     :group-by? true,
     :commons {},
     :cardinality 31},
    :brightness
    {:data-type "integer",
     :distinct 9,
     :group-by? true,
     :commons {},
     :cardinality 31},
    :is_on
    {:data-type "boolean",
     :distinct 2,
     :group-by? true,
     :commons {},
     :cardinality 6}},
   :rowcount 29},
  :runstream-chart-hue-change-group-color
  {:fields
   {:elapsed
    {:min -1,
     :data-type "float",
     :commons {0 5, 97 2, 83 2},
     :distinct 68,
     :group-by? false,
     :median 183.5,
     :max 120020,
     :avg 4878.0641025641025,
     :cardinality 87},
    :started
    {:min 1714154433753,
     :data-type "integer",
     :commons {1714157478233 1, 1726167881547 1, 1726161832313 1},
     :distinct 78,
     :group-by? true,
     :median 1.7141604592595E12,
     :max 1726170100944,
     :avg 1.7184688047075898E12,
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 78},
  :raw_custom_override660500913__block_11365_clojure_light_groups_
  {:fields
   {:query_error
    {:min "",
     :data-type "string",
     :commons
     {nil 1,
      "{:datasource #object[com.zaxxer.hikari.HikariDataSource 0x3fcb6c7b \"HikariDataSource (system-db)\"]}"
      1,
      "(from database connection)" 1},
     :distinct 4,
     :group-by? true,
     :median "(from database connection)",
     :max
     "{:datasource #object[com.zaxxer.hikari.HikariDataSource 0x3fcb6c7b \"HikariDataSource (system-db)\"]}",
     :avg
     "[SQLITE_ERROR] SQL error or missing database (no such table: raw_custom_override660500913__block_11365_clojure_light_groups_) (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 4},
  :tmp-2040167520-hist-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :light-groups
  {:fields
   {:group-id
    {:data-type "keyword",
     :distinct 11,
     :group-by? true,
     :commons {},
     :cardinality 100},
    :group-name
    {:data-type "string",
     :distinct 11,
     :group-by? true,
     :commons {},
     :cardinality 100},
    :all-on
    {:data-type "boolean",
     :distinct 2,
     :group-by? true,
     :commons {},
     :cardinality 18},
    :any-on
    {:data-type "boolean",
     :distinct 2,
     :group-by? true,
     :commons {},
     :cardinality 18},
    :lights
    {:data-type "string",
     :distinct 11,
     :group-by? true,
     :commons {},
     :cardinality 100}},
   :rowcount 11},
  :flow-fn-categories-sys
  {:fields
   {:category
    {:min ":clojure-base",
     :data-type "string",
     :commons {":sub-flow" 1, ":rabbit-base" 1, ":clojure-base" 1},
     :distinct 3,
     :group-by? true,
     :median ":rabbit-base",
     :max ":sub-flow",
     :avg ":clojure-base (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 3},
  :tmp--1594261780-hist-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :connections-sys
  {:fields
   {:database_name
    {:min "*cache-db*",
     :data-type "string",
     :commons {"*cache-db*" 4, "SQLite" 3},
     :distinct 2,
     :group-by? true,
     :median "*cache-db*",
     :max "SQLite",
     :avg "*cache-db* (non-numeric average)",
     :cardinality 28},
    :connection_id
    {:min "bigfoot-ufos",
     :data-type "string",
     :commons {"cache.db" 1, "bigfoot-ufos" 1, "met-on-tour" 1},
     :distinct 7,
     :group-by? true,
     :median "flows-db",
     :max "system-db",
     :avg "system-db (non-numeric average)",
     :cardinality 100},
    :styler_highlight_8717ssa
    {:min 0,
     :data-type "integer",
     :commons {0 7},
     :distinct 1,
     :group-by? true,
     :median 0,
     :max 0,
     :avg 0,
     :cardinality 14}},
   :database-type "SQLite",
   :rowcount 7},
  :raw_custom_override_2113494611__block_11365_clojure_light_groups_
  {:fields
   {:query_error
    {:min "",
     :data-type "string",
     :commons
     {nil 1,
      "{:datasource #object[com.zaxxer.hikari.HikariDataSource 0x1546a589 \"HikariDataSource (system-db)\"]}"
      1,
      "(from database connection)" 1},
     :distinct 4,
     :group-by? true,
     :median "(from database connection)",
     :max
     "{:datasource #object[com.zaxxer.hikari.HikariDataSource 0x1546a589 \"HikariDataSource (system-db)\"]}",
     :avg
     "[SQLITE_ERROR] SQL error or missing database (no such table: raw_custom_override_2113494611__block_11365_clojure_light_groups_) (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 4},
  :query-5741
  {:fields
   {:light_groups
    {:min 11,
     :data-type "integer",
     :commons {11 1},
     :distinct 1,
     :group-by? false,
     :median 11,
     :max 11,
     :avg 11,
     :cardinality 100}},
   :database-type "DuckDB",
   :rowcount 1},
  :reco-counts {:fields {}, :rowcount 0},
  :tmp--72672900-hist-sys
  {:fields
   {:kp
    {:min "[:block-1170 :views :pulled-val-5]",
     :data-type "string",
     :commons {"[:block-1170 :views :pulled-val-5]" 1},
     :distinct 1,
     :group-by? true,
     :median "[:block-1170 :views :pulled-val-5]",
     :max "[:block-1170 :views :pulled-val-5]",
     :avg "[:block-1170 :views :pulled-val-5] (non-numeric average)",
     :cardinality 100},
    :key
    {:min ":pulled-val-5",
     :data-type "string",
     :commons {":pulled-val-5" 1},
     :distinct 1,
     :group-by? true,
     :median ":pulled-val-5",
     :max ":pulled-val-5",
     :avg ":pulled-val-5 (non-numeric average)",
     :cardinality 100},
    :updated
    {:min "2024-09-12 15:34:42",
     :data-type "string",
     :commons {"2024-09-12 15:34:42" 1},
     :distinct 1,
     :group-by? true,
     :median "2024-09-12 15:34:42",
     :max "2024-09-12 15:34:42",
     :avg "2024-09-12 15:34:42 (non-numeric average)",
     :cardinality 100},
    :type
    {:min ":views",
     :data-type "string",
     :commons {":views" 1},
     :distinct 1,
     :group-by? true,
     :median ":views",
     :max ":views",
     :avg ":views (non-numeric average)",
     :cardinality 100},
    :panel_key
    {:min ":block-1170",
     :data-type "string",
     :commons {":block-1170" 1},
     :distinct 1,
     :group-by? true,
     :median ":block-1170",
     :max ":block-1170",
     :avg ":block-1170 (non-numeric average)",
     :cardinality 100},
    :diff_kp
    {:min
     "([0 1 0 1 :new] [0 1 0 1 :new] [0 1 0 1 :old] [0 1 0 1 :old] [0 1 0 1] [0 1 0 0] [0 1 0 0] [0 1 0] [0 1] [0 0] [0 0] [0])",
     :data-type "string",
     :commons
     {"([0 1 0 1 :new] [0 1 0 1 :new] [0 1 0 1 :old] [0 1 0 1 :old] [0 1 0 1] [0 1 0 0] [0 1 0 0] [0 1 0] [0 1] [0 0] [0 0] [0])"
      1},
     :distinct 1,
     :group-by? true,
     :median
     "([0 1 0 1 :new] [0 1 0 1 :new] [0 1 0 1 :old] [0 1 0 1 :old] [0 1 0 1] [0 1 0 0] [0 1 0 0] [0 1 0] [0 1] [0 0] [0 0] [0])",
     :max
     "([0 1 0 1 :new] [0 1 0 1 :new] [0 1 0 1 :old] [0 1 0 1 :old] [0 1 0 1] [0 1 0 0] [0 1 0 0] [0 1 0] [0 1] [0 0] [0 0] [0])",
     :avg
     "([0 1 0 1 :new] [0 1 0 1 :new] [0 1 0 1 :old] [0 1 0 1 :old] [0 1 0 1] [0 1 0 0] [0 1 0 0] [0 1 0] [0 1] [0 0] [0 0] [0]) (non-numeric average)",
     :cardinality 100},
    :client_name
    {:min ":masterful-blue-pheasant-1",
     :data-type "string",
     :commons {":masterful-blue-pheasant-1" 1},
     :distinct 1,
     :group-by? true,
     :median ":masterful-blue-pheasant-1",
     :max ":masterful-blue-pheasant-1",
     :avg ":masterful-blue-pheasant-1 (non-numeric average)",
     :cardinality 100},
    :pre_data
    {:min
     "[:box :size \"auto\" :align :center :justify :center :style {} :child [:str :flow/hue-change-group-color>:buffy-color-comment-1>0]]",
     :data-type "string",
     :commons
     {"[:box :size \"auto\" :align :center :justify :center :style {} :child [:str :flow/hue-change-group-color>:buffy-color-comment-1>0]]"
      1},
     :distinct 1,
     :group-by? true,
     :median
     "[:box :size \"auto\" :align :center :justify :center :style {} :child [:str :flow/hue-change-group-color>:buffy-color-comment-1>0]]",
     :max
     "[:box :size \"auto\" :align :center :justify :center :style {} :child [:str :flow/hue-change-group-color>:buffy-color-comment-1>0]]",
     :avg
     "[:box :size \"auto\" :align :center :justify :center :style {} :child [:str :flow/hue-change-group-color>:buffy-color-comment-1>0]] (non-numeric average)",
     :cardinality 100},
    :diff
    {:min "[[10 [[0 {:old :str, :new :speak}]]]]",
     :data-type "string",
     :commons {"[[10 [[0 {:old :str, :new :speak}]]]]" 1},
     :distinct 1,
     :group-by? true,
     :median "[[10 [[0 {:old :str, :new :speak}]]]]",
     :max "[[10 [[0 {:old :str, :new :speak}]]]]",
     :avg "[[10 [[0 {:old :str, :new :speak}]]]] (non-numeric average)",
     :cardinality 100},
    :data
    {:min
     "[:box :size \"auto\" :align :center :justify :center :style {} :child [:speak :flow/hue-change-group-color>:buffy-color-comment-1>0]]",
     :data-type "string",
     :commons
     {"[:box :size \"auto\" :align :center :justify :center :style {} :child [:speak :flow/hue-change-group-color>:buffy-color-comment-1>0]]"
      1},
     :distinct 1,
     :group-by? true,
     :median
     "[:box :size \"auto\" :align :center :justify :center :style {} :child [:speak :flow/hue-change-group-color>:buffy-color-comment-1>0]]",
     :max
     "[:box :size \"auto\" :align :center :justify :center :style {} :child [:speak :flow/hue-change-group-color>:buffy-color-comment-1>0]]",
     :avg
     "[:box :size \"auto\" :align :center :justify :center :style {} :child [:speak :flow/hue-change-group-color>:buffy-color-comment-1>0]] (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 1},
  :flow-fn-all-sys
  {:fields
   {:name
    {:min "",
     :data-type "string",
     :commons {":=" 1, ":>=" 1, ":write-file" 1},
     :distinct 39,
     :group-by? true,
     :median ":insert-to-cache-db",
     :max "hue-change-group-color",
     :avg " (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 39},
  :tmp-1522235499-hist-sys {:fields {}, :database-type "SQLite", :rowcount 0},
  :tmp-749483843-hist-sys
  {:fields
   {:kp
    {:min "[:block-810 :queries :query-11641]",
     :data-type "string",
     :commons {"[:block-810 :queries :query-11641]" 2},
     :distinct 1,
     :group-by? true,
     :median "[:block-810 :queries :query-11641]",
     :max "[:block-810 :queries :query-11641]",
     :avg "[:block-810 :queries :query-11641] (non-numeric average)",
     :cardinality 50},
    :key
    {:min ":query-11641",
     :data-type "string",
     :commons {":query-11641" 2},
     :distinct 1,
     :group-by? true,
     :median ":query-11641",
     :max ":query-11641",
     :avg ":query-11641 (non-numeric average)",
     :cardinality 50},
    :updated
    {:min "2024-09-12 11:50:27",
     :data-type "string",
     :commons {"2024-09-12 11:50:27" 1, "2024-09-12 11:50:38" 1},
     :distinct 2,
     :group-by? true,
     :median "2024-09-12 11:50:27",
     :max "2024-09-12 11:50:38",
     :avg "2024-09-12 11:50:38 (non-numeric average)",
     :cardinality 100},
    :type
    {:min ":queries",
     :data-type "string",
     :commons {":queries" 2},
     :distinct 1,
     :group-by? true,
     :median ":queries",
     :max ":queries",
     :avg ":queries (non-numeric average)",
     :cardinality 50},
    :panel_key
    {:min ":block-810",
     :data-type "string",
     :commons {":block-810" 2},
     :distinct 1,
     :group-by? true,
     :median ":block-810",
     :max ":block-810",
     :avg ":block-810 (non-numeric average)",
     :cardinality 50},
    :diff_kp
    {:min
     "([:new :from 0 1] [:new :from 0 1] [:new :from 0 0] [:new :from 0 0] [:new :from 0] [:new :from] [:new :select 0 1] [:new :select 0 1] [:new :select 0 0 1] [:new :select 0 0 1] [:new :select 0 0 0] [:new :select 0 0 0] [:new :select 0 0] [:new :select 0] [:new :select] [:new] [:old] [:old])",
     :data-type "string",
     :commons
     {"([:new :from 0 1] [:new :from 0 1] [:new :from 0 0] [:new :from 0 0] [:new :from 0] [:new :from] [:new :select 0 1] [:new :select 0 1] [:new :select 0 0 1] [:new :select 0 0 1] [:new :select 0 0 0] [:new :select 0 0 0] [:new :select 0 0] [:new :select 0] [:new :select] [:new] [:old] [:old])"
      1,
      "([:select 0 1 0 1 :new] [:select 0 1 0 1 :new] [:select 0 1 0 1 :old] [:select 0 1 0 1 :old] [:select 0 1 0 1] [:select 0 1 0 0] [:select 0 1 0 0] [:select 0 1 0] [:select 0 1] [:select 0 0] [:select 0 0] [:select 0] [:select])"
      1},
     :distinct 2,
     :group-by? true,
     :median
     "([:new :from 0 1] [:new :from 0 1] [:new :from 0 0] [:new :from 0 0] [:new :from 0] [:new :from] [:new :select 0 1] [:new :select 0 1] [:new :select 0 0 1] [:new :select 0 0 1] [:new :select 0 0 0] [:new :select 0 0 0] [:new :select 0 0] [:new :select 0] [:new :select] [:new] [:old] [:old])",
     :max
     "([:select 0 1 0 1 :new] [:select 0 1 0 1 :new] [:select 0 1 0 1 :old] [:select 0 1 0 1 :old] [:select 0 1 0 1] [:select 0 1 0 0] [:select 0 1 0 0] [:select 0 1 0] [:select 0 1] [:select 0 0] [:select 0 0] [:select 0] [:select])",
     :avg
     "([:select 0 1 0 1 :new] [:select 0 1 0 1 :new] [:select 0 1 0 1 :old] [:select 0 1 0 1 :old] [:select 0 1 0 1] [:select 0 1 0 0] [:select 0 1 0 0] [:select 0 1 0] [:select 0 1] [:select 0 0] [:select 0 0] [:select 0] [:select]) (non-numeric average)",
     :cardinality 100},
    :client_name
    {:min ":thorough-icosahedral-hippopotamus-31",
     :data-type "string",
     :commons {":thorough-icosahedral-hippopotamus-31" 2},
     :distinct 1,
     :group-by? true,
     :median ":thorough-icosahedral-hippopotamus-31",
     :max ":thorough-icosahedral-hippopotamus-31",
     :avg ":thorough-icosahedral-hippopotamus-31 (non-numeric average)",
     :cardinality 50},
    :pre_data
    {:min "nil",
     :data-type "string",
     :commons
     {"nil" 1,
      "{:select [[[:count 1] :rowcnt]], :from [[:query/new-clojure-sqlized :bb722]]}"
      1},
     :distinct 2,
     :group-by? true,
     :median "nil",
     :max
     "{:select [[[:count 1] :rowcnt]], :from [[:query/new-clojure-sqlized :bb722]]}",
     :avg
     "{:select [[[:count 1] :rowcnt]], :from [[:query/new-clojure-sqlized :bb722]]} (non-numeric average)",
     :cardinality 100},
    :diff
    {:min
     "{:old nil, :new {:select [[[:count 1] :rowcnt]], :from [[:query/new-clojure-sqlized :bb722]]}}",
     :data-type "string",
     :commons
     {"{:old nil, :new {:select [[[:count 1] :rowcnt]], :from [[:query/new-clojure-sqlized :bb722]]}}"
      1,
      "{:select [[0 [[1 {:old :rowcnt, :new :lights}]]]]}" 1},
     :distinct 2,
     :group-by? true,
     :median
     "{:old nil, :new {:select [[[:count 1] :rowcnt]], :from [[:query/new-clojure-sqlized :bb722]]}}",
     :max "{:select [[0 [[1 {:old :rowcnt, :new :lights}]]]]}",
     :avg
     "{:select [[0 [[1 {:old :rowcnt, :new :lights}]]]]} (non-numeric average)",
     :cardinality 100},
    :data
    {:min
     "{:select [[[:count 1] :lights]], :from [[:query/new-clojure-sqlized :bb722]]}",
     :data-type "string",
     :commons
     {"{:select [[[:count 1] :rowcnt]], :from [[:query/new-clojure-sqlized :bb722]]}"
      1,
      "{:select [[[:count 1] :lights]], :from [[:query/new-clojure-sqlized :bb722]]}"
      1},
     :distinct 2,
     :group-by? true,
     :median
     "{:select [[[:count 1] :lights]], :from [[:query/new-clojure-sqlized :bb722]]}",
     :max
     "{:select [[[:count 1] :rowcnt]], :from [[:query/new-clojure-sqlized :bb722]]}",
     :avg
     "{:select [[[:count 1] :lights]], :from [[:query/new-clojure-sqlized :bb722]]} (non-numeric average)",
     :cardinality 100}},
   :database-type "SQLite",
   :rowcount 2}},
 :default-col-widths
 {:block-810 {:query-11641 211},
  :system-connections-list* {:connections-sys 126},
  :block-6207-1 {:query-5741 211},
  :system-fields-list* {:fields-sys ##Inf},
  :block-11365 {:light-groups-sqlized 100},
  :files-list* {:files-sys 170},
  :blocks-list* {:blocks-sys 127},
  :block-9858 {:new-clojure 101},
  :system-tables-list* {:tables-sys 133}},
 :runstream-drops nil,
 :tabs
 ["hue-philips-desktop"
  "pyramidal eagle"
  "fantastic walrus"
  "baby-blue skunk"
  "cerulean fox"
  "bulbous gull"],
 :selected-cols nil,
 :runstreams
 {"hue-change-group-color"
  {:open? true,
   :open-outputs? true,
   :values
   {:on-switch {:open? false, :value :param/on-switch, :source :param},
    :group-id
    {:open? false, :value :flow/gpt35-color-parser>open-fn-1>0, :source :param},
    :ccolor {:value :flow/gpt35-color-parser>open-fn-1>1, :source :param},
    :room-name {:value :flow/gpt35-color-parser>open-fn-1>3, :source :param}},
   :fire? true},
  "gpt35-color-parser"
  {:open? true,
   :open-outputs? false,
   :values {:user-sentence {:value :param/voice, :source :param}},
   :fire? true}},
 :editor? false,
 :buffy? false,
 :valid-kits
 {[:clojure :export-to-csv]
  [[nil :queries :tmp-820074675-hist-sys]
   [nil :queries :tmp--72672900-hist-sys]
   [nil :queries nil]
   [nil :queries :new-clojure]
   [:block-810 :queries :query-11641]
   [:block-6207-1 :queries :query-5741]
   [:block-11365 :queries :light-groups-sqlized]
   [:block-9858 :queries :new-clojure-sqlized]],
  [:clojure :count-map-keys] [],
  [:clojure :new-lundberg] [[:* :* :*]],
  [:clojure :view-lundberg]
  [[:block-2835 :views :hi]
   [:block-3452 :views :param-val]
   [:block-810 :views :hare-vw-6]
   [:block-8889 :views :pulled-val-3]
   [:block-8358 :views :pulled-val]
   [:block-3033 :views :pulled-val-2]
   [:block-3732 :views :pulled-val-1]
   [:block-6207-1 :views :hare-vw-7]
   [:block-11365 :views :hi]
   [:block-11365 :views :stack]
   [:block-4785 :views :param-val-2]
   [:block-6220 :views :vv]
   [:block-1434 :views :param-val]
   [:block-4610 :views :flow-play]
   [:block-6207 :views :flow-play]
   [:block-6636 :views :hi]
   [:block-6636 :views :stack]
   [:block-1170 :views :pulled-val-5]
   [:block-9858 :views :hare-vw]
   [:block-2961 :views :hi]
   [:block-2961 :views :stack]],
  [:clojure :gen-ev] [],
  [:outliers :get-outliers]
  [[nil :queries :tmp-820074675-hist-sys]
   [nil :queries :tmp--72672900-hist-sys]
   [nil :queries nil]
   [nil :queries :new-clojure]
   [:block-810 :queries :query-11641]
   [:block-6207-1 :queries :query-5741]
   [:block-11365 :queries :light-groups-sqlized]
   [:block-9858 :queries :new-clojure-sqlized]]},
 :memory [189115582 150595086 4294705152],
 :client-name :respected-aquamarine-dinosaur-24,
 :flow-editor? true,
 :window {:w 2191, :h 1458},
 :quake-console? false,
 :implicit-rowsets {:solver [nil :new-clojure]},
 :post-meta
 {:new-clojure-sqlized
  {:* {:rowcount 29},
   :light_id {:distinct 29},
   :light_name {:distinct 29},
   :xy {:distinct 10},
   :hue {:distinct 8},
   :hex {:distinct 9},
   :brightness {:distinct 8},
   :is_on {:distinct 2}},
  :light-groups-sqlized
  {:* {:rowcount 11},
   :group_id {:distinct 11},
   :group_name {:distinct 11},
   :all_on {:distinct 2},
   :any_on {:distinct 2},
   :lights {:distinct 11}},
  :query-11641 {:* {:rowcount 1}, :lights {:distinct 1}},
  :tables-sys
  {:* {:rowcount 37},
   :db_schema {:distinct 1},
   :db_catalog {:distinct 0},
   :connection_id {:distinct 1},
   :schema_cat {:distinct 0},
   :table_name {:distinct 37},
   :fields {:distinct 11}},
  :files-sys
  {:* {:rowcount 14},
   :file_path {:distinct 14},
   :screen_name {:distinct 14},
   :blocks {:distinct 12},
   :queries {:distinct 8},
   :ts {:distinct 1}}},
 :flow-estimates
 {:blocks-sys {:times 0.002, :run-id :blocks-sys},
  :fields-sys {:times 0.001, :run-id :fields-sys},
  :tables-sys {:times 0.018, :run-id :tables-sys},
  :block-10760-new-clojure-1 {:times 0.017, :run-id :block-10760-new-clojure-1},
  :query-11641 {:times 0.004, :run-id :query-11641},
  :files-sys {:times 0.002, :run-id :files-sys},
  :new-clojure-sqlized {:times 0.001, :run-id :new-clojure-sqlized},
  :light-groups-sqlized {:times 0.002, :run-id :light-groups-sqlized},
  :block-9858-new-clojure {:times 0.18, :run-id :block-9858-new-clojure},
  :connections-sys {:times 0.001, :run-id :connections-sys},
  "get-my-colors-1889902411-solver-flow-"
  {:times 1, :run-id "b71fed6f-4c85-437e-8db3-4c04008286b5"},
  :query-5741 {:times 0.002, :run-id :query-5741},
  "gpt35-color-parser" {:times 1, :run-id "b64cbceb-9211-43e4-a4f5-ef868d559128"},
  "hue-change-group-color"
  {:times 1, :run-id "5c71fce5-d6d4-4e52-a884-8d12462394dc"},
  "get-my-colors1536111637-solver-flow-"
  {:times 1, :run-id "900ce0d6-291c-41b1-a156-d38182541d70"}},
 :screen-name "hue-board",
 :panel-hashes
 {nil -2103848848,
  :block-2835 -2604940,
  :block-3452 -725294953,
  :block-810 395856513,
  :block-8889 2131694800,
  :block-7598 1982109006,
  :block-3628 624400722,
  :block-5568 832350147,
  :block-8358 532826430,
  :block-3033 999175106,
  :block-3732 -278570090,
  :block-10151 104907170,
  :block-6207-1 -1938284271,
  :block-11365 -509932549,
  :block-4785 -571106039,
  :block-6220 -1240071363,
  :block-1434 238553430,
  :block-4610 611538991,
  :block-6207 719249815,
  :block-6636 1627126644,
  :block-1170 1223439334,
  :block-9858 170725677,
  :block-2961 467271692},
 :recos-page2 0,
 :selected-tab "hue-philips-desktop",
 :col-names nil,
 :snapshots {:params {}},
 :recos-page 0,
 :rs-overrides-hashmap
 {"hue-change-group-color"
  {:on-switch true, :group-id 7, :ccolor "#ffffff", :room-name "TV area"},
  "gpt35-color-parser"
  {:user-sentence "Let's turn off the lights in the TV room, please."}},
 :base-sniff-queries
 {:raw_custom_override660500913__block_11365_clojure_light_groups_ -1010486181,
  :raw_custom_override_333496319__block_9858_clojure_new_clojure_ -1066037675,
  :block_9858_new_clojure__block_9858_clojure_new_clojure_ 1746601433},
 :user-params-hash -1285293644,
 :grid-recos? true,
 :resolved-queries
 {:tmp-820074675-hist-sys {:_last-run "15:34:28"},
  :tmp--72672900-hist-sys {:_last-run "15:36:26"},
  nil {:_last-run "20:06:51"},
  :new-clojure {:_last-run "16:08:46"},
  :query-11641
  {:select [[[:count 1] :lights]],
   :from
   [[{:select [:*],
      :_sqlized-at "2024-09-15 20:09:06",
      :_sqlized-by [:block-9858 :clojure :new-clojure],
      :_sqlized-hash -1224980434,
      :from [:block_9858_new_clojure__block_9858_clojure_new_clojure_]}
     :bb722]]},
  :query-5741
  {:select [[[:count 1] :light_groups]],
   :from
   [[{:select [:*],
      :_sqlized-at "2024-09-12 16:06:02",
      :_sqlized-by [:block-11365 :clojure :light-groups],
      :_sqlized-hash -1665236269,
      :from [:raw_custom_override660500913__block_11365_clojure_light_groups_]}
     :aa7]]},
  :light-groups-sqlized
  {:select [:*],
   :connection-id "cache.db",
   :_sqlized-at "2024-09-12 16:06:02",
   :_sqlized-by [:block-11365 :clojure :light-groups],
   :_sqlized-hash -1665236269,
   :from [:raw_custom_override660500913__block_11365_clojure_light_groups_]},
  :new-clojure-sqlized
  {:select [:*],
   :connection-id "cache.db",
   :_sqlized-at "2024-09-15 20:09:06",
   :_sqlized-by [:block-9858 :clojure :new-clojure],
   :_sqlized-hash -1224980434,
   :from [:block_9858_new_clojure__block_9858_clojure_new_clojure_]}},
 :panels
 {nil
  {:queries
   {:tmp-820074675-hist-sys {:_last-run "15:34:28"},
    :tmp--72672900-hist-sys {:_last-run "15:36:26"},
    nil {:_last-run "20:06:51"},
    :new-clojure {:_last-run "16:08:46"}}},
  :block-2835
  {:h 2,
   :w 23,
   :root [2 1],
   :tab "hue-philips-desktop",
   :selected-view :hi,
   :name "block-2835",
   :views
   {:hi
    [:h-box
     :justify
     :between
     :align
     :center
     :children
     [[:img {:src "images/hue-logo.png", :width "100px"}]
      [:box
       :align
       :center
       :justify
       :center
       :style
       {:font-size "33px",
        :padding-right "15px",
        :font-weight 700,
        :color :theme/editor-outer-rim-color,
        :font-family :theme/base-font}
       :child
       "philips hue simple control board"]]]},
   :queries {}},
  :block-3452
  {:h 2,
   :w 10,
   :tab "hue-philips-desktop",
   :root [15 17],
   :name "block-3452",
   :views
   {:param-val
    [:box
     :align
     :center
     :justify
     :center
     :padding
     "13px"
     :style
     {:font-size "14px"}
     :child
     [:scrubber [:param :on-switch]]]},
   :queries {}},
  :block-810
  {:name "block-810",
   :w 5,
   :selected-view :query-11641,
   :root [15 11],
   :h 4,
   :connection-id "cache.db",
   :queries
   {:query-11641
    {:select [[[:count 1] :lights]], :from [[:query/new-clojure-sqlized :bb722]]}},
   :tab "hue-philips-desktop",
   :views
   {:hare-vw-6
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "21px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "It's not enough to be able to pick up a sword. You have to know which end to poke into the enemy."]}},
  :block-8889
  {:name "block-8889",
   :w 6,
   :selected-view :pulled-val-3,
   :root [26 23],
   :h 4,
   :queries {},
   :tab "hue-philips-desktop",
   :minimized? true,
   :views
   {:pulled-val-3
    [:box
     :size
     "auto"
     :align
     :center
     :justify
     :center
     :style
     {}
     :child
     [:str :flow/gpt35-color-parser>:open-fn-1>3]]}},
  :block-7598 {:root [12 18]},
  :block-3628 {:root [19 21]},
  :block-5568 {:root [26 21]},
  :block-8358
  {:name "block-8358",
   :w 7,
   :selected-mode {:pulled-val :clover},
   :selected-view :pulled-val,
   :root [18 23],
   :h 5,
   :queries {},
   :tab "hue-philips-desktop",
   :minimized? true,
   :views
   {:pulled-val
    [:box :style {} :child [:data-viewer :flow/gpt35-color-parser>:open-fn-1]]}},
  :block-3033
  {:name "block-3033",
   :w 6,
   :selected-view :pulled-val-2,
   :root [26 22],
   :h 4,
   :queries {},
   :tab "hue-philips-desktop",
   :minimized? true,
   :views
   {:pulled-val-2
    [:box
     :size
     "auto"
     :align
     :center
     :justify
     :center
     :style
     {}
     :child
     [:str :flow/gpt35-color-parser>:open-fn-1>0]]}},
  :block-3732
  {:name "block-3732",
   :w 6,
   :selected-view :pulled-val-1,
   :root [26 18],
   :h 4,
   :queries {},
   :tab "hue-philips-desktop",
   :minimized? true,
   :views
   {:pulled-val-1
    [:box
     :size
     "auto"
     :align
     :center
     :justify
     :center
     :style
     {}
     :child
     [:str :flow/gpt35-color-parser>:open-fn-1>1]]}},
  :block-10151 {:root [12 21]},
  :block-6207-1
  {:name "block-6207",
   :w 5,
   :selected-view :query-5741,
   :root [20 11],
   :h 4,
   :connection-id "cache.db",
   :queries
   {:query-5741
    {:select [[[:count 1] :light_groups]],
     :from [[:query/light-groups-sqlized :aa7]]}},
   :tab "hue-philips-desktop",
   :views
   {:hare-vw-7
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "21px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "The only thing that keeps you sane is to think that it's all a bad dream."]}},
  :block-11365
  {:last-run 68,
   :clojure
   {:light-groups
    (do
      (ns rvbbit-backend.websockets)
      (let [react :flow/hue-change-group-color>:buffy-color-comment-1>0
            ss (vec
                 (for
                   [[k v]
                    (http-call
                      {:url
                       "http://10.174.1.174/api/sqOjLm0JhoioAbwhwPm6ZlHiuCAx-KnQEYwAZOWL/groups"})]
                   {:group-id k,
                    :group-name (get v :name),
                    :all-on (get-in v [:state :all_on]),
                    :any-on (get-in v [:state :any_on]),
                    :lights (str (get v :lights))}))]
        (println (str ss 3))
        ss))},
   :name "block-11365",
   :w 8,
   :selected-mode {:light-groups :edn},
   :selected-view :light-groups-sqlized,
   :root [17 3],
   :h 8,
   :queries
   {:light-groups-sqlized
    {:select [:*],
     :connection-id "cache.db",
     :_sqlized-at "2024-09-12 16:06:02",
     :_sqlized-by [:block-11365 :clojure :light-groups],
     :_sqlized-hash
     :solver-meta/raw-custom-override660500913>output>evald-result>value-hash,
     :from [:raw_custom_override660500913__block_11365_clojure_light_groups_]}},
   :tab "hue-philips-desktop",
   :views
   {:hi
    [:box
     :align
     :center
     :justify
     :center
     :attr
     {:id ":block-11365.:hi"}
     :style
     {:font-size "106px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "hi!"],
    :stack [:layout {:panels {:hello-there {:h 0.99, :w 0.99, :root [0 0]}}}]}},
  :block-4785
  {:h 4,
   :w 10,
   :tab "hue-philips-desktop",
   :root [15 19],
   :name ":param/voice",
   :selected-view :param-val-2,
   :views
   {:param-val-2
    [:box
     :align
     :center
     :justify
     :center
     :padding
     "13px"
     :style
     {:font-size "24px"}
     :child
     [:str :param/voice]]},
   :queries {}},
  :block-6220
  {:name "hue-philips-desktop",
   :w 23,
   :icon "images/hue-logo.png",
   :selected-view :vv,
   :root [17 3],
   :h 26,
   :tab "bulbous gull",
   :minimized? false,
   :ghosted? false,
   :views {:vv [:grid "hue-philips-desktop"]}},
  :block-1434
  {:h 12,
   :w 13,
   :tab "hue-philips-desktop",
   :root [2 11],
   :name "block-1434",
   :views
   {:param-val
    [:box
     :align
     :center
     :justify
     :center
     :padding
     "13px"
     :style
     {:font-size "11px"}
     :child
     [:scrubber [:param :ccolor]]]},
   :queries {}},
  :block-4610
  {:h 2,
   :w 10,
   :views
   {:flow-play
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "25px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     [:run-flow
      ["gpt35-color-parser"
       "run gpt35-color-parser"
       {:user-sentence :param/voice}]]]},
   :name "flow-play",
   :root [15 19],
   :tab "hue-philips-desktop",
   :minimized? true},
  :block-6207
  {:h 2,
   :w 10,
   :views
   {:flow-play
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "25px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :param/ccolor,
      :font-family :theme/base-font}
     :child
     [:run-flow
      ["hue-change-group-color"
       :param/run-now-label
       {:group-id :light-groups-sqlized/group_id,
        :room-name :light-groups-sqlized/group_name,
        :on-switch :param/on-switch,
        :ccolor :param/ccolor}]]]},
   :name "flow-play",
   :root [15 15],
   :tab "hue-philips-desktop"},
  :block-6636
  {:h 4,
   :w 5,
   :root [37 18],
   :tab "pyramidal eagle",
   :selected-view :hi,
   :name "block-6636",
   :views
   {:hi
    [:box
     :align
     :center
     :justify
     :center
     :attr
     {:id ":block-6636.:hi"}
     :style
     {:font-size "106px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     [:string :sys/selected-tab-idx]],
    :stack [:layout {:panels {:hello-there {:h 0.99, :w 0.99, :root [0 0]}}}]},
   :queries {}},
  :block-1170
  {:h 3,
   :w 23,
   :tab "hue-philips-desktop",
   :root [2 23],
   :name "block-1170",
   :selected-view :pulled-val-5,
   :views
   {:pulled-val-5
    [:box
     :size
     "auto"
     :align
     :center
     :justify
     :center
     :padding
     "13px"
     :style
     {:font-size "24px"}
     :child
     [:speak-target
      [:flow/hue-change-group-color>:buffy-color-comment-1>0 :block-6220]]]},
   :queries {}},
  :block-9858
  {:clojure
   {:new-clojure
    (do
      (ns rvbbit-backend.websockets)
      (let [tt [[:time/second=10
                 :time/second=20
                 :time/second=30
                 :time/second=40
                 :time/second=0
                 :time/second=5
                 :time/second=15
                 :time/second=25
                 :time/second=35
                 :time/second=45
                 :time/second=55
                 :time/second=50]]
            react :flow/hue-change-group-color>:buffy-color-comment-1>0
            ss (vec
                 (for
                   [[k v]
                    (http-call
                      {:url
                       "http://10.174.1.174/api/sqOjLm0JhoioAbwhwPm6ZlHiuCAx-KnQEYwAZOWL/lights"})
                    :let
                    [_ (println (str (get v :name) "."))]]
                   {:light-id (str k),
                    :light-name (get v :name),
                    :xy (str (get-in v [:state :xy])),
                    :hue (get-in v [:state :hue]),
                    :hex
                    (str (rvbbit-backend.util/hue-to-hex (get-in v [:state :hue]))),
                    :brightness (get-in v [:state :bri]),
                    :is_on (get-in v [:state :on])}))]
        ss))},
   :name "block-9858",
   :w 15,
   :selected-mode {:new-clojure :rowset},
   :selected-view :new-clojure,
   :root [2 3],
   :h 8,
   :display {:new-clojure :value},
   :queries
   {:new-clojure-sqlized
    {:select [:*],
     :connection-id "cache.db",
     :_sqlized-at "2024-09-15 20:09:06",
     :_sqlized-by [:block-9858 :clojure :new-clojure],
     :_sqlized-hash
     :solver-meta/block-9858-new-clojure>output>evald-result>value-hash,
     :from [:block_9858_new_clojure__block_9858_clojure_new_clojure_]}},
   :tab "hue-philips-desktop",
   :views
   {:hare-vw
    [:box
     :align
     :center
     :justify
     :center
     :style
     {:font-size "21px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     "Reality is that which, when you stop believing in it, doesn't go away."]}},
  :block-2961
  {:h 4,
   :w 11,
   :root [38 11],
   :tab "pyramidal eagle",
   :selected-view :hi,
   :name "block-2961",
   :views
   {:hi
    [:box
     :align
     :center
     :justify
     :center
     :attr
     {:id ":block-2961.:hi"}
     :style
     {:font-size "22px",
      :font-weight 700,
      :padding-top "6px",
      :padding-left "14px",
      :margin-top "-8px",
      :color :theme/editor-outer-rim-color,
      :font-family :theme/base-font}
     :child
     [:case
      [:sys/selected-tab-idx
       0
       "url(images/sneaky4.png)"
       1
       "url(images/gen/b64-decoded-1156592.png)"
       ""]]],
    :stack [:layout {:panels {:hello-there {:h 0.99, :w 0.99, :root [0 0]}}}]},
   :queries {}}},
 :materialized-theme
 {:codemirror-theme "rvbbit-dynamic",
  :editor-param-background-color "#000000",
  :pop-2 "#291c36",
  :base-block-style
  {:background-color "#1b0b2173",
   :border-radius [:sticky-border-radius "24px"],
   :backdrop-filter "blur(4px) brightness(40%)",
   :filter nil},
  :vega-defaults
  {:view {:stroke "transparent"},
   :axis
   {:domainColor "#ffffff22",
    :grid true,
    :font "Lato",
    :labelColor "#ffffff88",
    :titleFont "Lato",
    :titleColor "#ffffff99",
    :labelFont "Lato",
    :domain false,
    :gridColor "#ffffff22",
    :tickColor "#ffffff22",
    :axisFont "Lato"},
   :legend
   {:labelFont "Lato",
    :legendFont "Lato",
    :labelColor "#ffffff99",
    :titleColor "#ffffff99",
    :stroke "#ffffff99",
    :titleFont "Lato"},
   :header {:labelFont "Lato", :titleFont "Lato", :titleColor "#ffffff99"},
   :mark {:font "Lato"},
   :title
   {:font "Lato",
    :subtitleFont "Lato",
    :labelFont "Lato",
    :titleFont "Lato",
    :titleColor "#ffffff99"}},
  :grid-selected-column-css
  {:background-color "#00000088", :filter "brightness(200%)"},
  :base-block-color-selected "#1a2851",
  :block-title-font-color "#ffffff",
  :universal-pop-color "#253764",
  :base-block-color "#04041e82",
  :editor-rim-color "#1b0b21",
  :base-block-filter-selected
  "drop-shadow(0.35rem 0.35rem 0.4rem #8dceff) drop-shadow(-0.35rem -0.35rem 0.4rem #8dceff)",
  :vega-default-color-scheme {:scheme "pastel2"},
  :data-colors
  {"float" "#42aad1",
   "boolean" "#31d334",
   "map" "#15afee",
   "list" "#8f1c20",
   "string" "#af81e0",
   "any" "#8a5027",
   "vector" "#6735c3",
   "keyword" "#eb66a6",
   "rabbit-code" "#db1350",
   "datetime" "#7a1e39",
   "integer" "#4cc586",
   "unknown" "#56701a",
   "date" "#0b2d2a"},
  :editor-grid-selected-font-color "#000000",
  :monospaced-font "JetBrains Mono",
  :editor-grid-selected-background-color "#dc9cb0",
  :nivo-defaults
  {:font-family "Instagram Sans",
   :labels
   {:text
    {:fill "#ffffff",
     :font-size "16px",
     :font-family "Instagram Sans",
     :font-weight 700}},
   :tooltip
   {:container
    {:background "#000",
     :color "#ffffff",
     :text {:fill "#eeeeee"},
     :fontSize "18px",
     :borderRadius "4px",
     :boxShadow "0 1px 2px rgba(0, 0, 0, 0.55)",
     :padding "5px 9px"},
    :basic {:whiteSpace "pre", :display "flex", :alignItems "center"},
    :tableCell {:padding "3px 5px"}},
   :axis
   {:legend
    {:text
     {:fill "#ffffff",
      :font-size "14px",
      :font-family "Instagram Sans",
      :font-weight 700}},
    :ticks
    {:line {:stroke "#ffffff60"}, :text {:fill "#ffffff60", :font-weight 700}}},
   :grid {:line {:stroke "#ffffff", :strokeWidth 0, :strokeDasharray "0 0"}}},
  :editor-outer-rim-color "#253764",
  :grid-selected-font-color "#000000",
  :block-title-selected-font-color "#ffffff",
  :grid-selected-background-color "#a3d3ff",
  :grid-font-color "#ffffff",
  :canvas-background-css
  {:background-image "url(assets/openai-images/monster-blur-cubism.jpg)",
   :transition "all 1.8s ease-in-out",
   :background-blend-mode "overlay",
   :background-size "cover",
   :background-color "#00000088"},
  :editor-font-color "#ffffff",
  :base-font "Poppins",
  :block-tab-selected-font-color "#c9d1ff",
  :editor-background-color "#000006",
  :editor-grid-font-color "#ffffff",
  :pop-1 "#b3b9d9"},
 :selected-block "none!",
 :theme-colors-hashmap
 {"float" "#42aad1",
  "boolean" "#31d334",
  "map" "#15afee",
  "list" "#8f1c20",
  "string" "#af81e0",
  "any" "#8a5027",
  "vector" "#6735c3",
  "keyword" "#eb66a6",
  "rabbit-code" "#db1350",
  "datetime" "#7a1e39",
  "integer" "#4cc586",
  "unknown" "#56701a",
  "date" "#0b2d2a"},
 :solver-fn nil,
 :click-param
 {:flow-fn-sys
  {:name ":http-call",
   :full_map
   "{:description \"Basic HTTP call primitive\", :fn (fn [req-map] (rvbbit-backend.websockets/http-call req-map)), :icon \"zmdi-http\", :defaults {:req-map {:url \"https://owen-wilson-wow-api.onrender.com/wows/random\", :query-params {:movie \"Wedding Crashers\", :results 40}}}, :types {:req-map :map, :out :any}, :style {:color \"#7BB696\"}, :selected-style {:color \"#7BB696\"}, :inputs [:req-map], :expandable? false, :required [:req-map]}",
   :description "Basic HTTP call primitive",
   :inputs "[:req-map]",
   :icon "zmdi-http",
   :input_types "[:map]",
   :output_types ":any",
   :category ":rabbit-base"},
  :blocks-sys
  {:block_key ":*theme*",
   :block_name "(meta: this screen's theme)",
   :queries 0,
   :views 28,
   :block_data
   "{:codemirror-theme \"rvbbit-dynamic\", :editor-param-background-color \"#000000\", :base-block-style :param/glass-fish-style, :vega-defaults {:view {:stroke \"transparent\"}, :axis {:domainColor \"#ffffff22\", :grid true, :font \"Lato\", :labelColor \"#ffffff88\", :titleFont \"Lato\", :titleColor \"#ffffff99\", :labelFont \"Lato\", :domain false, :gridColor \"#ffffff22\", :tickColor \"#ffffff22\", :axisFont \"Lato\"}, :legend {:labelFont \"Lato\", :legendFont \"Lato\", :labelColor \"#ffffff99\", :titleColor \"#ffffff99\", :stroke \"#ffffff99\", :titleFont \"Lato\"}, :header {:labelFont \"Lato\", :titleFont \"Lato\", :titleColor \"#ffffff99\"}, :mark {:font \"Lato\"}, :title {:font \"Lato\", :subtitleFont \"Lato\", :labelFont \"Lato\", :titleFont \"Lato\", :titleColor \"#ffffff99\"}}, :grid-selected-column-css {:background-color \"#00000088\", :filter \"brightness(200%)\"}, :base-block-color-selected :param/generated-colors>second-darkest, :block-title-font-color \"#ffffff\", :universal-pop-color :param/tetradss>0, :base-block-color \"#04041e82\", :editor-rim-color :param/generated-colors>colors>4, :base-block-filter-selected \"drop-shadow(0.35rem 0.35rem 0.4rem #8dceff) drop-shadow(-0.35rem -0.35rem 0.4rem #8dceff)\", :vega-default-color-scheme {:scheme \"pastel2\"}, :data-colors :param/generated-colors>data-colors, :editor-grid-selected-font-color \"#000000\", :monospaced-font \"JetBrains Mono\", :editor-grid-selected-background-color \"#dc9cb0\", :nivo-defaults {:font-family \"Instagram Sans\", :labels {:text {:fill \"#ffffff\", :font-size \"16px\", :font-family \"Instagram Sans\", :font-weight 700}}, :tooltip {:container {:background \"#000\", :color \"#ffffff\", :text {:fill \"#eeeeee\"}, :fontSize \"18px\", :borderRadius \"4px\", :boxShadow \"0 1px 2px rgba(0, 0, 0, 0.55)\", :padding \"5px 9px\"}, :basic {:whiteSpace \"pre\", :display \"flex\", :alignItems \"center\"}, :tableCell {:padding \"3px 5px\"}}, :axis {:legend {:text {:fill \"#ffffff\", :font-size \"14px\", :font-family \"Instagram Sans\", :font-weight 700}}, :ticks {:line {:stroke \"#ffffff60\"}, :text {:fill \"#ffffff60\", :font-weight 700}}}, :grid {:line {:stroke \"#ffffff\", :strokeWidth 0, :strokeDasharray \"0 0\"}}}, :editor-outer-rim-color :param/generated-colors>dominant, :grid-selected-font-color \"#000000\", :block-title-selected-font-color \"#ffffff\", :grid-selected-background-color \"#a3d3ff\", :grid-font-color \"#ffffff\", :canvas-background-css {:background-image [:str \"url(\" :param/rel-image-path \")\"], :transition \"all 1.8s ease-in-out\", :background-blend-mode \"overlay\", :background-size \"cover\", :background-color \"#00000088\"}, :editor-font-color \"#ffffff\", :base-font \"Poppins\", :block-tab-selected-font-color \"#c9d1ff\", :editor-background-color \"#000006\", :editor-grid-font-color \"#ffffff\"}",
   :view_names
   ":codemirror-theme :editor-param-background-color :base-block-style :vega-defaults :grid-selected-column-css :base-block-color-selected :block-title-font-color :universal-pop-color :base-block-color :editor-rim-color :base-block-filter-selected :vega-default-color-scheme :data-colors :editor-grid-selected-font-color :monospaced-font :editor-grid-selected-background-color :nivo-defaults :editor-outer-rim-color :grid-selected-font-color :block-title-selected-font-color :grid-selected-background-color :grid-font-color :canvas-background-css :editor-font-color :base-font :block-tab-selected-font-color :editor-background-color :editor-grid-font-color",
   :query_names ""},
  :flows-sys
  {:flow_id "hue-change-group-color",
   :file_path "/home/ryanr/rvbbit/backend/./flows/hue-change-group-color.edn",
   :last_modified "2024-09-12 14:28:59"},
  :files-sys
  {:file_path "./screens/cyan-pink-creepers.edn",
   :screen_name "cyan-pink-creepers",
   :blocks 10,
   :queries 6,
   :ts "2024-09-15 19:41:21"},
  :grid1-sys*
  {:flow_id "hue-change-group-color",
   :run_id "c215c8a8-cc7f-4aa4-bbcb-579f5e033dc9",
   :start_ts "2024-04-26 14:16:16",
   :seconds 0.054,
   :human_elapsed "less than a second",
   :overrides "No",
   :result "success"},
  :new-clojure-sqlized nil,
  :query-error-drag-25 {},
  :light-groups-sqlized
  {:group_id "7",
   :group_name "TV area",
   :all_on "true",
   :any_on "true",
   :lights "[\"31\" \"25\" \"6\" \"7\" \"8\" \"9\" \"13\" \"14\" \"18\" \"16\"]"},
  :new-clojure nil,
  :param
  {:background-image-path [:str :param/path-dir :param/rel-image-path],
   :keper "b64-image3-30849-74975-4k.webp",
   :voice "Let's turn off the lights in the TV room, please.",
   :parsed-group-id :flow/gpt35-color-parser>:open-fn-1>0,
   :path-dir "",
   :selected-view-data nil,
   :tt :sys/selected-tab,
   :selected-view nil,
   :keys 2342,
   :bools true,
   :generated-colors
   [:run-solver [:get-my-colors {:input-image-path :param/background-image-path}]],
   :on-switch true,
   :ccolor "#989b64",
   :parsed-color :flow/gpt35-color-parser>:open-fn-1>1,
   :run-now-label [:str "Changing " :light-groups-sqlized/group_name " to..."],
   :rel-image-path [:str "assets/openai-images/monster-blur-cubism.jpg"],
   :tetradss [:tetrads :param/generated-colors>dominant],
   :selected-block :block-6220,
   :glass-fish-style
   {:background-color [:str :param/generated-colors>darkest 73],
    :border-radius [:sticky-border-radius "24px"],
    :backdrop-filter "blur(4px) brightness(40%)",
    :filter nil},
   :parsed-room :flow/gpt35-color-parser>:open-fn-1>3},
  :theme
  {:codemirror-theme "rvbbit-dynamic",
   :editor-param-background-color "#000000",
   :pop-2 :solver/colors-of-the-moment>colors>2,
   :base-block-style :param/glass-fish-style,
   :vega-defaults
   {:view {:stroke "transparent"},
    :axis
    {:domainColor "#ffffff22",
     :grid true,
     :font "Lato",
     :labelColor "#ffffff88",
     :titleFont "Lato",
     :titleColor "#ffffff99",
     :labelFont "Lato",
     :domain false,
     :gridColor "#ffffff22",
     :tickColor "#ffffff22",
     :axisFont "Lato"},
    :legend
    {:labelFont "Lato",
     :legendFont "Lato",
     :labelColor "#ffffff99",
     :titleColor "#ffffff99",
     :stroke "#ffffff99",
     :titleFont "Lato"},
    :header {:labelFont "Lato", :titleFont "Lato", :titleColor "#ffffff99"},
    :mark {:font "Lato"},
    :title
    {:font "Lato",
     :subtitleFont "Lato",
     :labelFont "Lato",
     :titleFont "Lato",
     :titleColor "#ffffff99"}},
   :grid-selected-column-css
   {:background-color "#00000088", :filter "brightness(200%)"},
   :base-block-color-selected :param/generated-colors>second-darkest,
   :block-title-font-color "#ffffff",
   :universal-pop-color :param/tetradss>0,
   :base-block-color "#04041e82",
   :editor-rim-color :param/generated-colors>colors>4,
   :base-block-filter-selected
   "drop-shadow(0.35rem 0.35rem 0.4rem #8dceff) drop-shadow(-0.35rem -0.35rem 0.4rem #8dceff)",
   :vega-default-color-scheme {:scheme "pastel2"},
   :data-colors :param/generated-colors>data-colors,
   :editor-grid-selected-font-color "#000000",
   :monospaced-font "JetBrains Mono",
   :editor-grid-selected-background-color "#dc9cb0",
   :nivo-defaults
   {:font-family "Instagram Sans",
    :labels
    {:text
     {:fill "#ffffff",
      :font-size "16px",
      :font-family "Instagram Sans",
      :font-weight 700}},
    :tooltip
    {:container
     {:background "#000",
      :color "#ffffff",
      :text {:fill "#eeeeee"},
      :fontSize "18px",
      :borderRadius "4px",
      :boxShadow "0 1px 2px rgba(0, 0, 0, 0.55)",
      :padding "5px 9px"},
     :basic {:whiteSpace "pre", :display "flex", :alignItems "center"},
     :tableCell {:padding "3px 5px"}},
    :axis
    {:legend
     {:text
      {:fill "#ffffff",
       :font-size "14px",
       :font-family "Instagram Sans",
       :font-weight 700}},
     :ticks
     {:line {:stroke "#ffffff60"}, :text {:fill "#ffffff60", :font-weight 700}}},
    :grid {:line {:stroke "#ffffff", :strokeWidth 0, :strokeDasharray "0 0"}}},
   :editor-outer-rim-color :param/generated-colors>dominant,
   :grid-selected-font-color "#000000",
   :block-title-selected-font-color "#ffffff",
   :grid-selected-background-color "#a3d3ff",
   :grid-font-color "#ffffff",
   :canvas-background-css
   {:background-image [:str "url(" :param/rel-image-path ")"],
    :transition "all 1.8s ease-in-out",
    :background-blend-mode "overlay",
    :background-size "cover",
    :background-color "#00000088"},
   :editor-font-color "#ffffff",
   :base-font "Poppins",
   :block-tab-selected-font-color "#c9d1ff",
   :editor-background-color "#000006",
   :editor-grid-font-color "#ffffff",
   :pop-1 :solver/colors-of-the-moment>colors>1},
  :light-groups {:all_on "1", :styler_highlight_2520 0},
  :flow-fn-categories-sys {:category ":rabbit-base"},
  :connections-sys
  {:database_name "*cache-db*",
   :connection_id "cache.db",
   :styler_highlight_8717ssa 0},
  :sys {:selected-tab "hue-philips-desktop", :selected-tab-idx 0}},
 :selected-flow "my-new-flow4474"}